import discord
from discord.ext import commands
import aiosqlite
import asyncio
from datetime import datetime, timedelta
import os
import random
from typing import Optional
from dotenv import load_dotenv

# üîß –ê–î–ú–ò–ù–´ (—Ç–≤–æ–∏ ID)
ADMIN_IDS = [1195144951546265675, 766767256742526996, 1138140772097597472]

# üéµ –î–õ–Ø –ú–£–ó–´–ö–ò
import yt_dlp
import asyncio

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∞—Ä–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_warns = {}

def is_admin():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    async def predicate(interaction: discord.Interaction):
        return interaction.user.id in ADMIN_IDS
    return commands.check(predicate)

load_dotenv()
TOKEN = os.getenv('DISCORD_BOT_TOKEN')

if not TOKEN:
    print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞–π .env —Ñ–∞–π–ª —Å DISCORD_BOT_TOKEN")
    exit(1)

# üé® –î–ò–ó–ê–ô–ù
class Design:
    COLORS = {
        "primary": 0x5865F2, "success": 0x57F287, "warning": 0xFEE75C, 
        "danger": 0xED4245, "economy": 0xF1C40F, "music": 0x9B59B6,
        "moderation": 0xE74C3C, "shop": 0x9B59B6, "casino": 0xE67E22,
        "info": 0x3498DB, "premium": 0xFFD700, "roblox": 0xE74C3C,
        "discord": 0x5865F2, "tds": 0xF1C40F
    }

    @staticmethod
    def create_embed(title: str, description: str = "", color: str = "primary"):
        return discord.Embed(title=title, description=description, color=Design.COLORS.get(color, Design.COLORS["primary"]))

# üíæ –ë–ê–ó–ê –î–ê–ù–ù–´–•
class Database:
    def __init__(self):
        self.db_path = "data/bot.db"
        os.makedirs("data", exist_ok=True)
    
    async def init_db(self):
        async with aiosqlite.connect(self.db_path) as db:
            # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await db.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    balance INTEGER DEFAULT 1000,
                    level INTEGER DEFAULT 1,
                    xp INTEGER DEFAULT 0,
                    daily_claimed TEXT,
                    work_cooldown TEXT
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
            await db.execute('''
                CREATE TABLE IF NOT EXISTS inventory (
                    user_id INTEGER,
                    item_id INTEGER,
                    quantity INTEGER DEFAULT 1,
                    PRIMARY KEY (user_id, item_id)
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤
            await db.execute('DROP TABLE IF EXISTS orders')
            await db.execute('''
                CREATE TABLE orders (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    category TEXT,
                    product_name TEXT,
                    quantity INTEGER,
                    price REAL,
                    details TEXT,
                    status TEXT DEFAULT '–æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã',
                    order_time TEXT,
                    admin_id INTEGER,
                    completion_time TEXT,
                    payment_screenshot TEXT
                )
            ''')
            
            await db.commit()
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

# üí∞ –≠–ö–û–ù–û–ú–ò–ö–ê
class EconomySystem:
    def __init__(self, db: Database):
        self.db = db

    async def get_balance(self, user_id: int):
        async with aiosqlite.connect(self.db.db_path) as db:
            async with db.execute('SELECT balance FROM users WHERE user_id = ?', (user_id,)) as cursor:
                result = await cursor.fetchone()
                if result:
                    return result[0]
                else:
                    await db.execute('INSERT INTO users (user_id) VALUES (?)', (user_id,))
                    await db.commit()
                    return 1000
    
    async def update_balance(self, user_id: int, amount: int):
        async with aiosqlite.connect(self.db.db_path) as db:
            await db.execute('INSERT OR IGNORE INTO users (user_id) VALUES (?)', (user_id,))
            await db.execute('UPDATE users SET balance = balance + ? WHERE user_id = ?', (amount, user_id))
            await db.commit()
            return await self.get_balance(user_id)
    
    async def get_user_data(self, user_id: int):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with aiosqlite.connect(self.db.db_path) as db:
            async with db.execute('SELECT balance, level, xp, daily_claimed, work_cooldown FROM users WHERE user_id = ?', (user_id,)) as cursor:
                result = await cursor.fetchone()
                if result:
                    return {
                        "balance": result[0],
                        "level": result[1],
                        "xp": result[2],
                        "daily_claimed": result[3],
                        "work_cooldown": result[4]
                    }
                else:
                    await db.execute('INSERT INTO users (user_id) VALUES (?)', (user_id,))
                    await db.commit()
                    return {
                        "balance": 1000,
                        "level": 1,
                        "xp": 0,
                        "daily_claimed": None,
                        "work_cooldown": None
                    }
    
    async def add_xp(self, user_id: int, xp_gain: int):
        """–î–æ–±–∞–≤–∏—Ç—å –æ–ø—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        async with aiosqlite.connect(self.db.db_path) as db:
            await db.execute('INSERT OR IGNORE INTO users (user_id) VALUES (?)', (user_id,))
            await db.execute('UPDATE users SET xp = xp + ? WHERE user_id = ?', (xp_gain, user_id))
            
            async with db.execute('SELECT xp, level FROM users WHERE user_id = ?', (user_id,)) as cursor:
                user_data = await cursor.fetchone()
                if user_data:
                    xp, level = user_data
                    xp_needed = level * 100
                    
                    if xp >= xp_needed:
                        await db.execute('UPDATE users SET level = level + 1, xp = xp - ? WHERE user_id = ?', (xp_needed, user_id))
                        level_up = True
                    else:
                        level_up = False
            
            await db.commit()
            return level_up

    async def reset_weekly_xp(self):
        """–°–±—Ä–æ—Å –æ–ø—ã—Ç–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é"""
        async with aiosqlite.connect(self.db.db_path) as db:
            await db.execute('UPDATE users SET xp = 0 WHERE xp > 0')
            await db.commit()
    
    # üîß –ê–î–ú–ò–ù –ú–ï–¢–û–î–´
    async def admin_add_money(self, user_id: int, amount: int):
        """–ê–¥–º–∏–Ω—Å–∫–∞—è –≤—ã–¥–∞—á–∞ –¥–µ–Ω–µ–≥"""
        async with aiosqlite.connect(self.db.db_path) as db:
            await db.execute('INSERT OR IGNORE INTO users (user_id) VALUES (?)', (user_id,))
            await db.execute('UPDATE users SET balance = balance + ? WHERE user_id = ?', (amount, user_id))
            await db.commit()
            return await self.get_balance(user_id)
    
    async def admin_set_money(self, user_id: int, amount: int):
        """–ê–¥–º–∏–Ω—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–ª–∞–Ω—Å–∞"""
        async with aiosqlite.connect(self.db.db_path) as db:
            await db.execute('INSERT OR IGNORE INTO users (user_id) VALUES (?)', (user_id,))
            await db.execute('UPDATE users SET balance = ? WHERE user_id = ?', (amount, user_id))
            await db.commit()
            return await self.get_balance(user_id)
    
    async def admin_reset_cooldowns(self, user_id: int):
        """–°–±—Ä–æ—Å –∫—É–ª–¥–∞—É–Ω–æ–≤"""
        async with aiosqlite.connect(self.db.db_path) as db:
            await db.execute('INSERT OR IGNORE INTO users (user_id) VALUES (?)', (user_id,))
            await db.execute('UPDATE users SET daily_claimed = NULL, work_cooldown = NULL WHERE user_id = ?', (user_id,))
            await db.commit()

# üè™ –ú–ê–ì–ê–ó–ò–ù
SHOP_CATEGORIES = {
    "üéÆ TDS/TDX": {
        "color": "tds",
        "items": {
            1: {"name": "üèóÔ∏è –ò–Ω–∂–µ–Ω–µ—Ä (4500 –≥–µ–º–æ–≤)", "price": 860, "type": "–∏–≥—Ä–∞"},
            2: {"name": "‚ö° –£—Å–∫–æ—Ä–∏—Ç–µ–ª—å (2500 –≥–µ–º–æ–≤)", "price": 490, "type": "–∏–≥—Ä–∞"},
            3: {"name": "üíÄ –ù–µ–∫—Ä–æ–º–∞–Ω—Å–µ—Ä (1800 –≥–µ–º–æ–≤)", "price": 350, "type": "–∏–≥—Ä–∞"},
            4: {"name": "ü•ä –ë—Ä–∞–≤–ª–µ—Ä (1250 –≥–µ–º–æ–≤)", "price": 240, "type": "–∏–≥—Ä–∞"},
            5: {"name": "üéØ –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –•–∞—Ä–¥–∫–æ—Ä", "price": 90, "type": "—É—Å–ª—É–≥–∞"},
            6: {"name": "üçï –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –ü–∏—Ü—Ü–∞ –ü–∞—Ç–∏", "price": 45, "type": "—É—Å–ª—É–≥–∞"},
        }
    },
    "üî¥ Roblox": {
        "color": "roblox", 
        "items": {
            7: {"name": "üéÅ Robux Gift (–∫—É—Ä—Å: 1 —Ä—É–± = 2 robux)", "price": 0.5, "per_unit": True, "type": "—Ü–∏—Ñ—Ä–æ–≤–æ–π"},
            8: {"name": "üé´ Robux Gamepass (–∫—É—Ä—Å: 1 —Ä—É–± = 1.5 robux)", "price": 0.67, "per_unit": True, "type": "—Ü–∏—Ñ—Ä–æ–≤–æ–π"},
        }
    },
    "ü•ä Blox Fruits": {
        "color": "roblox",
        "items": {
            9: {"name": "üé≤ –†–∞–Ω–¥–æ–º –ú–∏—Ñ–∏–∫", "price": 15, "type": "–∏–≥—Ä–∞"},
            10: {"name": "üêÜ Leopard", "price": 55, "type": "–∏–≥—Ä–∞"},
            11: {"name": "üí® Gas", "price": 60, "type": "–∏–≥—Ä–∞"},
        }
    },
    "‚ö° Discord": {
        "color": "discord",
        "items": {
            12: {"name": "‚≠ê –ü—Ä–µ–º–∏—É–º+ (–º–µ—Å—è—Ü)", "price": 999, "type": "–ø–æ–¥–ø–∏—Å–∫–∞"},
            13: {"name": "üéñÔ∏è –°–ø–æ–Ω—Å–æ—Ä (–Ω–∞–≤—Å–µ–≥–¥–∞)", "price": 405, "type": "—Ä–æ–ª—å"},
            14: {"name": "üé® –ö–∞—Å—Ç–æ–º —Ä–æ–ª—å (–º–µ—Å—è—Ü)", "price": 76, "type": "—Ä–æ–ª—å"},
        }
    }
}

class ShopSystem:
    def __init__(self, db: Database):
        self.db = db
        self.categories = SHOP_CATEGORIES
        self.payment_details = "**üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:**\n–ö–∞—Ä—Ç–∞: `2200 0000 0000 0000`\n–¢–∏–Ω—å–∫–æ—Ñ—Ñ\n–ü–æ–ª—É—á–∞—Ç–µ–ª—å: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤"
    
    async def create_order(self, user_id: int, item_id: int, quantity: int = 1, details: str = ""):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å —Ç–∏–∫–µ—Ç–æ–º"""
        # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä
        product = None
        category_name = ""
        for cat_name, category in self.categories.items():
            if item_id in category["items"]:
                product = category["items"][item_id]
                category_name = cat_name
                break
        
        if not product:
            return {"success": False, "error": "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"}
        
        # –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã
        if product.get("per_unit"):
            total_price = product["price"] * quantity
        else:
            total_price = product["price"]
            quantity = 1
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –ë–î
        async with aiosqlite.connect(self.db.db_path) as db:
            cursor = await db.execute('''
                INSERT INTO orders (user_id, category, product_name, quantity, price, details, order_time)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            ''', (user_id, category_name, product["name"], quantity, total_price, details, datetime.now().isoformat()))
            
            order_id = cursor.lastrowid
            await db.commit()
        
        return {
            "success": True, 
            "order_id": order_id,
            "product": product,
            "total_price": total_price,
            "quantity": quantity
        }
    
    async def get_user_orders(self, user_id: int):
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with aiosqlite.connect(self.db.db_path) as db:
            async with db.execute('''
                SELECT id, product_name, quantity, price, status, order_time 
                FROM orders WHERE user_id = ? ORDER BY order_time DESC
            ''', (user_id,)) as cursor:
                return await cursor.fetchall()
    
    async def update_order_status(self, order_id: int, status: str, admin_id: int = None, screenshot: str = None):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞"""
        async with aiosqlite.connect(self.db.db_path) as db:
            if status == "–≤—ã–ø–æ–ª–Ω–µ–Ω":
                await db.execute('''
                    UPDATE orders SET status = ?, admin_id = ?, completion_time = ?, payment_screenshot = ?
                    WHERE id = ?
                ''', (status, admin_id, datetime.now().isoformat(), screenshot, order_id))
            else:
                await db.execute('UPDATE orders SET status = ?, payment_screenshot = ? WHERE id = ?', 
                               (status, screenshot, order_id))
            await db.commit()
    
    def get_product_by_id(self, item_id: int):
        """–ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä –ø–æ ID"""
        for category in self.categories.values():
            if item_id in category["items"]:
                return category["items"][item_id]
        return None

# üé∞ –ö–ê–ó–ò–ù–û
class CasinoSystem:
    def __init__(self, db: Database):
        self.db = db
    
    async def play_slots(self, user_id: int, bet: int):
        if bet <= 0:
            return {"success": False, "error": "–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π"}
        
        economy = EconomySystem(self.db)
        balance = await economy.get_balance(user_id)
        
        if balance < bet:
            return {"success": False, "error": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤"}
        
        symbols = ["üçí", "üçã", "üçä", "üçá", "üîî", "üíé"]
        result = [random.choice(symbols) for _ in range(3)]
        
        if result[0] == result[1] == result[2]:
            multiplier = 5
        elif result[0] == result[1] or result[1] == result[2]:
            multiplier = 2
        else:
            multiplier = 0
        
        win_amount = bet * multiplier
        net_win = win_amount - bet
        
        await economy.update_balance(user_id, net_win)
        
        return {
            "success": True,
            "result": result,
            "bet": bet,
            "win_amount": win_amount,
            "multiplier": multiplier
        }

# üõ°Ô∏è –ú–û–î–ï–†–ê–¶–ò–Ø
class ModerationSystem:
    async def create_ticket(self, user: discord.Member, reason: str):
        guild = user.guild
        
        overwrites = {
            guild.default_role: discord.PermissionOverwrite(read_messages=False),
            user: discord.PermissionOverwrite(read_messages=True, send_messages=True),
            guild.me: discord.PermissionOverwrite(read_messages=True, send_messages=True)
        }
        
        for admin_id in ADMIN_IDS:
            admin = guild.get_member(admin_id)
            if admin:
                overwrites[admin] = discord.PermissionOverwrite(read_messages=True, send_messages=True)
        
        channel = await guild.create_text_channel(
            f'ticket-{user.display_name}',
            overwrites=overwrites,
            topic=f'–¢–∏–∫–µ—Ç: {reason}'
        )
        
        embed = Design.create_embed("üé´ –¢–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω", 
                                  f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user.mention}\n"
                                  f"**–ü—Ä–∏—á–∏–Ω–∞:** {reason}", "success")
        
        await channel.send(embed=embed)
        return channel

# üéµ –ú–£–ó–´–ö–ê
class MusicPlayer:
    def __init__(self):
        self.queues = {}
        self.voice_clients = {}
    
    def get_queue(self, guild_id: int):
        if guild_id not in self.queues:
            self.queues[guild_id] = []
        return self.queues[guild_id]
    
    async def connect_to_voice_channel(self, interaction: discord.Interaction):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É"""
        if not interaction.user.voice:
            await interaction.response.send_message("‚ùå –í—ã –Ω–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ! –ó–∞–π–¥–∏—Ç–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª.", ephemeral=True)
            return None
        
        voice_channel = interaction.user.voice.channel
        
        if interaction.guild.id in self.voice_clients:
            voice_client = self.voice_clients[interaction.guild.id]
            if voice_client.is_connected():
                await voice_client.move_to(voice_channel)
                return voice_client
        
        try:
            voice_client = await voice_channel.connect()
            self.voice_clients[interaction.guild.id] = voice_client
            return voice_client
        except Exception as e:
            await interaction.response.send_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}", ephemeral=True)
            return None

    async def play_music(self, interaction: discord.Interaction, query: str):
        """–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –º—É–∑—ã–∫–∏"""
        voice_client = await self.connect_to_voice_channel(interaction)
        if not voice_client:
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è)
        queue = self.get_queue(interaction.guild.id)
        queue.append({
            'title': query,
            'requester': interaction.user
        })
        
        embed = Design.create_embed("üéµ –ú—É–∑—ã–∫–∞", 
                                  f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å: **{query}**\n"
                                  f"–ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: {len(queue)}\n\n"
                                  f"‚ö†Ô∏è *–î–ª—è —Ä–∞–±–æ—Ç—ã –º—É–∑—ã–∫–∏ –Ω—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏*", "music")
        await interaction.response.send_message(embed=embed)

    async def stop_music(self, guild_id: int):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º—É–∑—ã–∫–∏"""
        if guild_id in self.voice_clients:
            voice_client = self.voice_clients[guild_id]
            if voice_client.is_playing():
                voice_client.stop()
            
            self.queues[guild_id] = []
            
            await voice_client.disconnect()
            del self.voice_clients[guild_id]

    def get_queue_embed(self, guild_id: int):
        queue = self.get_queue(guild_id)
        if not queue:
            return Design.create_embed("üéµ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞", "–î–æ–±–∞–≤—å—Ç–µ —Ç—Ä–µ–∫–∏ —Å –ø–æ–º–æ—â—å—é /play", "music")
        
        embed = Design.create_embed("üéµ –û—á–µ—Ä–µ–¥—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è", f"–¢—Ä–µ–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: {len(queue)}", "music")
        for i, track in enumerate(queue[:5], 1):
            embed.add_field(name=f"{i}. {track['title']}", value=f"–ó–∞–ø—Ä–æ—Å–∏–ª: {track['requester'].display_name}", inline=False)
        return embed

# üèóÔ∏è –ì–õ–ê–í–ù–´–ô –ë–û–¢
class MegaBot(commands.Bot):
    def __init__(self):
        intents = discord.Intents.all()
        super().__init__(command_prefix='!', intents=intents, help_command=None)
        
        self.db = Database()
        self.economy = EconomySystem(self.db)
        self.shop = ShopSystem(self.db)
        self.casino = CasinoSystem(self.db)
        self.moderation = ModerationSystem()
        self.music = MusicPlayer()
        self.start_time = datetime.now()
    
    async def setup_hook(self):
        await self.db.init_db()
        
        try:
            synced = await self.tree.sync()
            print(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(synced)} –∫–æ–º–∞–Ω–¥")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")

    async def weekly_reset_task(self):
        await self.wait_until_ready()
        while not self.is_closed():
            now = datetime.now()
            next_monday = now + timedelta(days=(7 - now.weekday()))
            next_reset = datetime(next_monday.year, next_monday.month, next_monday.day, 0, 0, 0)
            wait_seconds = (next_reset - now).total_seconds()
            await asyncio.sleep(wait_seconds)
            await self.economy.reset_weekly_xp()
            print("‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –æ–ø—ã—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω")

bot = MegaBot()

# üí∞ –≠–ö–û–ù–û–ú–ò–ö–ê –ö–û–ú–ê–ù–î–´
@bot.tree.command(name="–±–∞–ª–∞–Ω—Å", description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å")
async def –±–∞–ª–∞–Ω—Å(interaction: discord.Interaction, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: Optional[discord.Member] = None):
    user = –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å or interaction.user
    balance = await bot.economy.get_balance(user.id)
    embed = Design.create_embed("üí∞ –ë–∞–ª–∞–Ω—Å", f"**{user.display_name}**\n–ë–∞–ª–∞–Ω—Å: `{balance:,} –º–æ–Ω–µ—Ç`", "economy")
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="–µ–∂–µ–¥–Ω–µ–≤–Ω–æ", description="–ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É")
async def –µ–∂–µ–¥–Ω–µ–≤–Ω–æ(interaction: discord.Interaction):
    user_data = await bot.economy.get_user_data(interaction.user.id)
    
    if user_data["daily_claimed"]:
        last_claim = datetime.fromisoformat(user_data["daily_claimed"])
        if (datetime.now() - last_claim).days < 1:
            embed = Design.create_embed("‚è≥ –£–∂–µ –ø–æ–ª—É—á–∞–ª–∏!", "–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤–æ–π –Ω–∞–≥—Ä–∞–¥–æ–π", "warning")
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return
    
    reward = random.randint(100, 500)
    new_balance = await bot.economy.update_balance(interaction.user.id, reward)
    
    async with aiosqlite.connect(bot.db.db_path) as db:
        await db.execute('UPDATE users SET daily_claimed = ? WHERE user_id = ?', (datetime.now().isoformat(), interaction.user.id))
        await db.commit()
    
    embed = Design.create_embed("üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞", f"**+{reward} –º–æ–Ω–µ—Ç!**\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: `{new_balance:,} –º–æ–Ω–µ—Ç`", "success")
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="—Ä–∞–±–æ—Ç–∞", description="–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–Ω—å–≥–∏")
async def —Ä–∞–±–æ—Ç–∞(interaction: discord.Interaction):
    try:
        user_data = await bot.economy.get_user_data(interaction.user.id)
        
        if user_data["work_cooldown"]:
            last_work = datetime.fromisoformat(user_data["work_cooldown"])
            if (datetime.now() - last_work).seconds < 600:
                embed = Design.create_embed("‚è≥ –û—Ç–¥–æ—Ö–Ω–∏—Ç–µ!", "–ü–æ–¥–æ–∂–¥–∏—Ç–µ 10 –º–∏–Ω—É—Ç", "warning")
                await interaction.response.send_message(embed=embed, ephemeral=True)
                return
        
        earnings = random.randint(50, 200)
        new_balance = await bot.economy.update_balance(interaction.user.id, earnings)
        
        async with aiosqlite.connect(bot.db.db_path) as db:
            await db.execute('UPDATE users SET work_cooldown = ? WHERE user_id = ?', (datetime.now().isoformat(), interaction.user.id))
            await db.commit()
        
        embed = Design.create_embed("üíº –†–∞–±–æ—Ç–∞", f"**–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:** +{earnings} –º–æ–Ω–µ—Ç\n**–ë–∞–ª–∞–Ω—Å:** {new_balance:,} –º–æ–Ω–µ—Ç", "success")
        await interaction.response.send_message(embed=embed)
        
    except Exception as e:
        embed = Design.create_embed("‚ùå –û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É", "danger")
        await interaction.response.send_message(embed=embed, ephemeral=True)

@bot.tree.command(name="–ø–µ—Ä–µ–¥–∞—Ç—å", description="–ü–µ—Ä–µ–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏")
async def –ø–µ—Ä–µ–¥–∞—Ç—å(interaction: discord.Interaction, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: discord.Member, —Å—É–º–º–∞: int):
    if —Å—É–º–º–∞ <= 0:
        await interaction.response.send_message("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!", ephemeral=True)
        return
    
    if –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id == interaction.user.id:
        await interaction.response.send_message("‚ùå –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–¥–∞—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µ!", ephemeral=True)
        return
    
    from_balance = await bot.economy.get_balance(interaction.user.id)
    if from_balance < —Å—É–º–º–∞:
        await interaction.response.send_message("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!", ephemeral=True)
        return
    
    await bot.economy.update_balance(interaction.user.id, -—Å—É–º–º–∞)
    await bot.economy.update_balance(–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id, —Å—É–º–º–∞)
    
    embed = Design.create_embed("‚úÖ –ü–µ—Ä–µ–≤–æ–¥", f"**–û—Ç:** {interaction.user.mention}\n**–ö–æ–º—É:** {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.mention}\n**–°—É–º–º–∞:** {—Å—É–º–º–∞} –º–æ–Ω–µ—Ç", "success")
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="–æ–≥—Ä–∞–±–∏—Ç—å", description="–û–≥—Ä–∞–±–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def –æ–≥—Ä–∞–±–∏—Ç—å(interaction: discord.Interaction, –∂–µ—Ä—Ç–≤–∞: discord.Member):
    if –∂–µ—Ä—Ç–≤–∞.id == interaction.user.id:
        await interaction.response.send_message("‚ùå –ù–µ–ª—å–∑—è –æ–≥—Ä–∞–±–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!", ephemeral=True)
        return
    
    victim_balance = await bot.economy.get_balance(–∂–µ—Ä—Ç–≤–∞.id)
    if victim_balance < 100:
        await interaction.response.send_message("‚ùå –£ –∂–µ—Ä—Ç–≤—ã –º–µ–Ω—å—à–µ 100 –º–æ–Ω–µ—Ç!", ephemeral=True)
        return
    
    if random.random() < 0.4:
        stolen = random.randint(100, min(500, victim_balance))
        await bot.economy.update_balance(–∂–µ—Ä—Ç–≤–∞.id, -stolen)
        await bot.economy.update_balance(interaction.user.id, stolen)
        embed = Design.create_embed("üí∞ –û–≥—Ä–∞–±–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!", f"**–£–∫—Ä–∞–¥–µ–Ω–æ:** {stolen} –º–æ–Ω–µ—Ç", "warning")
    else:
        fine = random.randint(50, 200)
        await bot.economy.update_balance(interaction.user.id, -fine)
        embed = Design.create_embed("üöì –ü–æ–π–º–∞–Ω—ã!", f"**–®—Ç—Ä–∞—Ñ:** {fine} –º–æ–Ω–µ—Ç", "danger")
    
    await interaction.response.send_message(embed=embed)

# üè™ –ú–ê–ì–ê–ó–ò–ù –ö–û–ú–ê–ù–î–´
@bot.tree.command(name="–º–∞–≥–∞–∑–∏–Ω", description="üé™ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–∞–≥–∞–∑–∏–Ω–∞")
async def –º–∞–≥–∞–∑–∏–Ω(interaction: discord.Interaction):
    embed = Design.create_embed("üé™ –ú–ê–ì–ê–ó–ò–ù –ü–ï–•–û–¢–ê –ó–ï–ù–ò–¢–ê", """
**üì¶ –ö–ê–¢–ï–ì–û–†–ò–ò –¢–û–í–ê–†–û–í:**

üéÆ **TDS/TDX** - –ë–∞—à–Ω–∏, –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ
üî¥ **Roblox** - –†–æ–±—É–∫—Å—ã  
ü•ä **Blox Fruits** - –ú–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ñ—Ä—É–∫—Ç—ã
‚ö° **Discord** - –ü—Ä–µ–º–∏—É–º, —Ä–æ–ª–∏

üíº **–ú–æ–∏ –∑–∞–∫–∞–∑—ã** - `/–º–æ–∏_–∑–∞–∫–∞–∑—ã`
üõí **–ö—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä** - `/–∫—É–ø–∏—Ç—å [ID]`

üí¨ **–ü–æ–¥–¥–µ—Ä–∂–∫–∞:** <@691904643181314078>
    """, "shop")
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="–∫–∞—Ç–µ–≥–æ—Ä–∏—è", description="üì¶ –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def –∫–∞—Ç–µ–≥–æ—Ä–∏—è(interaction: discord.Interaction, –Ω–∞–∑–≤–∞–Ω–∏–µ: str):
    category_map = {
        "tds": "üéÆ TDS/TDX",
        "tdx": "üéÆ TDS/TDX", 
        "roblox": "üî¥ Roblox",
        "blox": "ü•ä Blox Fruits",
        "blox fruits": "ü•ä Blox Fruits",
        "discord": "‚ö° Discord"
    }
    
    if –Ω–∞–∑–≤–∞–Ω–∏–µ.lower() in category_map:
        –Ω–∞–∑–≤–∞–Ω–∏–µ = category_map[–Ω–∞–∑–≤–∞–Ω–∏–µ.lower()]
    
    if –Ω–∞–∑–≤–∞–Ω–∏–µ not in bot.shop.categories:
        available_categories = "\n".join([f"‚Ä¢ `{cat}`" for cat in bot.shop.categories.keys()])
        await interaction.response.send_message(
            f"‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!\n\n**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:**\n{available_categories}", 
            ephemeral=True
        )
        return
    
    category = bot.shop.categories[–Ω–∞–∑–≤–∞–Ω–∏–µ]
    embed = Design.create_embed(f"üì¶ {–Ω–∞–∑–≤–∞–Ω–∏–µ}", f"–¢–æ–≤–∞—Ä–æ–≤: {len(category['items'])}", category["color"])
    
    for item_id, item in category["items"].items():
        if item.get("per_unit"):
            price_info = f"üí∞ {item['price']} —Ä—É–±/–µ–¥."
        else:
            price_info = f"üí∞ {item['price']} —Ä—É–±"
        
        embed.add_field(name=f"{item['name']} (ID: {item_id})", value=price_info, inline=False)
    
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="–∫—É–ø–∏—Ç—å", description="üõí –ö—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def –∫—É–ø–∏—Ç—å(interaction: discord.Interaction, id_—Ç–æ–≤–∞—Ä–∞: int, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: int = 1, –¥–µ—Ç–∞–ª–∏: str = ""):
    if id_—Ç–æ–≤–∞—Ä–∞ in [7, 8] and –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ < 100:
        await interaction.response.send_message("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ Robux: 100", ephemeral=True)
        return
    
    result = await bot.shop.create_order(interaction.user.id, id_—Ç–æ–≤–∞—Ä–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –¥–µ—Ç–∞–ª–∏)
    
    if not result["success"]:
        await interaction.response.send_message(f"‚ùå {result['error']}", ephemeral=True)
        return
    
    product = result["product"]
    order_id = result["order_id"]
    total_price = result["total_price"]
    quantity = result["quantity"]
    
    embed = Design.create_embed("üõí –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω!", f"**–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:** `#{order_id}`", "success")
    embed.add_field(name="üì¶ –¢–æ–≤–∞—Ä", value=product["name"], inline=False)
    embed.add_field(name="üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", value=str(quantity), inline=True)
    embed.add_field(name="üí∞ –°—É–º–º–∞", value=f"{total_price:.2f} —Ä—É–±", inline=True)
    
    if –¥–µ—Ç–∞–ª–∏:
        embed.add_field(name="üìù –î–µ—Ç–∞–ª–∏", value=–¥–µ—Ç–∞–ª–∏, inline=False)
    
    embed.add_field(name="üí≥ –û–ø–ª–∞—Ç–∞", value=bot.shop.payment_details, inline=False)
    embed.add_field(name="üì∏ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", value="–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —ç—Ç–æ—Ç —á–∞—Ç", inline=False)
    
    await interaction.response.send_message(embed=embed)
    
    try:
        guild = interaction.guild
        overwrites = {
            guild.default_role: discord.PermissionOverwrite(read_messages=False),
            interaction.user: discord.PermissionOverwrite(read_messages=True, send_messages=True),
            guild.me: discord.PermissionOverwrite(read_messages=True, send_messages=True)
        }
        
        for admin_id in ADMIN_IDS:
            admin = guild.get_member(admin_id)
            if admin:
                overwrites[admin] = discord.PermissionOverwrite(read_messages=True, send_messages=True)
        
        channel = await guild.create_text_channel(
            f'–∑–∞–∫–∞–∑-{order_id}-{interaction.user.display_name}',
            overwrites=overwrites,
            topic=f'–ó–∞–∫–∞–∑ #{order_id} | {product["name"]} | {interaction.user}'
        )
        
        ticket_embed = Design.create_embed(
            f"üé´ –¢–∏–∫–µ—Ç –∑–∞–∫–∞–∑–∞ #{order_id}", 
            f"**–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:** {interaction.user.mention}\n"
            f"**–¢–æ–≤–∞—Ä:** {product['name']}\n"
            f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:** {quantity}\n"
            f"**–°—É–º–º–∞:** {total_price:.2f} —Ä—É–±\n"
            f"**–°—Ç–∞—Ç—É—Å:** –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã", 
            "warning"
        )
        
        if –¥–µ—Ç–∞–ª–∏:
            ticket_embed.add_field(name="üìù –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞", value=–¥–µ—Ç–∞–ª–∏, inline=False)
        
        await channel.send(embed=ticket_embed)
        await channel.send("‚è≥ –û–∂–∏–¥–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã...")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞: {e}")
        await interaction.followup.send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç –∑–∞–∫–∞–∑–∞, –Ω–æ –∑–∞–∫–∞–∑ –∑–∞–ø–∏—Å–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", ephemeral=True)

@bot.tree.command(name="–º–æ–∏_–∑–∞–∫–∞–∑—ã", description="üìã –ò—Å—Ç–æ—Ä–∏—è –º–æ–∏—Ö –∑–∞–∫–∞–∑–æ–≤")
async def –º–æ–∏_–∑–∞–∫–∞–∑—ã(interaction: discord.Interaction):
    orders = await bot.shop.get_user_orders(interaction.user.id)
    
    if not orders:
        embed = Design.create_embed("üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã", "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤", "info")
        await interaction.response.send_message(embed=embed)
        return
    
    embed = Design.create_embed("üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤", f"–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {len(orders)}", "shop")
    
    for order in orders[:5]:
        order_id, product_name, quantity, price, status, order_time = order
        
        status_emoji = {
            "–æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã": "‚è≥",
            "–æ–ø–ª–∞—á–µ–Ω": "‚úÖ", 
            "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ": "üîÑ",
            "–≤—ã–ø–æ–ª–Ω–µ–Ω": "üéâ",
            "–æ—Ç–º–µ–Ω–µ–Ω": "‚ùå"
        }.get(status, "‚ùì")
        
        order_date = datetime.fromisoformat(order_time).strftime("%d.%m.%Y %H:%M")
        
        embed.add_field(
            name=f"{status_emoji} –ó–∞–∫–∞–∑ #{order_id}",
            value=f"**{product_name}**\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n–°—É–º–º–∞: {price:.2f} —Ä—É–±\n–°—Ç–∞—Ç—É—Å: {status}\n–î–∞—Ç–∞: {order_date}",
            inline=False
        )
    
    await interaction.response.send_message(embed=embed)

# üé∞ –ö–ê–ó–ò–ù–û –ö–û–ú–ê–ù–î–´
@bot.tree.command(name="—Å–ª–æ—Ç—ã", description="–ò–≥—Ä–∞—Ç—å –≤ —Å–ª–æ—Ç—ã")
async def —Å–ª–æ—Ç—ã(interaction: discord.Interaction, —Å—Ç–∞–≤–∫–∞: int):
    result = await bot.casino.play_slots(interaction.user.id, —Å—Ç–∞–≤–∫–∞)
    
    if not result["success"]:
        await interaction.response.send_message(f"‚ùå {result['error']}", ephemeral=True)
        return
    
    symbols = " | ".join(result["result"])
    
    if result["multiplier"] > 0:
        embed = Design.create_embed("üé∞ –í—ã–∏–≥—Ä—ã—à!", f"**{symbols}**\n–í—ã–∏–≥—Ä—ã—à: {result['win_amount']} –º–æ–Ω–µ—Ç", "success")
    else:
        embed = Design.create_embed("üé∞ –ü—Ä–æ–∏–≥—Ä—ã—à", f"**{symbols}**\n–ü–æ—Ç–µ—Ä—è–Ω–æ: {—Å—Ç–∞–≤–∫–∞} –º–æ–Ω–µ—Ç", "danger")
    
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="–º–æ–Ω–µ—Ç–∫–∞", description="–ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É")
async def –º–æ–Ω–µ—Ç–∫–∞(interaction: discord.Interaction, —Å—Ç–∞–≤–∫–∞: int, –≤—ã–±–æ—Ä: str):
    if –≤—ã–±–æ—Ä not in ["–æ—Ä—ë–ª", "—Ä–µ—à–∫–∞"]:
        await interaction.response.send_message("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ '–æ—Ä—ë–ª' –∏–ª–∏ '—Ä–µ—à–∫–∞'!", ephemeral=True)
        return
    
    balance = await bot.economy.get_balance(interaction.user.id)
    if balance < —Å—Ç–∞–≤–∫–∞:
        await interaction.response.send_message("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!", ephemeral=True)
        return
    
    outcome = random.choice(["–æ—Ä—ë–ª", "—Ä–µ—à–∫–∞"])
    won = outcome == –≤—ã–±–æ—Ä
    
    if won:
        await bot.economy.update_balance(interaction.user.id, —Å—Ç–∞–≤–∫–∞)
        embed = Design.create_embed("ü™ô –ü–æ–±–µ–¥–∞!", f"–í—ã–ø–∞–ª–æ: {outcome}\n–í—ã–∏–≥—Ä—ã—à: {—Å—Ç–∞–≤–∫–∞} –º–æ–Ω–µ—Ç", "success")
    else:
        await bot.economy.update_balance(interaction.user.id, -—Å—Ç–∞–≤–∫–∞)
        embed = Design.create_embed("ü™ô –ü—Ä–æ–∏–≥—Ä—ã—à", f"–í—ã–ø–∞–ª–æ: {outcome}\n–ü–æ—Ç–µ—Ä—è–Ω–æ: {—Å—Ç–∞–≤–∫–∞} –º–æ–Ω–µ—Ç", "danger")
    
    await interaction.response.send_message(embed=embed)

# üèÜ –£–†–û–í–ù–ò –ö–û–ú–ê–ù–î–´
@bot.tree.command(name="—É—Ä–æ–≤–µ–Ω—å", description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å")
async def —É—Ä–æ–≤–µ–Ω—å(interaction: discord.Interaction, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: Optional[discord.Member] = None):
    user = –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å or interaction.user
    user_data = await bot.economy.get_user_data(user.id)
    
    level = user_data["level"]
    xp = user_data["xp"]
    xp_needed = level * 100
    
    embed = Design.create_embed("üèÜ –£—Ä–æ–≤–µ–Ω—å", 
                              f"**{user.display_name}**\n"
                              f"–£—Ä–æ–≤–µ–Ω—å: {level}\n"
                              f"–û–ø—ã—Ç: {xp}/{xp_needed}", "primary")
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="—Ç–æ–ø", description="–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤")
async def —Ç–æ–ø(interaction: discord.Interaction, —Ç–∏–ø: str = "—É—Ä–æ–≤–µ–Ω—å"):
    async with aiosqlite.connect(bot.db.db_path) as db:
        if —Ç–∏–ø == "—É—Ä–æ–≤–µ–Ω—å":
            cursor = await db.execute('SELECT user_id, level, xp FROM users ORDER BY level DESC, xp DESC LIMIT 10')
            title = "üèÜ –¢–æ–ø –ø–æ —É—Ä–æ–≤–Ω—è–º"
        else:
            cursor = await db.execute('SELECT user_id, balance FROM users ORDER BY balance DESC LIMIT 10')
            title = "üí∞ –¢–æ–ø –ø–æ –¥–µ–Ω—å–≥–∞–º"
        
        top_data = await cursor.fetchall()
    
    embed = Design.create_embed(title, "")
    for i, row in enumerate(top_data, 1):
        user_id = row[0]
        value = row[1] if len(row) == 2 else f"–£—Ä. {row[1]} (XP: {row[2]})"
        
        try:
            user = await bot.fetch_user(user_id)
            name = user.display_name
        except:
            name = f"User {user_id}"
        
        medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."
        embed.add_field(name=f"{medal} {name}", value=str(value), inline=False)
    
    await interaction.response.send_message(embed=embed)

# üõ°Ô∏è –ú–û–î–ï–†–ê–¶–ò–Ø –ö–û–ú–ê–ù–î–´ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï
def parse_time(time_str: str) -> int:
    """–ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏ (1—Å, 1–º, 1—á, 1–¥, 1–Ω)"""
    time_units = {
        '—Å': 1, '—Å–µ–∫': 1, '—Å–µ–∫—É–Ω–¥': 1,
        '–º': 60, '–º–∏–Ω': 60, '–º–∏–Ω—É—Ç': 60, 
        '—á': 3600, '—á–∞—Å': 3600, '—á–∞—Å–æ–≤': 3600,
        '–¥': 86400, '–¥–µ–Ω—å': 86400, '–¥–Ω–µ–π': 86400,
        '–Ω': 604800, '–Ω–µ–¥–µ–ª—è': 604800, '–Ω–µ–¥–µ–ª—å': 604800
    }
    
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    time_str = time_str.lower().replace(' ', '')
    
    # –ò—â–µ–º —á–∏—Å–ª–æ –∏ –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è
    num_str = ''
    unit_str = ''
    
    for char in time_str:
        if char.isdigit():
            num_str += char
        else:
            unit_str += char
    
    if not num_str:
        return 0
    
    number = int(num_str)
    unit = unit_str.lower()
    
    if unit in time_units:
        return number * time_units[unit]
    else:
        return 0

@bot.tree.command(name="–≤–∞—Ä–Ω", description="–í—ã–¥–∞—Ç—å –≤–∞—Ä–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (3 –≤–∞—Ä–Ω–∞ = –º—É—Ç –Ω–∞ 1 —á–∞—Å)")
@commands.has_permissions(manage_messages=True)
async def –≤–∞—Ä–Ω(interaction: discord.Interaction, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: discord.Member, –ø—Ä–∏—á–∏–Ω–∞: str = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"):
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ –≤–∞—Ä–Ω–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id not in user_warns:
        user_warns[–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id] = 0
    
    user_warns[–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id] += 1
    current_warns = user_warns[–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id]
    
    if current_warns >= 3:
        # 3 –≤–∞—Ä–Ω–∞ = –º—É—Ç –Ω–∞ 1 —á–∞—Å
        try:
            mute_role = discord.utils.get(interaction.guild.roles, name="Muted")
            if not mute_role:
                mute_role = await interaction.guild.create_role(name="Muted")
                
                for channel in interaction.guild.channels:
                    await channel.set_permissions(mute_role, send_messages=False, speak=False)
            
            await –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.add_roles(mute_role)
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–∞—Ä–Ω—ã
            user_warns[–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id] = 0
            
            embed = Design.create_embed("‚ö†Ô∏è –ú–£–¢ –∑–∞ 3 –≤–∞—Ä–Ω–∞", 
                                      f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.mention}\n"
                                      f"**–ü—Ä–∏—á–∏–Ω–∞:** –ü–æ–ª—É—á–µ–Ω–æ 3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è\n"
                                      f"**–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** 1 —á–∞—Å\n"
                                      f"**–ü–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ:** {–ø—Ä–∏—á–∏–Ω–∞}", "danger")
            await interaction.response.send_message(embed=embed)
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–Ω—è—Ç–∏–µ –º—É—Ç–∞ —á–µ—Ä–µ–∑ 1 —á–∞—Å
            await asyncio.sleep(3600)
            if mute_role in –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.roles:
                await –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.remove_roles(mute_role)
                embed = Design.create_embed("‚úÖ –ú—É—Ç —Å–Ω—è—Ç", f"–ú—É—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.mention} —Å–Ω—è—Ç", "success")
                await interaction.channel.send(embed=embed)
            
        except Exception as e:
            await interaction.response.send_message(f"‚ùå –û—à–∏–±–∫–∞: {e}", ephemeral=True)
    else:
        embed = Design.create_embed("‚ö†Ô∏è –í–∞—Ä–Ω", 
                                  f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.mention}\n"
                                  f"**–ü—Ä–∏—á–∏–Ω–∞:** {–ø—Ä–∏—á–∏–Ω–∞}\n"
                                  f"**–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–Ω–æ–≤:** {current_warns}/3\n"
                                  f"**–°–ª–µ–¥—É—é—â–∏–π –≤–∞—Ä–Ω:** –º—É—Ç –Ω–∞ 1 —á–∞—Å", "warning")
        await interaction.response.send_message(embed=embed)

@bot.tree.command(name="–º—É—Ç", description="–ó–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å, –º, —á, –¥, –Ω)")
@commands.has_permissions(manage_roles=True)
async def –º—É—Ç(interaction: discord.Interaction, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: discord.Member, –≤—Ä–µ–º—è: str, –ø—Ä–∏—á–∏–Ω–∞: str = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"):
    try:
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
        seconds = parse_time(–≤—Ä–µ–º—è)
        
        if seconds <= 0:
            await interaction.response.send_message("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: 1—Å, 5–º, 1—á, 2–¥, 1–Ω", ephemeral=True)
            return
        
        if seconds > 604800:  # –ú–∞–∫—Å–∏–º—É–º 1 –Ω–µ–¥–µ–ª—è
            await interaction.response.send_message("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –º—É—Ç–∞ - 1 –Ω–µ–¥–µ–ª—è", ephemeral=True)
            return
        
        mute_role = discord.utils.get(interaction.guild.roles, name="Muted")
        if not mute_role:
            mute_role = await interaction.guild.create_role(name="Muted")
            
            for channel in interaction.guild.channels:
                await channel.set_permissions(mute_role, send_messages=False, speak=False)
        
        await –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.add_roles(mute_role)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –≤—ã–≤–æ–¥–∞
        time_display = ""
        if seconds >= 604800:
            time_display = f"{seconds // 604800} –Ω–µ–¥–µ–ª—å"
        elif seconds >= 86400:
            time_display = f"{seconds // 86400} –¥–Ω–µ–π"
        elif seconds >= 3600:
            time_display = f"{seconds // 3600} —á–∞—Å–æ–≤"
        elif seconds >= 60:
            time_display = f"{seconds // 60} –º–∏–Ω—É—Ç"
        else:
            time_display = f"{seconds} —Å–µ–∫—É–Ω–¥"
        
        embed = Design.create_embed("‚úÖ –ú—É—Ç", 
                                  f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.mention}\n"
                                  f"**–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {time_display}\n"
                                  f"**–ü—Ä–∏—á–∏–Ω–∞:** {–ø—Ä–∏—á–∏–Ω–∞}", "success")
        await interaction.response.send_message(embed=embed)
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–Ω—è—Ç–∏–µ –º—É—Ç–∞
        await asyncio.sleep(seconds)
        if mute_role in –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.roles:
            await –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.remove_roles(mute_role)
        
    except Exception as e:
        await interaction.response.send_message(f"‚ùå –û—à–∏–±–∫–∞: {e}", ephemeral=True)

@bot.tree.command(name="–±–∞–Ω", description="–ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
@commands.has_permissions(ban_members=True)
async def –±–∞–Ω(interaction: discord.Interaction, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: discord.Member, –ø—Ä–∏—á–∏–Ω–∞: str = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"):
    try:
        await –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.ban(reason=–ø—Ä–∏—á–∏–Ω–∞)
        embed = Design.create_embed("‚úÖ –ë–∞–Ω", f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.mention} –∑–∞–±–∞–Ω–µ–Ω", "success")
        await interaction.response.send_message(embed=embed)
    except Exception as e:
        await interaction.response.send_message(f"‚ùå –û—à–∏–±–∫–∞: {e}", ephemeral=True)

@bot.tree.command(name="–∫–∏–∫", description="–ö–∏–∫–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
@commands.has_permissions(kick_members=True)
async def –∫–∏–∫(interaction: discord.Interaction, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: discord.Member, –ø—Ä–∏—á–∏–Ω–∞: str = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"):
    try:
        await –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.kick(reason=–ø—Ä–∏—á–∏–Ω–∞)
        embed = Design.create_embed("‚úÖ –ö–∏–∫", f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.mention} –∫–∏–∫–Ω—É—Ç", "success")
        await interaction.response.send_message(embed=embed)
    except Exception as e:
        await interaction.response.send_message(f"‚ùå –û—à–∏–±–∫–∞: {e}", ephemeral=True)

@bot.tree.command(name="–æ—á–∏—Å—Ç–∏—Ç—å", description="–û—á–∏—Å—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è")
@commands.has_permissions(manage_messages=True)
async def –æ—á–∏—Å—Ç–∏—Ç—å(interaction: discord.Interaction, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: int):
    try:
        if –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ > 100:
            await interaction.response.send_message("‚ùå –ú–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ 100 —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Ä–∞–∑", ephemeral=True)
            return
            
        deleted = await interaction.channel.purge(limit=–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ + 1)
        embed = Design.create_embed("‚úÖ –û—á–∏—Å—Ç–∫–∞", f"–£–¥–∞–ª–µ–Ω–æ {len(deleted) - 1} —Å–æ–æ–±—â–µ–Ω–∏–π", "success")
        await interaction.response.send_message(embed=embed, delete_after=5)
    except Exception as e:
        await interaction.response.send_message(f"‚ùå –û—à–∏–±–∫–∞: {e}", ephemeral=True)

@bot.tree.command(name="—Ç–∏–∫–µ—Ç", description="–°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç")
async def —Ç–∏–∫–µ—Ç(interaction: discord.Interaction, –ø—Ä–∏—á–∏–Ω–∞: str):
    try:
        channel = await bot.moderation.create_ticket(interaction.user, –ø—Ä–∏—á–∏–Ω–∞)
        embed = Design.create_embed("üé´ –¢–∏–∫–µ—Ç", f"–°–æ–∑–¥–∞–Ω —Ç–∏–∫–µ—Ç: {channel.mention}", "success")
        await interaction.response.send_message(embed=embed, ephemeral=True)
    except Exception as e:
        await interaction.response.send_message(f"‚ùå –û—à–∏–±–∫–∞: {e}", ephemeral=True)

# üéµ –ú–£–ó–´–ö–ê –ö–û–ú–ê–ù–î–´ - –£–ü–†–û–©–ï–ù–ù–´–ï
@bot.tree.command(name="play", description="–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫ –≤ –æ—á–µ—Ä–µ–¥—å (YouTube —Å—Å—ã–ª–∫–∞ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ)")
async def play(interaction: discord.Interaction, –∑–∞–ø—Ä–æ—Å: str):
    await bot.music.play_music(interaction, –∑–∞–ø—Ä–æ—Å)

@bot.tree.command(name="—Å—Ç–æ–ø", description="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º—É–∑—ã–∫—É –∏ –æ—Ç–∫–ª—é—á–∏—Ç—å—Å—è")
async def —Å—Ç–æ–ø(interaction: discord.Interaction):
    try:
        await bot.music.stop_music(interaction.guild.id)
        embed = Design.create_embed("‚èπÔ∏è –ú—É–∑—ã–∫–∞", "–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", "music")
        await interaction.response.send_message(embed=embed)
    except Exception as e:
        await interaction.response.send_message(f"‚ùå –û—à–∏–±–∫–∞: {e}", ephemeral=True)

@bot.tree.command(name="—Å–∫–∏–ø", description="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫")
async def —Å–∫–∏–ø(interaction: discord.Interaction):
    try:
        guild_id = interaction.guild.id
        if guild_id in bot.music.voice_clients:
            voice_client = bot.music.voice_clients[guild_id]
            if voice_client.is_playing():
                voice_client.stop()
                embed = Design.create_embed("‚è≠Ô∏è –ú—É–∑—ã–∫–∞", "–¢—Ä–µ–∫ –ø—Ä–æ–ø—É—â–µ–Ω", "music")
                await interaction.response.send_message(embed=embed)
            else:
                await interaction.response.send_message("‚ùå –°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç", ephemeral=True)
        else:
            await interaction.response.send_message("‚ùå –ë–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É", ephemeral=True)
    except Exception as e:
        await interaction.response.send_message(f"‚ùå –û—à–∏–±–∫–∞: {e}", ephemeral=True)

@bot.tree.command(name="–æ—á–µ—Ä–µ–¥—å", description="–ü–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥—å —Ç—Ä–µ–∫–æ–≤")
async def –æ—á–µ—Ä–µ–¥—å(interaction: discord.Interaction):
    embed = bot.music.get_queue_embed(interaction.guild.id)
    await interaction.response.send_message(embed=embed)

# üîß –£–¢–ò–õ–ò–¢–´ –ö–û–ú–ê–ù–î–´
@bot.tree.command(name="—Å–µ—Ä–≤–µ—Ä", description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ")
async def —Å–µ—Ä–≤–µ—Ä(interaction: discord.Interaction):
    guild = interaction.guild
    embed = Design.create_embed("üè† –°–µ—Ä–≤–µ—Ä", 
                              f"**{guild.name}**\n"
                              f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {guild.member_count}\n"
                              f"–ö–∞–Ω–∞–ª–æ–≤: {len(guild.channels)}\n"
                              f"–°–æ–∑–¥–∞–Ω: {guild.created_at.strftime('%d.%m.%Y')}", "info")
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="—é–∑–µ—Ä", description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
async def —é–∑–µ—Ä(interaction: discord.Interaction, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: Optional[discord.Member] = None):
    user = –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å or interaction.user
    embed = Design.create_embed("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", 
                              f"**{user.display_name}**\n"
                              f"ID: {user.id}\n"
                              f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è: {user.joined_at.strftime('%d.%m.%Y') if user.joined_at else 'N/A'}", "info")
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", description="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞")
async def —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞(interaction: discord.Interaction):
    uptime = datetime.now() - bot.start_time
    hours = uptime.seconds // 3600
    minutes = (uptime.seconds % 3600) // 60
    
    embed = Design.create_embed("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 
                              f"–°–µ—Ä–≤–µ—Ä–æ–≤: {len(bot.guilds)}\n"
                              f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(bot.users)}\n"
                              f"–ê–ø—Ç–∞–π–º: {uptime.days}–¥ {hours}—á {minutes}–º\n"
                              f"–ü–∏–Ω–≥: {round(bot.latency * 1000)}–º—Å", "info")
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="–ø–æ–º–æ—â—å", description="–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º")
async def –ø–æ–º–æ—â—å(interaction: discord.Interaction):
    embed = Design.create_embed("üé™ –ü–û–ú–û–©–¨", """
    **üí∞ –≠–ö–û–ù–û–ú–ò–ö–ê:**
    `/–±–∞–ª–∞–Ω—Å` `/–µ–∂–µ–¥–Ω–µ–≤–Ω–æ` `/—Ä–∞–±–æ—Ç–∞` `/–ø–µ—Ä–µ–¥–∞—Ç—å` `/–æ–≥—Ä–∞–±–∏—Ç—å`

    **üè™ –ú–ê–ì–ê–ó–ò–ù:**
    `/–º–∞–≥–∞–∑–∏–Ω` `/–∫–∞—Ç–µ–≥–æ—Ä–∏—è` `/–∫—É–ø–∏—Ç—å` `/–º–æ–∏_–∑–∞–∫–∞–∑—ã`

    **üé∞ –ö–ê–ó–ò–ù–û:**
    `/—Å–ª–æ—Ç—ã` `/–º–æ–Ω–µ—Ç–∫–∞`

    **üèÜ –£–†–û–í–ù–ò:**
    `/—É—Ä–æ–≤–µ–Ω—å` `/—Ç–æ–ø`

    **üõ°Ô∏è –ú–û–î–ï–†–ê–¶–ò–Ø:**
    `/–º—É—Ç` `/–±–∞–Ω` `/–∫–∏–∫` `/–æ—á–∏—Å—Ç–∏—Ç—å` `/–≤–∞—Ä–Ω` `/—Ç–∏–∫–µ—Ç`

    **üéµ –ú–£–ó–´–ö–ê:**
    `/play` `/—Å—Ç–æ–ø` `/—Å–∫–∏–ø` `/–æ—á–µ—Ä–µ–¥—å`

    **üîß –£–¢–ò–õ–ò–¢–´:**
    `/—Å–µ—Ä–≤–µ—Ä` `/—é–∑–µ—Ä` `/—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞`
    """, "primary")
    await interaction.response.send_message(embed=embed)

# üëë –ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–´
@bot.tree.command(name="–≤—ã–¥–∞—Ç—å", description="üìä [–ê–î–ú–ò–ù] –í—ã–¥–∞—Ç—å –º–æ–Ω–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
@is_admin()
async def –≤—ã–¥–∞—Ç—å(interaction: discord.Interaction, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: discord.Member, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: int):
    if –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ <= 0:
        await interaction.response.send_message("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º!", ephemeral=True)
        return
    
    new_balance = await bot.economy.admin_add_money(–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
    
    embed = Design.create_embed("üí∞ –ê–î–ú–ò–ù: –î–µ–Ω—å–≥–∏ –≤—ã–¥–∞–Ω—ã", 
                              f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.mention}\n"
                              f"**–í—ã–¥–∞–Ω–æ:** {–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:,} –º–æ–Ω–µ—Ç\n"
                              f"**–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:** {new_balance:,} –º–æ–Ω–µ—Ç\n"
                              f"**–í—ã–¥–∞–ª:** {interaction.user.mention}", "success")
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="–∑–∞–±—Ä–∞—Ç—å", description="üìä [–ê–î–ú–ò–ù] –ó–∞–±—Ä–∞—Ç—å –º–æ–Ω–µ—Ç—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
@is_admin()
async def –∑–∞–±—Ä–∞—Ç—å(interaction: discord.Interaction, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: discord.Member, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: int):
    if –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ <= 0:
        await interaction.response.send_message("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º!", ephemeral=True)
        return
    
    current_balance = await bot.economy.get_balance(–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id)
    if –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ > current_balance:
        –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ = current_balance
    
    new_balance = await bot.economy.admin_add_money(–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id, -–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
    
    embed = Design.create_embed("üí∞ –ê–î–ú–ò–ù: –î–µ–Ω—å–≥–∏ –∑–∞–±—Ä–∞–Ω—ã", 
                              f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.mention}\n"
                              f"**–ó–∞–±—Ä–∞–Ω–æ:** {–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:,} –º–æ–Ω–µ—Ç\n"
                              f"**–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:** {new_balance:,} –º–æ–Ω–µ—Ç\n"
                              f"**–ó–∞–±—Ä–∞–ª:** {interaction.user.mention}", "warning")
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", description="üìä [–ê–î–ú–ò–ù] –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
@is_admin()
async def —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å(interaction: discord.Interaction, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: discord.Member, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: int):
    if –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ < 0:
        await interaction.response.send_message("‚ùå –ë–∞–ª–∞–Ω—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º!", ephemeral=True)
        return
    
    new_balance = await bot.economy.admin_set_money(–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
    
    embed = Design.create_embed("üí∞ –ê–î–ú–ò–ù: –ë–∞–ª–∞–Ω—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", 
                              f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.mention}\n"
                              f"**–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:** {new_balance:,} –º–æ–Ω–µ—Ç\n"
                              f"**–£—Å—Ç–∞–Ω–æ–≤–∏–ª:** {interaction.user.mention}", "success")
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="—Å–±—Ä–æ—Å–∏—Ç—å", description="üìä [–ê–î–ú–ò–ù] –°–±—Ä–æ—Å–∏—Ç—å –∫—É–ª–¥–∞—É–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
@is_admin()
async def —Å–±—Ä–æ—Å–∏—Ç—å(interaction: discord.Interaction, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: discord.Member):
    await bot.economy.admin_reset_cooldowns(–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id)
    
    embed = Design.create_embed("‚è∞ –ê–î–ú–ò–ù: –ö—É–ª–¥–∞—É–Ω—ã —Å–±—Ä–æ—à–µ–Ω—ã", 
                              f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.mention}\n"
                              f"**–°–±—Ä–æ—à–µ–Ω—ã:** –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã, —Ä–∞–±–æ—Ç–∞\n"
                              f"**–°–±—Ä–æ—Å–∏–ª:** {interaction.user.mention}", "success")
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="–∞–¥–º–∏–Ω", description="üìä [–ê–î–ú–ò–ù] –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
@is_admin()
async def –∞–¥–º–∏–Ω(interaction: discord.Interaction):
    embed = Design.create_embed("üëë –ü–ê–ù–ï–õ–¨ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê", """
    **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
    
    üí∞ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ–Ω—å–≥–∞–º–∏:**
    `/–≤—ã–¥–∞—Ç—å @user —Å—É–º–º–∞` - –í—ã–¥–∞—Ç—å –º–æ–Ω–µ—Ç—ã
    `/–∑–∞–±—Ä–∞—Ç—å @user —Å—É–º–º–∞` - –ó–∞–±—Ä–∞—Ç—å –º–æ–Ω–µ—Ç—ã  
    `/—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å @user —Å—É–º–º–∞` - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å
    
    ‚è∞ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É–ª–¥–∞—É–Ω–∞–º–∏:**
    `/—Å–±—Ä–æ—Å–∏—Ç—å @user` - –°–±—Ä–æ—Å–∏—Ç—å –∫—É–ª–¥–∞—É–Ω—ã
    
    üìä **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
    `/–±–∞–ª–∞–Ω—Å @user` - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å
    `/—Ç–æ–ø` - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    """, "premium")
    
    await interaction.response.send_message(embed=embed, ephemeral=True)

# üîß –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
@–≤—ã–¥–∞—Ç—å.error
@–∑–∞–±—Ä–∞—Ç—å.error
@—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å.error
@—Å–±—Ä–æ—Å–∏—Ç—å.error
@–∞–¥–º–∏–Ω.error
async def admin_error(interaction: discord.Interaction, error):
    if isinstance(error, commands.CheckFailure):
        await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", ephemeral=True)
    else:
        await interaction.response.send_message(f"‚ùå –û—à–∏–±–∫–∞: {error}", ephemeral=True)

@–º—É—Ç.error
@–±–∞–Ω.error  
@–∫–∏–∫.error
@–æ—á–∏—Å—Ç–∏—Ç—å.error
@–≤–∞—Ä–Ω.error
async def mod_error(interaction: discord.Interaction, error):
    if isinstance(error, commands.MissingPermissions):
        await interaction.response.send_message("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!", ephemeral=True)
    else:
        await interaction.response.send_message(f"‚ùå –û—à–∏–±–∫–∞: {error}", ephemeral=True)

# üîß –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
@bot.event
async def on_ready():
    print(f'‚úÖ –ë–æ—Ç {bot.user} –∑–∞–ø—É—â–µ–Ω!')
    print(f'üåê –°–µ—Ä–≤–µ—Ä–æ–≤: {len(bot.guilds)}')
    
    # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ö–û–ú–ê–ù–î
    try:
        synced = await bot.tree.sync()
        print(f'‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(synced)} –∫–æ–º–∞–Ω–¥')
        
        # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        commands_list = [cmd.name for cmd in bot.tree.get_commands()]
        print(f'üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: {commands_list}')
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}')
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    bot.loop.create_task(bot.weekly_reset_task())

@bot.event
async def on_message(message):
    if message.author.bot:
        return
    
    if isinstance(message.channel, discord.TextChannel):
        async with aiosqlite.connect(bot.db.db_path) as db:
            await db.execute('INSERT OR IGNORE INTO users (user_id) VALUES (?)', (message.author.id,))
            await db.commit()
        
        xp_gain = random.randint(5, 15)
        await bot.economy.add_xp(message.author.id, xp_gain)
    
    await bot.process_commands(message)

# üöÄ –ó–ê–ü–£–°–ö
@bot.tree.command(name="—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å", description="[–ê–î–ú–ò–ù] –ü–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã")
@is_admin()
async def —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å(interaction: discord.Interaction):
    await bot.tree.sync()
    embed = Design.create_embed("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è", "–ö–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!", "success")
    await interaction.response.send_message(embed=embed, ephemeral=True)

if __name__ == "__main__":
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        bot.run(TOKEN)
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

