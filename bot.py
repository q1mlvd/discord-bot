import discord
from discord.ext import commands, tasks
import aiosqlite
import asyncio
from datetime import datetime, timedelta
import os
import random
from typing import Optional
from dotenv import load_dotenv
import yt_dlp

# üîß –ö–û–ù–°–¢–ê–ù–¢–´
ADMIN_IDS = [1195144951546265675, 766767256742526996, 1078693283695448064, 1138140772097597472, 691904643181314078]
MODERATION_ROLES = [1167093102868172911, 1360243534946373672, 993043931342319636, 1338611327022923910, 1338609155203661915, 1365798715930968244, 1188261847850299514]
THREADS_CHANNEL_ID = 1422557295811887175
EVENTS_CHANNEL_ID = 1418738569081786459

# üõ°Ô∏è –î–ê–ù–ù–´–ï –î–õ–Ø –°–ò–°–¢–ï–ú
user_warns = {}
mute_data = {}
user_credits = {}
user_investments = {}
user_insurance = {}
user_lottery_tickets = {}
server_tax_pool = 0
user_mining_farms = {}
crypto_prices = {"BITCOIN": 50000, "ETHEREUM": 3000, "DOGECOIN": 0.15}
active_events = {}
user_reports = {}
user_crypto = {}
rob_cooldowns = {}

# üîß –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –ü–ï–†–ï–ú–ï–ù–ù–ê–Ø –î–õ–Ø –≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–ò–• –ë–ê–ù–û–í
economic_bans = {}

# üîß –§–£–ù–ö–¶–ò–ò –ü–†–û–í–ï–†–ö–ò –ü–†–ê–í
def is_admin():
    async def predicate(interaction: discord.Interaction):
        return interaction.user.id in ADMIN_IDS
    return commands.check(predicate)

def is_moderator():
    async def predicate(interaction: discord.Interaction):
        user_roles = [role.id for role in interaction.user.roles]
        return any(role_id in MODERATION_ROLES for role_id in user_roles)
    return commands.check(predicate)

# üîí –§–£–ù–ö–¶–ò–Ø –ü–†–û–í–ï–†–ö–ò –≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–û–ì–û –ë–ê–ù–ê
def check_economic_ban():
    async def predicate(interaction: discord.Interaction):
        ban_key = f"economic_ban_{interaction.user.id}"
        if ban_key in economic_bans:
            ban_info = economic_bans[ban_key]
            if datetime.now() < ban_info['end_time']:
                time_left = ban_info['end_time'] - datetime.now()
                hours_left = int(time_left.total_seconds() // 3600)
                await interaction.response.send_message(
                    f"üö´ –í–∞—à–∞ —ç–∫–æ–Ω–æ–º–∏–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É –∫—Ä–µ–¥–∏—Ç–∞!\n"
                    f"‚è≥ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —á–µ—Ä–µ–∑: {hours_left} —á–∞—Å–æ–≤\n"
                    f"üìã –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã: /—Ä–∞–±–æ—Ç–∞, /–µ–∂–µ–¥–Ω–µ–≤–Ω–æ, /–ø–µ—Ä–µ–¥–∞—Ç—å, /–æ–≥—Ä–∞–±–∏—Ç—å, /—Å–ª–æ—Ç—ã",
                    ephemeral=True
                )
                return False
            else:
                del economic_bans[ban_key]
        return True
    return commands.check(predicate)

load_dotenv()
TOKEN = os.getenv('DISCORD_BOT_TOKEN')

if not TOKEN:
    print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞–π .env —Ñ–∞–π–ª —Å DISCORD_BOT_TOKEN")
    exit(1)

# üé® –î–ò–ó–ê–ô–ù
class Design:
    COLORS = {
        "primary": 0x5865F2, "success": 0x57F287, "warning": 0xFEE75C, 
        "danger": 0xED4245, "economy": 0xF1C40F, "music": 0x9B59B6,
        "moderation": 0xE74C3C, "shop": 0x9B59B6, "casino": 0xE67E22,
        "info": 0x3498DB, "premium": 0xFFD700, "roblox": 0xE74C3C,
        "discord": 0x5865F2, "tds": 0xF1C40F, "crypto": 0x16C60C,
        "event": 0x9B59B6, "credit": 0xE74C3C
    }

    @staticmethod
    def create_embed(title: str, description: str = "", color: str = "primary"):
        return discord.Embed(title=title, description=description, color=Design.COLORS.get(color, Design.COLORS["primary"]))

# üíæ –ë–ê–ó–ê –î–ê–ù–ù–´–•
class Database:
    def __init__(self):
        self.db_path = "data/bot.db"
        os.makedirs("data", exist_ok=True)
    
    async def init_db(self):
        async with aiosqlite.connect(self.db_path) as db:
            await db.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    balance INTEGER DEFAULT 1000,
                    level INTEGER DEFAULT 1,
                    xp INTEGER DEFAULT 0,
                    daily_claimed TEXT,
                    work_cooldown TEXT
                )
            ''')
            await db.execute('''
                CREATE TABLE IF NOT EXISTS inventory (
                    user_id INTEGER,
                    item_id INTEGER,
                    quantity INTEGER DEFAULT 1,
                    PRIMARY KEY (user_id, item_id)
                )
            ''')
            await db.execute('DROP TABLE IF EXISTS orders')
            await db.execute('''
                CREATE TABLE orders (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    category TEXT,
                    product_name TEXT,
                    quantity INTEGER,
                    price REAL,
                    details TEXT,
                    status TEXT DEFAULT '–æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã',
                    order_time TEXT,
                    admin_id INTEGER,
                    completion_time TEXT,
                    payment_screenshot TEXT
                )
            ''')
            
            # –ù–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã
            await db.execute('''
                CREATE TABLE IF NOT EXISTS user_credits (
                    user_id INTEGER,
                    company TEXT,
                    amount INTEGER,
                    interest_rate INTEGER,
                    due_date TEXT,
                    PRIMARY KEY (user_id)
                )
            ''')
            
            await db.execute('''
                CREATE TABLE IF NOT EXISTS mining_farms (
                    user_id INTEGER,
                    level INTEGER DEFAULT 1,
                    last_collected TEXT,
                    created_at TEXT,
                    PRIMARY KEY (user_id)
                )
            ''')
            
            await db.commit()
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

# üí∞ –≠–ö–û–ù–û–ú–ò–ö–ê
class EconomySystem:
    def __init__(self, db: Database):
        self.db = db

    async def get_balance(self, user_id: int):
        async with aiosqlite.connect(self.db.db_path) as db:
            async with db.execute('SELECT balance FROM users WHERE user_id = ?', (user_id,)) as cursor:
                result = await cursor.fetchone()
                if result:
                    return result[0]
                else:
                    await db.execute('INSERT INTO users (user_id) VALUES (?)', (user_id,))
                    await db.commit()
                    return 1000
    
    async def update_balance(self, user_id: int, amount: int):
        async with aiosqlite.connect(self.db.db_path) as db:
            await db.execute('INSERT OR IGNORE INTO users (user_id) VALUES (?)', (user_id,))
            await db.execute('UPDATE users SET balance = balance + ? WHERE user_id = ?', (amount, user_id))
            await db.commit()
            return await self.get_balance(user_id)
    
    async def get_user_data(self, user_id: int):
        async with aiosqlite.connect(self.db.db_path) as db:
            async with db.execute('SELECT balance, level, xp, daily_claimed, work_cooldown FROM users WHERE user_id = ?', (user_id,)) as cursor:
                result = await cursor.fetchone()
                if result:
                    return {
                        "balance": result[0], "level": result[1], "xp": result[2],
                        "daily_claimed": result[3], "work_cooldown": result[4]
                    }
                else:
                    await db.execute('INSERT INTO users (user_id) VALUES (?)', (user_id,))
                    await db.commit()
                    return {"balance": 1000, "level": 1, "xp": 0, "daily_claimed": None, "work_cooldown": None}

    async def admin_add_money(self, user_id: int, amount: int):
        async with aiosqlite.connect(self.db.db_path) as db:
            await db.execute('INSERT OR IGNORE INTO users (user_id) VALUES (?)', (user_id,))
            await db.execute('UPDATE users SET balance = balance + ? WHERE user_id = ?', (amount, user_id))
            await db.commit()
            return await self.get_balance(user_id)

# üè¶ –°–ò–°–¢–ï–ú–ê –ö–†–ï–î–ò–¢–û–í
class CreditSystem:
    def __init__(self, economy: EconomySystem):
        self.economy = economy
        self.companies = {
            "fast_money": {
                "name": "üöÄ –ë—ã—Å—Ç—Ä—ã–µ –î–µ–Ω—å–≥–∏",
                "min_amount": 1000,
                "max_amount": 5000,
                "interest_rate": 15,
                "term_days": 3,
                "penalty": "–ë–∞–Ω —ç–∫–æ–Ω–æ–º–∏–∫–∏ –Ω–∞ 2 –¥–Ω—è"
            },
            "reliable_credit": {
                "name": "üõ°Ô∏è –ù–∞–¥–µ–∂–Ω—ã–π –ö—Ä–µ–¥–∏—Ç",
                "min_amount": 5000,
                "max_amount": 15000,
                "interest_rate": 8,
                "term_days": 7,
                "penalty": "-50% —Ä–µ–ø—É—Ç–∞—Ü–∏–∏"
            },
            "premium_finance": {
                "name": "üíé –ü—Ä–µ–º–∏—É–º –§–∏–Ω–∞–Ω—Å",
                "min_amount": 15000,
                "max_amount": 30000,
                "interest_rate": 5,
                "term_days": 14,
                "penalty": "-100% —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ + –±–∞–Ω —ç–∫–æ–Ω–æ–º–∏–∫–∏"
            }
        }
    
    async def take_credit(self, user_id: int, company: str, amount: int):
        if user_id in user_credits:
            return False, "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫—Ä–µ–¥–∏—Ç"
        
        company_data = self.companies.get(company)
        if not company_data:
            return False, "–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        if amount < company_data["min_amount"] or amount > company_data["max_amount"]:
            return False, f"–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç {company_data['min_amount']} –¥–æ {company_data['max_amount']}"
        
        due_date = datetime.now() + timedelta(days=company_data["term_days"])
        user_credits[user_id] = {
            "company": company,
            "amount": amount,
            "interest_rate": company_data["interest_rate"],
            "due_date": due_date,
            "original_amount": amount
        }
        
        await self.economy.update_balance(user_id, amount)
        return True, f"–ö—Ä–µ–¥–∏—Ç –æ–¥–æ–±—Ä–µ–Ω! –í–µ—Ä–Ω—É—Ç—å –¥–æ {due_date.strftime('%d.%m.%Y')}"

    async def repay_credit(self, user_id: int):
        if user_id not in user_credits:
            return False, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤"
        
        credit = user_credits[user_id]
        total_to_repay = credit["amount"]
        
        balance = await self.economy.get_balance(user_id)
        if balance < total_to_repay:
            return False, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù—É–∂–Ω–æ: {total_to_repay} –º–æ–Ω–µ—Ç"
        
        await self.economy.update_balance(user_id, -total_to_repay)
        del user_credits[user_id]
        return True, f"–ö—Ä–µ–¥–∏—Ç –ø–æ–≥–∞—à–µ–Ω! –°—É–º–º–∞: {total_to_repay} –º–æ–Ω–µ—Ç"

# üéÅ –°–ò–°–¢–ï–ú–ê –õ–£–¢–ë–û–ö–°–û–í
class LootboxSystem:
    def __init__(self, economy: EconomySystem):
        self.economy = economy
        self.lootboxes = {
            "common": {
                "name": "üì¶ –û–±—ã—á–Ω—ã–π –ª—É—Ç–±–æ–∫—Å",
                "price": 500,
                "rewards": [
                    {"type": "money", "min": 50, "max": 200, "chance": 100},
                    {"type": "money", "min": 100, "max": 300, "chance": 20},
                    {"type": "nothing", "chance": 40},
                    {"type": "crypto", "min": 0.001, "max": 0.003, "chance": 10}
                ]
            },
            "rare": {
                "name": "üéÅ –†–µ–¥–∫–∏–π –ª—É—Ç–±–æ–∫—Å", 
                "price": 1500,
                "rewards": [
                    {"type": "money", "min": 200, "max": 500, "chance": 100},
                    {"type": "money", "min": 300, "max": 700, "chance": 25},
                    {"type": "nothing", "chance": 35},
                    {"type": "crypto", "min": 0.003, "max": 0.008, "chance": 15},
                    {"type": "money", "min": 1000, "max": 2000, "chance": 8}
                ]
            }
        }
    
    async def open_lootbox(self, user_id: int, lootbox_type: str):
        lootbox = self.lootboxes.get(lootbox_type)
        if not lootbox:
            return False, None
        
        balance = await self.economy.get_balance(user_id)
        if balance < lootbox["price"]:
            return False, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤"
        
        await self.economy.update_balance(user_id, -lootbox["price"])
        
        rewards = []
        for reward in lootbox["rewards"]:
            if random.randint(1, 100) <= reward["chance"]:
                if reward["type"] == "money":
                    amount = random.randint(reward["min"], reward["max"])
                    await self.economy.update_balance(user_id, amount)
                    rewards.append(f"üí∞ {amount} –º–æ–Ω–µ—Ç")
                elif reward["type"] == "nothing":
                    rewards.append("üí® –ü—É—Å—Ç–æ—Ç–∞...")
                elif reward["type"] == "crypto":
                    crypto_type = random.choice(list(crypto_prices.keys()))
                    amount = random.uniform(reward["min"], reward["max"])
                    if user_id not in user_crypto:
                        user_crypto[user_id] = {}
                    user_crypto[user_id][crypto_type] = user_crypto[user_id].get(crypto_type, 0) + amount
                    rewards.append(f"‚Çø {amount:.4f} {crypto_type}")
        
        if not rewards:
            rewards.append("üíî –ù–µ –ø–æ–≤–µ–∑–ª–æ... –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!")
        
        return True, rewards

# üîß –°–ò–°–¢–ï–ú–ê –ú–ê–ô–ù–ò–ù–ì–ê
class MiningSystem:
    def __init__(self, economy: EconomySystem):
        self.economy = economy
        self.farm_levels = {
            1: {"income": 10, "upgrade_cost": 1000},
            2: {"income": 25, "upgrade_cost": 5000},
            3: {"income": 50, "upgrade_cost": 15000}
        }
    
    async def collect_income(self, user_id: int):
        try:
            if user_id not in user_mining_farms:
                return False, "–£ –≤–∞—Å –Ω–µ—Ç —Ñ–µ—Ä–º—ã"
            
            farm = user_mining_farms[user_id]
            
            if farm.get("last_collected"):
                try:
                    last_collect = datetime.fromisoformat(farm["last_collected"])
                    time_passed = datetime.now() - last_collect
                    if time_passed.total_seconds() < 21600:
                        hours_left = 5 - int(time_passed.total_seconds() // 3600)
                        minutes_left = 59 - int((time_passed.total_seconds() % 3600) // 60)
                        return False, f"–î–æ—Ö–æ–¥ –º–æ–∂–Ω–æ —Å–æ–±–∏—Ä–∞—Ç—å —Ä–∞–∑ –≤ 6 —á–∞—Å–æ–≤! –û—Å—Ç–∞–ª–æ—Å—å: {hours_left}—á {minutes_left}–º"
                except ValueError:
                    farm["last_collected"] = None
            
            income = self.farm_levels[farm["level"]]["income"]
            await self.economy.update_balance(user_id, income)
            
            user_mining_farms[user_id]["last_collected"] = datetime.now().isoformat()
            
            return True, f"‚úÖ –°–æ–±—Ä–∞–Ω–æ {income} –º–æ–Ω–µ—Ç —Å —Ñ–µ—Ä–º—ã! –°–ª–µ–¥—É—é—â–∏–π —Å–±–æ—Ä —á–µ—Ä–µ–∑ 6 —á–∞—Å–æ–≤"
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–æ—Ö–æ–¥–∞: {e}")
            return False, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–æ—Ö–æ–¥–∞"

# üé™ –°–ò–°–¢–ï–ú–ê –ò–í–ï–ù–¢–û–í
class EventSystem:
    def __init__(self, economy: EconomySystem):
        self.economy = economy
        self.event_types = {
            "money_rain": {
                "name": "üí∞ –î–µ–Ω–µ–∂–Ω—ã–π –¥–æ–∂–¥—å", 
                "duration": 300, 
                "multiplier": 2,
                "description": "–í–°–ï –¥–µ–Ω–µ–∂–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–Ω–æ—Å—è—Ç –≤ 2 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ –º–æ–Ω–µ—Ç!"
            }
        }
    
    async def start_event(self, event_type: str, bot_instance):
        event = self.event_types.get(event_type)
        if not event:
            return False
        
        active_events[event_type] = {
            "start_time": datetime.now(),
            "end_time": datetime.now() + timedelta(seconds=event["duration"]),
            "data": event
        }
        
        try:
            channel = bot_instance.get_channel(EVENTS_CHANNEL_ID)
            if channel:
                embed = Design.create_embed(
                    "üéâ –ù–ê–ß–ê–õ–°–Ø –ò–í–ï–ù–¢!",
                    f"**{event['name']}**\n\n"
                    f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {event['description']}\n"
                    f"‚è∞ **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {event['duration'] // 60} –º–∏–Ω—É—Ç",
                    "event"
                )
                await channel.send(embed=embed)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–≤–µ–Ω—Ç–∞: {e}")
        
        return True

# üé∞ –ö–ê–ó–ò–ù–û
class CasinoSystem:
    def __init__(self, economy: EconomySystem):
        self.economy = economy
    
    async def play_slots(self, user_id: int, bet: int):
        if bet < 0:
            return {"success": False, "error": "–°—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π!"}
        
        balance = await self.economy.get_balance(user_id)
        if balance < bet:
            return {"success": False, "error": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!"}
        
        symbols = ["üçí", "üçã", "üçä", "üçá", "üîî", "üíé", "7Ô∏è‚É£"]
        result = [random.choice(symbols) for _ in range(3)]
        
        await self.economy.update_balance(user_id, -bet)
        
        if result[0] == result[1] == result[2]:
            multiplier = 10
        elif result[0] == result[1] or result[1] == result[2]:
            multiplier = 3
        else:
            multiplier = 0
        
        win_amount = bet * multiplier
        if win_amount > 0:
            await self.economy.update_balance(user_id, win_amount)
        
        return {
            "success": True,
            "result": result,
            "multiplier": multiplier,
            "win_amount": win_amount
        }

# üèóÔ∏è –ì–õ–ê–í–ù–´–ô –ë–û–¢
class MegaBot(commands.Bot):
    def __init__(self):
        intents = discord.Intents.all()
        super().__init__(command_prefix='!', intents=intents, help_command=None)
        
        self.db = Database()
        self.economy = EconomySystem(self.db)
        self.casino = CasinoSystem(self.economy)
        
        self.credit_system = CreditSystem(self.economy)
        self.lootbox_system = LootboxSystem(self.economy)
        self.mining_system = MiningSystem(self.economy)
        self.event_system = EventSystem(self.economy)
        
        self.start_time = datetime.now()
    
    async def setup_hook(self):
        await self.db.init_db()
        try:
            synced = await self.tree.sync()
            print(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(synced)} –∫–æ–º–∞–Ω–¥")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")

    async def reload_bot(self):
        try:
            synced = await self.tree.sync()
            print(f"‚ôªÔ∏è –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω! –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(synced)} –∫–æ–º–∞–Ω–¥")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            return False

bot = MegaBot()

# üîß –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
def parse_time(time_str: str) -> int:
    time_units = {
        '—Å': 1, '—Å–µ–∫': 1, '—Å–µ–∫—É–Ω–¥': 1,
        '–º': 60, '–º–∏–Ω': 60, '–º–∏–Ω—É—Ç': 60, 
        '—á': 3600, '—á–∞—Å': 3600, '—á–∞—Å–æ–≤': 3600,
        '–¥': 86400, '–¥–µ–Ω—å': 86400, '–¥–Ω–µ–π': 86400
    }
    
    time_str = time_str.lower().replace(' ', '')
    num_str = ''
    unit_str = ''
    
    for char in time_str:
        if char.isdigit():
            num_str += char
        else:
            unit_str += char
    
    if not num_str:
        return 0
    
    number = int(num_str)
    unit = unit_str.lower()
    
    if unit in time_units:
        return number * time_units[unit]
    else:
        return 0

# üí∞ –ö–û–ú–ê–ù–î–´ –î–õ–Ø –í–°–ï–• –£–ß–ê–°–¢–ù–ò–ö–û–í
@bot.tree.command(name="–±–∞–ª–∞–Ω—Å", description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å")
async def –±–∞–ª–∞–Ω—Å(interaction: discord.Interaction, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: Optional[discord.Member] = None):
    user = –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å or interaction.user
    balance = await bot.economy.get_balance(user.id)
    embed = Design.create_embed("üí∞ –ë–∞–ª–∞–Ω—Å", f"**{user.display_name}**\n–ë–∞–ª–∞–Ω—Å: `{balance:,} –º–æ–Ω–µ—Ç`", "economy")
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="–µ–∂–µ–¥–Ω–µ–≤–Ω–æ", description="–ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É")
@check_economic_ban()
async def –µ–∂–µ–¥–Ω–µ–≤–Ω–æ(interaction: discord.Interaction):
    user_data = await bot.economy.get_user_data(interaction.user.id)
    
    if user_data["daily_claimed"]:
        last_claim = datetime.fromisoformat(user_data["daily_claimed"])
        if (datetime.now() - last_claim).days < 1:
            embed = Design.create_embed("‚è≥ –£–∂–µ –ø–æ–ª—É—á–∞–ª–∏!", "–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞", "warning")
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return
    
    reward = random.randint(100, 500)
    new_balance = await bot.economy.update_balance(interaction.user.id, reward)
    
    async with aiosqlite.connect(bot.db.db_path) as db:
        await db.execute('UPDATE users SET daily_claimed = ? WHERE user_id = ?', (datetime.now().isoformat(), interaction.user.id))
        await db.commit()
    
    embed = Design.create_embed("üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞", f"**+{reward} –º–æ–Ω–µ—Ç!**\n–ë–∞–ª–∞–Ω—Å: `{new_balance:,} –º–æ–Ω–µ—Ç`", "success")
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="—Ä–∞–±–æ—Ç–∞", description="–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–Ω—å–≥–∏")
@check_economic_ban()
async def —Ä–∞–±–æ—Ç–∞(interaction: discord.Interaction):
    try:
        user_data = await bot.economy.get_user_data(interaction.user.id)
        
        if user_data["work_cooldown"]:
            last_work = datetime.fromisoformat(user_data["work_cooldown"])
            if (datetime.now() - last_work).seconds < 600:
                embed = Design.create_embed("‚è≥ –û—Ç–¥–æ—Ö–Ω–∏—Ç–µ!", "–ü–æ–¥–æ–∂–¥–∏—Ç–µ 10 –º–∏–Ω—É—Ç", "warning")
                await interaction.response.send_message(embed=embed, ephemeral=True)
                return
        
        earnings = random.randint(50, 200)
        new_balance = await bot.economy.update_balance(interaction.user.id, earnings)
        
        async with aiosqlite.connect(bot.db.db_path) as db:
            await db.execute('UPDATE users SET work_cooldown = ? WHERE user_id = ?', (datetime.now().isoformat(), interaction.user.id))
            await db.commit()
        
        embed = Design.create_embed("üíº –†–∞–±–æ—Ç–∞", f"**–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:** +{earnings} –º–æ–Ω–µ—Ç\n**–ë–∞–ª–∞–Ω—Å:** {new_balance:,} –º–æ–Ω–µ—Ç", "success")
        await interaction.response.send_message(embed=embed)
        
    except Exception as e:
        embed = Design.create_embed("‚ùå –û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É", "danger")
        await interaction.response.send_message(embed=embed, ephemeral=True)

@bot.tree.command(name="–ø–µ—Ä–µ–¥–∞—Ç—å", description="–ü–µ—Ä–µ–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏")
@check_economic_ban()
async def –ø–µ—Ä–µ–¥–∞—Ç—å(interaction: discord.Interaction, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: discord.Member, —Å—É–º–º–∞: int):
    if —Å—É–º–º–∞ <= 0:
        await interaction.response.send_message("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!", ephemeral=True)
        return
    
    if –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id == interaction.user.id:
        await interaction.response.send_message("‚ùå –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–¥–∞—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µ!", ephemeral=True)
        return
    
    from_balance = await bot.economy.get_balance(interaction.user.id)
    if from_balance < —Å—É–º–º–∞:
        await interaction.response.send_message("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!", ephemeral=True)
        return
    
    tax = —Å—É–º–º–∞ * 0.05
    net_amount = —Å—É–º–º–∞ - tax
    global server_tax_pool
    server_tax_pool += tax
    
    await bot.economy.update_balance(interaction.user.id, -—Å—É–º–º–∞)
    await bot.economy.update_balance(–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id, net_amount)
    
    embed = Design.create_embed("‚úÖ –ü–µ—Ä–µ–≤–æ–¥", 
                              f"**–û—Ç:** {interaction.user.mention}\n"
                              f"**–ö–æ–º—É:** {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.mention}\n"
                              f"**–°—É–º–º–∞:** {—Å—É–º–º–∞} –º–æ–Ω–µ—Ç\n"
                              f"**–ù–∞–ª–æ–≥ (5%):** {tax} –º–æ–Ω–µ—Ç\n"
                              f"**–ü–æ–ª—É—á–µ–Ω–æ:** {net_amount} –º–æ–Ω–µ—Ç", "success")
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="–æ–≥—Ä–∞–±–∏—Ç—å", description="–û–≥—Ä–∞–±–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ö–î: 30 –º–∏–Ω—É—Ç)")
@check_economic_ban()
async def –æ–≥—Ä–∞–±–∏—Ç—å(interaction: discord.Interaction, –∂–µ—Ä—Ç–≤–∞: discord.Member):
    user_id = interaction.user.id
    current_time = datetime.now()
    
    if user_id in rob_cooldowns:
        time_passed = current_time - rob_cooldowns[user_id]
        if time_passed.total_seconds() < 1800:
            minutes_left = 30 - int(time_passed.total_seconds() // 60)
            embed = Design.create_embed("‚è≥ –ö—É–ª–¥–∞—É–Ω", 
                                      f"–ü–æ–¥–æ–∂–¥–∏ –µ—â–µ {minutes_left} –º–∏–Ω—É—Ç!", 
                                      "warning")
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return
    
    if –∂–µ—Ä—Ç–≤–∞.id == interaction.user.id:
        await interaction.response.send_message("‚ùå –ù–µ–ª—å–∑—è –æ–≥—Ä–∞–±–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!", ephemeral=True)
        return
    
    victim_balance = await bot.economy.get_balance(–∂–µ—Ä—Ç–≤–∞.id)
    if victim_balance < 100:
        await interaction.response.send_message("‚ùå –£ –∂–µ—Ä—Ç–≤—ã –º–µ–Ω—å—à–µ 100 –º–æ–Ω–µ—Ç!", ephemeral=True)
        return
    
    if random.random() < 0.4:
        stolen = random.randint(100, min(500, victim_balance))
        await bot.economy.update_balance(–∂–µ—Ä—Ç–≤–∞.id, -stolen)
        await bot.economy.update_balance(interaction.user.id, stolen)
        
        rob_cooldowns[user_id] = current_time
        
        embed = Design.create_embed("üí∞ –û–≥—Ä–∞–±–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!", 
                                  f"**–£–∫—Ä–∞–¥–µ–Ω–æ:** {stolen} –º–æ–Ω–µ—Ç\n"
                                  f"**–°–ª–µ–¥—É—é—â–µ–µ –æ–≥—Ä–∞–±–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑:** 30 –º–∏–Ω—É—Ç", 
                                  "warning")
    else:
        fine = random.randint(50, 200)
        await bot.economy.update_balance(interaction.user.id, -fine)
        rob_cooldowns[user_id] = current_time
        
        embed = Design.create_embed("üöì –ü–æ–π–º–∞–Ω—ã!", 
                                  f"**–®—Ç—Ä–∞—Ñ:** {fine} –º–æ–Ω–µ—Ç\n"
                                  f"**–°–ª–µ–¥—É—é—â–µ–µ –æ–≥—Ä–∞–±–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑:** 30 –º–∏–Ω—É—Ç", 
                                  "danger")
    
    await interaction.response.send_message(embed=embed)

# üé∞ –ö–û–ú–ê–ù–î–´ –ö–ê–ó–ò–ù–û
@bot.tree.command(name="—Å–ª–æ—Ç—ã", description="–ò–≥—Ä–∞—Ç—å –≤ —Å–ª–æ—Ç—ã")
@check_economic_ban()
async def —Å–ª–æ—Ç—ã(interaction: discord.Interaction, —Å—Ç–∞–≤–∫–∞: int = 0):
    if —Å—Ç–∞–≤–∫–∞ < 0:
        await interaction.response.send_message("‚ùå –°—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π!", ephemeral=True)
        return
    
    result = await bot.casino.play_slots(interaction.user.id, —Å—Ç–∞–≤–∫–∞)
    
    if not result["success"]:
        await interaction.response.send_message(f"‚ùå {result['error']}", ephemeral=True)
        return
    
    symbols = " | ".join(result["result"])
    
    if result["multiplier"] > 0:
        embed = Design.create_embed("üé∞ –í—ã–∏–≥—Ä—ã—à!", 
                                  f"**{symbols}**\n"
                                  f"–°—Ç–∞–≤–∫–∞: {—Å—Ç–∞–≤–∫–∞} –º–æ–Ω–µ—Ç\n"
                                  f"–ú–Ω–æ–∂–∏—Ç–µ–ª—å: x{result['multiplier']}\n"
                                  f"–í—ã–∏–≥—Ä—ã—à: {result['win_amount']} –º–æ–Ω–µ—Ç", "success")
    else:
        embed = Design.create_embed("üé∞ –ü—Ä–æ–∏–≥—Ä—ã—à", 
                                  f"**{symbols}**\n"
                                  f"–ü–æ—Ç–µ—Ä—è–Ω–æ: {—Å—Ç–∞–≤–∫–∞} –º–æ–Ω–µ—Ç", "danger")
    
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="–º–æ–Ω–µ—Ç–∫–∞", description="–ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É")
@check_economic_ban()
async def –º–æ–Ω–µ—Ç–∫–∞(interaction: discord.Interaction, —Å—Ç–∞–≤–∫–∞: int = 0, –≤—ã–±–æ—Ä: str = "–æ—Ä—ë–ª"):
    if —Å—Ç–∞–≤–∫–∞ < 0:
        await interaction.response.send_message("‚ùå –°—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π!", ephemeral=True)
        return
    
    if –≤—ã–±–æ—Ä not in ["–æ—Ä—ë–ª", "—Ä–µ—à–∫–∞"]:
        await interaction.response.send_message("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ '–æ—Ä—ë–ª' –∏–ª–∏ '—Ä–µ—à–∫–∞'!", ephemeral=True)
        return
    
    balance = await bot.economy.get_balance(interaction.user.id)
    if balance < —Å—Ç–∞–≤–∫–∞:
        await interaction.response.send_message("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!", ephemeral=True)
        return
    
    outcome = random.choice(["–æ—Ä—ë–ª", "—Ä–µ—à–∫–∞"])
    won = outcome == –≤—ã–±–æ—Ä
    
    if won:
        await bot.economy.update_balance(interaction.user.id, —Å—Ç–∞–≤–∫–∞)
        embed = Design.create_embed("ü™ô –ü–æ–±–µ–¥–∞!", 
                                  f"–í—ã–ø–∞–ª–æ: {outcome}\n"
                                  f"–í–∞—à –≤—ã–±–æ—Ä: {–≤—ã–±–æ—Ä}\n"
                                  f"–í—ã–∏–≥—Ä—ã—à: {—Å—Ç–∞–≤–∫–∞} –º–æ–Ω–µ—Ç", "success")
    else:
        await bot.economy.update_balance(interaction.user.id, -—Å—Ç–∞–≤–∫–∞)
        embed = Design.create_embed("ü™ô –ü—Ä–æ–∏–≥—Ä—ã—à", 
                                  f"–í—ã–ø–∞–ª–æ: {outcome}\n"
                                  f"–í–∞—à –≤—ã–±–æ—Ä: {–≤—ã–±–æ—Ä}\n"
                                  f"–ü–æ—Ç–µ—Ä—è–Ω–æ: {—Å—Ç–∞–≤–∫–∞} –º–æ–Ω–µ—Ç", "danger")
    
    await interaction.response.send_message(embed=embed)

# üõ°Ô∏è –ö–û–ú–ê–ù–î–´ –ú–û–î–ï–†–ê–¶–ò–ò
@bot.tree.command(name="–ø—Ä–µ–¥", description="–í—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ")
@is_moderator()
async def –ø—Ä–µ–¥(interaction: discord.Interaction, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: discord.Member, –ø—Ä–∏—á–∏–Ω–∞: str = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"):
    try:
        target_roles = [role.id for role in –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.roles]
        if any(role_id in MODERATION_ROLES for role_id in target_roles) or –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id in ADMIN_IDS:
            await interaction.response.send_message("‚ùå –ù–µ–ª—å–∑—è –≤—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!", ephemeral=True)
            return
        
        if –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id not in user_warns:
            user_warns[–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id] = 0
        
        user_warns[–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id] += 1
        current_warns = user_warns[–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id]
        
        embed = Design.create_embed("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", 
                                  f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.mention}\n"
                                  f"**–ü—Ä–∏—á–∏–Ω–∞:** {–ø—Ä–∏—á–∏–Ω–∞}\n"
                                  f"**–¢–µ–∫—É—â–∏–µ –ø—Ä–µ–¥:** {current_warns}/3", "warning")
        await interaction.response.send_message(embed=embed)
            
    except Exception as e:
        await interaction.response.send_message(f"‚ùå –û—à–∏–±–∫–∞: {e}", ephemeral=True)

@bot.tree.command(name="—Å–Ω—è—Ç—å_–ø—Ä–µ–¥", description="–°–Ω—è—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ")
@is_moderator()
async def —Å–Ω—è—Ç—å_–ø—Ä–µ–¥(interaction: discord.Interaction, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: discord.Member, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: int = 1):
    try:
        target_roles = [role.id for role in –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.roles]
        if any(role_id in MODERATION_ROLES for role_id in target_roles) or –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id in ADMIN_IDS:
            await interaction.response.send_message("‚ùå –ù–µ–ª—å–∑—è —Å–Ω—è—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", ephemeral=True)
            return
        
        if –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id not in user_warns or user_warns[–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id] <= 0:
            await interaction.response.send_message("‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π!", ephemeral=True)
            return
        
        if –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ <= 0:
            await interaction.response.send_message("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º!", ephemeral=True)
            return
        
        current_warns = user_warns[–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id]
        new_warns = max(0, current_warns - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
        user_warns[–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id] = new_warns
        
        embed = Design.create_embed("‚úÖ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Å–Ω—è—Ç–æ", 
                                  f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.mention}\n"
                                  f"**–°–Ω—è—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π:** {min(–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, current_warns)}\n"
                                  f"**–¢–µ–∫—É—â–∏–µ –ø—Ä–µ–¥:** {new_warns}/3", "success")
        await interaction.response.send_message(embed=embed)
        
    except Exception as e:
        await interaction.response.send_message(f"‚ùå –û—à–∏–±–∫–∞: {e}", ephemeral=True)

# üè¶ –ö–û–ú–ê–ù–î–´ –ö–†–ï–î–ò–¢–û–í
@bot.tree.command(name="–∫—Ä–µ–¥–∏—Ç", description="–í–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç")
async def –∫—Ä–µ–¥–∏—Ç(interaction: discord.Interaction):
    embed = Design.create_embed("üè¶ –ö–†–ï–î–ò–¢–´", "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –≤–∑—è—Ç–∏—è –∫—Ä–µ–¥–∏—Ç–∞:", "credit")
    
    for company_id, company in bot.credit_system.companies.items():
        embed.add_field(
            name=f"{company['name']}",
            value=f"–°—É–º–º–∞: {company['min_amount']:,}-{company['max_amount']:,} –º–æ–Ω–µ—Ç\n"
                  f"–ü—Ä–æ—Ü–µ–Ω—Ç: {company['interest_rate']}%\n"
                  f"–°—Ä–æ–∫: {company['term_days']} –¥–Ω–µ–π",
            inline=False
        )
    
    await interaction.response.send_message(embed=embed, ephemeral=True)

@bot.tree.command(name="–≤–µ—Ä–Ω—É—Ç—å_–∫—Ä–µ–¥–∏—Ç", description="–í–µ—Ä–Ω—É—Ç—å –∫—Ä–µ–¥–∏—Ç")
async def –≤–µ—Ä–Ω—É—Ç—å_–∫—Ä–µ–¥–∏—Ç(interaction: discord.Interaction):
    try:
        success, message = await bot.credit_system.repay_credit(interaction.user.id)
        
        if success:
            embed = Design.create_embed("‚úÖ –ö—Ä–µ–¥–∏—Ç –ø–æ–≥–∞—à–µ–Ω!", message, "success")
        else:
            embed = Design.create_embed("‚ùå –û—à–∏–±–∫–∞", message, "danger")
        
        await interaction.response.send_message(embed=embed, ephemeral=True)
    except Exception as e:
        embed = Design.create_embed("‚ùå –û—à–∏–±–∫–∞", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫—Ä–µ–¥–∏—Ç–∞", "danger")
        await interaction.response.send_message(embed=embed, ephemeral=True)

@bot.tree.command(name="–º–æ–π_–∫—Ä–µ–¥–∏—Ç", description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—Ä–µ–¥–∏—Ç–µ")
async def –º–æ–π_–∫—Ä–µ–¥–∏—Ç(interaction: discord.Interaction):
    user_id = interaction.user.id
    if user_id not in user_credits:
        await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤", ephemeral=True)
        return
    
    credit = user_credits[user_id]
    company = bot.credit_system.companies[credit["company"]]
    days_left = (credit["due_date"] - datetime.now()).days
    
    embed = Design.create_embed("üè¶ –ú–æ–π –∫—Ä–µ–¥–∏—Ç", 
                              f"**–ö–æ–º–ø–∞–Ω–∏—è:** {company['name']}\n"
                              f"**–°—É–º–º–∞:** {credit['original_amount']:,} –º–æ–Ω–µ—Ç\n"
                              f"**–ü—Ä–æ—Ü–µ–Ω—Ç:** {credit['interest_rate']}%\n"
                              f"**–í–µ—Ä–Ω—É—Ç—å –¥–æ:** {credit['due_date'].strftime('%d.%m.%Y')}\n"
                              f"**–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π:** {max(0, days_left)}", "credit")
    
    await interaction.response.send_message(embed=embed, ephemeral=True)

# üéÅ –ö–û–ú–ê–ù–î–´ –õ–£–¢–ë–û–ö–°–û–í
@bot.tree.command(name="–ª—É—Ç–±–æ–∫—Å—ã", description="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª—É—Ç–±–æ–∫—Å—ã")
async def –ª—É—Ç–±–æ–∫—Å—ã(interaction: discord.Interaction):
    embed = Design.create_embed("üéÅ –õ–£–¢–ë–û–ö–°–´", "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ª—É—Ç–±–æ–∫—Å—ã:", "premium")
    
    for lootbox_id, lootbox in bot.lootbox_system.lootboxes.items():
        rewards_text = ""
        for reward in lootbox["rewards"]:
            if reward["type"] == "money":
                rewards_text += f"üí∞ –î–µ–Ω—å–≥–∏: {reward['min']}-{reward['max']} –º–æ–Ω–µ—Ç ({reward['chance']}%)\n"
            elif reward["type"] == "crypto":
                rewards_text += f"‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ ({reward['chance']}%)\n"
            elif reward["type"] == "nothing":
                rewards_text += f"üí® –ü—É—Å—Ç–æ—Ç–∞ ({reward['chance']}%)\n"
        
        embed.add_field(
            name=f"{lootbox['name']} - {lootbox['price']} –º–æ–Ω–µ—Ç",
            value=rewards_text,
            inline=False
        )
    
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="–æ—Ç–∫—Ä—ã—Ç—å_–ª—É—Ç–±–æ–∫—Å", description="–û—Ç–∫—Ä—ã—Ç—å –ª—É—Ç–±–æ–∫—Å")
async def –æ—Ç–∫—Ä—ã—Ç—å_–ª—É—Ç–±–æ–∫—Å(interaction: discord.Interaction, —Ç–∏–ø: str):
    lootbox_aliases = {
        "–æ–±—ã—á–Ω—ã–π": "common", "common": "common",
        "—Ä–µ–¥–∫–∏–π": "rare", "rare": "rare"
    }
    
    lootbox_type = lootbox_aliases.get(—Ç–∏–ø.lower())
    
    success, result = await bot.lootbox_system.open_lootbox(interaction.user.id, lootbox_type)
    
    if not success:
        await interaction.response.send_message("‚ùå –õ—É—Ç–±–æ–∫—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!", ephemeral=True)
        return
    
    lootbox = bot.lootbox_system.lootboxes[lootbox_type]
    embed = Design.create_embed(f"üéÅ –û—Ç–∫—Ä—ã—Ç {lootbox['name']}!", "", "success")
    
    for reward in result:
        embed.add_field(name="üéâ –ù–∞–≥—Ä–∞–¥–∞", value=reward, inline=False)
    
    await interaction.response.send_message(embed=embed)

# ‚õèÔ∏è –ö–û–ú–ê–ù–î–´ –ú–ê–ô–ù–ò–ù–ì–ê
@bot.tree.command(name="—Ñ–µ—Ä–º–∞", description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–µ—Ä–º–µ")
async def —Ñ–µ—Ä–º–∞(interaction: discord.Interaction):
    user_id = interaction.user.id
    
    if user_id not in user_mining_farms:
        embed = Design.create_embed("‚õèÔ∏è –ú–∞–π–Ω–∏–Ω–≥ —Ñ–µ—Ä–º–∞", 
                                  "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Ñ–µ—Ä–º—ã!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/—Å–æ–∑–¥–∞—Ç—å_—Ñ–µ—Ä–º—É` —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –º–∞–π–Ω–∏—Ç—å", "info")
    else:
        farm = user_mining_farms[user_id]
        level_data = bot.mining_system.farm_levels[farm["level"]]
        
        can_collect = True
        time_left = "‚úÖ –ú–æ–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å"
        
        if "last_collected" in farm and farm["last_collected"]:
            last_collect = datetime.fromisoformat(farm["last_collected"])
            time_passed = datetime.now() - last_collect
            if time_passed.total_seconds() < 21600:
                can_collect = False
                hours_left = 5 - int(time_passed.total_seconds() // 3600)
                minutes_left = 59 - int((time_passed.total_seconds() % 3600) // 60)
                time_left = f"‚è≥ –ß–µ—Ä–µ–∑ {hours_left}—á {minutes_left}–º"
        
        embed = Design.create_embed("‚õèÔ∏è –í–∞—à–∞ —Ñ–µ—Ä–º–∞", 
                                  f"**–£—Ä–æ–≤–µ–Ω—å:** {farm['level']}\n"
                                  f"**–î–æ—Ö–æ–¥:** {level_data['income']} –º–æ–Ω–µ—Ç/6—á\n"
                                  f"**–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å:** {level_data['upgrade_cost']} –º–æ–Ω–µ—Ç\n"
                                  f"**–°—Ç–∞—Ç—É—Å:** {time_left}", "info")
    
    await interaction.response.send_message(embed=embed, ephemeral=True)

@bot.tree.command(name="—Å–æ–∑–¥–∞—Ç—å_—Ñ–µ—Ä–º—É", description="–°–æ–∑–¥–∞—Ç—å —Ñ–µ—Ä–º—É")
async def —Å–æ–∑–¥–∞—Ç—å_—Ñ–µ—Ä–º—É(interaction: discord.Interaction):
    user_id = interaction.user.id
    
    if user_id in user_mining_farms:
        await interaction.response.send_message("‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ñ–µ—Ä–º–∞!", ephemeral=True)
        return
    
    creation_cost = 500
    balance = await bot.economy.get_balance(user_id)
    
    if balance < creation_cost:
        await interaction.response.send_message(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ù—É–∂–Ω–æ {creation_cost} –º–æ–Ω–µ—Ç", ephemeral=True)
        return
    
    await bot.economy.update_balance(user_id, -creation_cost)
    user_mining_farms[user_id] = {
        "level": 1, 
        "last_collected": None,
        "created_at": datetime.now().isoformat()
    }
    
    embed = Design.create_embed("‚úÖ –§–µ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∞!", 
                              f"–í–∞—à–∞ –º–∞–π–Ω–∏–Ω–≥ —Ñ–µ—Ä–º–∞ —É—Ä–æ–≤–Ω—è 1 –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!\n"
                              f"–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è: {creation_cost} –º–æ–Ω–µ—Ç", "success")
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="—Å–æ–±—Ä–∞—Ç—å_–¥–æ—Ö–æ–¥", description="–°–æ–±—Ä–∞—Ç—å –¥–æ—Ö–æ–¥ —Å —Ñ–µ—Ä–º—ã")
async def —Å–æ–±—Ä–∞—Ç—å_–¥–æ—Ö–æ–¥(interaction: discord.Interaction):
    await interaction.response.defer(ephemeral=True)
    
    try:
        success, message = await bot.mining_system.collect_income(interaction.user.id)
        
        if success:
            embed = Design.create_embed("üí∞ –î–æ—Ö–æ–¥ —Å–æ–±—Ä–∞–Ω!", message, "success")
        else:
            embed = Design.create_embed("‚ùå –û—à–∏–±–∫–∞", message, "danger")
        
        await interaction.followup.send(embed=embed, ephemeral=True)
        
    except Exception as e:
        embed = Design.create_embed("‚ùå –û—à–∏–±–∫–∞", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–æ—Ö–æ–¥–∞", "danger")
        await interaction.followup.send(embed=embed, ephemeral=True)

@bot.tree.command(name="—É–ª—É—á—à–∏—Ç—å_—Ñ–µ—Ä–º—É", description="–£–ª—É—á—à–∏—Ç—å —Ñ–µ—Ä–º—É")
async def —É–ª—É—á—à–∏—Ç—å_—Ñ–µ—Ä–º—É(interaction: discord.Interaction):
    user_id = interaction.user.id
    
    if user_id not in user_mining_farms:
        await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Ñ–µ—Ä–º—ã!", ephemeral=True)
        return
    
    farm = user_mining_farms[user_id]
    current_level = farm["level"]
    
    if current_level >= 3:
        await interaction.response.send_message("‚ùå –í–∞—à–∞ —Ñ–µ—Ä–º–∞ —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è!", ephemeral=True)
        return
    
    upgrade_cost = bot.mining_system.farm_levels[current_level]["upgrade_cost"]
    balance = await bot.economy.get_balance(user_id)
    
    if balance < upgrade_cost:
        await interaction.response.send_message(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ù—É–∂–Ω–æ {upgrade_cost} –º–æ–Ω–µ—Ç", ephemeral=True)
        return
    
    await bot.economy.update_balance(user_id, -upgrade_cost)
    user_mining_farms[user_id]["level"] = current_level + 1
    
    embed = Design.create_embed("‚ö° –§–µ—Ä–º–∞ —É–ª—É—á—à–µ–Ω–∞!", 
                              f"–£—Ä–æ–≤–µ–Ω—å —Ñ–µ—Ä–º—ã –ø–æ–≤—ã—à–µ–Ω –¥–æ {current_level + 1}!\n"
                              f"–ù–æ–≤—ã–π –¥–æ—Ö–æ–¥: {bot.mining_system.farm_levels[current_level + 1]['income']} –º–æ–Ω–µ—Ç/6—á", "success")
    await interaction.response.send_message(embed=embed)

# ‚Çø –ö–û–ú–ê–ù–î–´ –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–´
@bot.tree.command(name="–∫—Ä–∏–ø—Ç–∞", description="–ö—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")
async def –∫—Ä–∏–ø—Ç–∞(interaction: discord.Interaction):
    embed = Design.create_embed("‚Çø –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–´", "–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã:", "crypto")
    
    for crypto, price in crypto_prices.items():
        embed.add_field(
            name=crypto,
            value=f"${price:,.2f}",
            inline=True
        )
    
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="–º–æ–π_–∫—Ä–∏–ø—Ç–æ", description="–ú–æ–π –∫—Ä–∏–ø—Ç–æ-–ø–æ—Ä—Ç—Ñ–µ–ª—å")
async def –º–æ–π_–∫—Ä–∏–ø—Ç–æ(interaction: discord.Interaction):
    user_id = interaction.user.id
    
    if user_id not in user_crypto or not user_crypto[user_id]:
        await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã", ephemeral=True)
        return
    
    embed = Design.create_embed("‚Çø –ú–æ–π –∫—Ä–∏–ø—Ç–æ-–ø–æ—Ä—Ç—Ñ–µ–ª—å", "", "crypto")
    total_value = 0
    
    for crypto, amount in user_crypto[user_id].items():
        value = amount * crypto_prices[crypto]
        total_value += value
        embed.add_field(
            name=crypto,
            value=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {amount:.4f}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: ${value:.2f}",
            inline=True
        )
    
    embed.add_field(
        name="üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å",
        value=f"${total_value:.2f}",
        inline=False
    )
    
    await interaction.response.send_message(embed=embed)

# üé™ –ö–û–ú–ê–ù–î–´ –ò–í–ï–ù–¢–û–í
@bot.tree.command(name="–∏–≤–µ–Ω—Ç—ã", description="–ê–∫—Ç–∏–≤–Ω—ã–µ –∏–≤–µ–Ω—Ç—ã")
async def –∏–≤–µ–Ω—Ç—ã(interaction: discord.Interaction):
    if not active_events:
        embed = Design.create_embed("üé™ –ò–≤–µ–Ω—Ç—ã", "–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≤–µ–Ω—Ç–æ–≤", "info")
    else:
        embed = Design.create_embed("üé™ –ê–ö–¢–ò–í–ù–´–ï –ò–í–ï–ù–¢–´", "", "event")
        for event_type, event_data in active_events.items():
            time_left = event_data["end_time"] - datetime.now()
            minutes_left = max(0, int(time_left.total_seconds() // 60))
            
            embed.add_field(
                name=bot.event_system.event_types[event_type]["name"],
                value=f"–û—Å—Ç–∞–ª–æ—Å—å: {minutes_left} –º–∏–Ω—É—Ç\n{bot.event_system.event_types[event_type]['description']}",
                inline=False
            )
    
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="–∑–∞–ø—É—Å—Ç–∏—Ç—å_–∏–≤–µ–Ω—Ç", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–≤–µ–Ω—Ç")
@is_admin()
async def –∑–∞–ø—É—Å—Ç–∏—Ç—å_–∏–≤–µ–Ω—Ç(interaction: discord.Interaction, —Ç–∏–ø: str):
    event_types = {
        "–¥–æ–∂–¥—å": "money_rain"
    }
    
    event_type = event_types.get(—Ç–∏–ø.lower())
    if not event_type:
        await interaction.response.send_message("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∏–≤–µ–Ω—Ç–∞! –î–æ—Å—Ç—É–ø–Ω–æ: `–¥–æ–∂–¥—å`", ephemeral=True)
        return
    
    success = await bot.event_system.start_event(event_type, bot)
    
    if success:
        embed = Design.create_embed("‚úÖ –ò–≤–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω!", f"–ò–≤–µ–Ω—Ç **{bot.event_system.event_types[event_type]['name']}** –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!", "success")
    else:
        embed = Design.create_embed("‚ùå –û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≤–µ–Ω—Ç", "danger")
    
    await interaction.response.send_message(embed=embed, ephemeral=True)

# üëë –ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–´
@bot.tree.command(name="–≤—ã–¥–∞—Ç—å", description="–í—ã–¥–∞—Ç—å –º–æ–Ω–µ—Ç—ã")
@is_admin()
async def –≤—ã–¥–∞—Ç—å(interaction: discord.Interaction, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: discord.Member, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: int):
    if –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ <= 0:
        await interaction.response.send_message("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º!", ephemeral=True)
        return
    
    new_balance = await bot.economy.admin_add_money(–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
    
    embed = Design.create_embed("üí∞ –î–µ–Ω—å–≥–∏ –≤—ã–¥–∞–Ω—ã", 
                              f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.mention}\n"
                              f"**–í—ã–¥–∞–Ω–æ:** {–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:,} –º–æ–Ω–µ—Ç\n"
                              f"**–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:** {new_balance:,} –º–æ–Ω–µ—Ç", "success")
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="—É–¥–∞–ª–∏—Ç—å_–±–¥", description="–£–¥–∞–ª–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
@is_admin()
async def —É–¥–∞–ª–∏—Ç—å_–±–¥(interaction: discord.Interaction):
    import os
    try:
        if os.path.exists("data/bot.db"):
            os.remove("data/bot.db")
            await bot.db.init_db()
            embed = Design.create_embed("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∞", "–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã!", "success")
        else:
            embed = Design.create_embed("‚ÑπÔ∏è –ë–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", "–§–∞–π–ª data/bot.db –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", "info")
    except Exception as e:
        embed = Design.create_embed("‚ùå –û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ë–î: {e}", "danger")
    
    await interaction.response.send_message(embed=embed, ephemeral=True)

@bot.tree.command(name="–∞–¥–º–∏–Ω", description="–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
@is_admin()
async def –∞–¥–º–∏–Ω(interaction: discord.Interaction):
    description = (
        "**–ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–´:**\n\n"
        "**–≠–∫–æ–Ω–æ–º–∏–∫–∞:**\n"
        "`/–≤—ã–¥–∞—Ç—å @user –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ` - –í—ã–¥–∞—Ç—å –º–æ–Ω–µ—Ç—ã\n\n"
        "**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:**\n"
        "`/—É–¥–∞–ª–∏—Ç—å_–±–¥` - –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n"
        "`/–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å` - –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞\n"
        "`/–∑–∞–ø—É—Å—Ç–∏—Ç—å_–∏–≤–µ–Ω—Ç —Ç–∏–ø` - –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–≤–µ–Ω—Ç"
    )
    
    embed = Design.create_embed("–ü–ê–ù–ï–õ–¨ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê", description, "premium")
    await interaction.response.send_message(embed=embed, ephemeral=True)

@bot.tree.command(name="–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å", description="–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞")
@is_admin()
async def –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å(interaction: discord.Interaction):
    await interaction.response.defer(ephemeral=True)
    
    embed = Design.create_embed("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–∞", "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞...", "warning")
    await interaction.followup.send(embed=embed)
    
    success = await bot.reload_bot()
    
    if success:
        embed = Design.create_embed("‚úÖ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω!", "success")
    else:
        embed = Design.create_embed("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ", "danger")
    
    await interaction.followup.send(embed=embed, ephemeral=True)

@bot.event
async def on_ready():
    print(f'‚úÖ –ë–æ—Ç {bot.user} –∑–∞–ø—É—â–µ–Ω!')
    print(f'üåê –°–µ—Ä–≤–µ—Ä–æ–≤: {len(bot.guilds)}')
    
    try:
        synced = await bot.tree.sync()
        print(f'‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(synced)} –∫–æ–º–∞–Ω–¥')
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}')

@bot.event
async def on_message(message):
    if message.author.bot:
        return
    
    if isinstance(message.channel, discord.TextChannel):
        async with aiosqlite.connect(bot.db.db_path) as db:
            await db.execute('INSERT OR IGNORE INTO users (user_id) VALUES (?)', (message.author.id,))
            await db.commit()
    
    await bot.process_commands(message)

if __name__ == "__main__":
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        bot.run(TOKEN)
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
