import discord
from discord.ext import commands, tasks
import aiosqlite
import asyncio
from datetime import datetime, timedelta
import os
import random
import json
import logging
from typing import Optional, Dict, List
from dotenv import load_dotenv
import yt_dlp
import aiohttp
import shutil

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

# üîß –ê–î–ú–ò–ù–´ (—Ç–≤–æ–∏ ID)
ADMIN_IDS = [1195144951546265675, 766767256742526996, 1138140772097597472]

# üõ°Ô∏è –î–õ–Ø –ú–û–î–ï–†–ê–¶–ò–ò
user_warns = {}
mute_data = {}
user_reports = {}
automod_settings = {}
user_achievements = {}
clans_data = {}
marriages = {}
user_properties = {}
crypto_balances = {}
stock_market = {}
event_system = {}
temporary_roles = {}
user_activity = {}
polls_data = {}

def is_admin():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    async def predicate(interaction: discord.Interaction):
        return interaction.user.id in ADMIN_IDS
    return commands.check(predicate)

load_dotenv()
TOKEN = os.getenv('DISCORD_BOT_TOKEN')

if not TOKEN:
    logging.error("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞–π .env —Ñ–∞–π–ª —Å DISCORD_BOT_TOKEN")
    exit(1)

# üé® –î–ò–ó–ê–ô–ù
class Design:
    COLORS = {
        "primary": 0x5865F2, "success": 0x57F287, "warning": 0xFEE75C, 
        "danger": 0xED4245, "economy": 0xF1C40F, "music": 0x9B59B6,
        "moderation": 0xE74C3C, "shop": 0x9B59B6, "casino": 0xE67E22,
        "info": 0x3498DB, "premium": 0xFFD700, "roblox": 0xE74C3C,
        "discord": 0x5865F2, "tds": 0xF1C40F, "crypto": 0x16C60C,
        "event": 0x9B59B6, "clan": 0xE74C3C, "marriage": 0xE91E63
    }

    @staticmethod
    def create_embed(title: str, description: str = "", color: str = "primary"):
        return discord.Embed(title=title, description=description, color=Design.COLORS.get(color, Design.COLORS["primary"]))

# üíæ –ë–ê–ó–ê –î–ê–ù–ù–´–•
class Database:
    def __init__(self):
        self.db_path = "data/bot.db"
        os.makedirs("data", exist_ok=True)
    
    async def init_db(self):
        async with aiosqlite.connect(self.db_path) as db:
            # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            await db.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    balance INTEGER DEFAULT 1000,
                    level INTEGER DEFAULT 1,
                    xp INTEGER DEFAULT 0,
                    daily_claimed TEXT,
                    work_cooldown TEXT
                )
            ''')
            await db.execute('''
                CREATE TABLE IF NOT EXISTS inventory (
                    user_id INTEGER,
                    item_id INTEGER,
                    quantity INTEGER DEFAULT 1,
                    PRIMARY KEY (user_id, item_id)
                )
            ''')
            await db.execute('DROP TABLE IF EXISTS orders')
            await db.execute('''
                CREATE TABLE orders (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    category TEXT,
                    product_name TEXT,
                    quantity INTEGER,
                    price REAL,
                    details TEXT,
                    status TEXT DEFAULT '–æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã',
                    order_time TEXT,
                    admin_id INTEGER,
                    completion_time TEXT,
                    payment_screenshot TEXT
                )
            ''')
            
            # –ù–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
            await db.execute('''
                CREATE TABLE IF NOT EXISTS user_achievements (
                    user_id INTEGER,
                    achievement_id TEXT,
                    achieved_at TEXT,
                    PRIMARY KEY (user_id, achievement_id)
                )
            ''')
            
            await db.execute('''
                CREATE TABLE IF NOT EXISTS clans (
                    clan_id INTEGER PRIMARY KEY AUTOINCREMENT,
                    clan_name TEXT,
                    clan_leader INTEGER,
                    clan_level INTEGER DEFAULT 1,
                    clan_xp INTEGER DEFAULT 0,
                    created_at TEXT
                )
            ''')
            
            await db.execute('''
                CREATE TABLE IF NOT EXISTS clan_members (
                    clan_id INTEGER,
                    user_id INTEGER,
                    role TEXT DEFAULT 'member',
                    joined_at TEXT,
                    PRIMARY KEY (clan_id, user_id)
                )
            ''')
            
            await db.execute('''
                CREATE TABLE IF NOT EXISTS marriages (
                    user1_id INTEGER,
                    user2_id INTEGER,
                    married_at TEXT,
                    divorce_cooldown TEXT,
                    PRIMARY KEY (user1_id, user2_id)
                )
            ''')
            
            await db.execute('''
                CREATE TABLE IF NOT EXISTS user_properties (
                    user_id INTEGER,
                    property_id TEXT,
                    property_name TEXT,
                    property_value INTEGER,
                    purchased_at TEXT,
                    PRIMARY KEY (user_id, property_id)
                )
            ''')
            
            await db.execute('''
                CREATE TABLE IF NOT EXISTS crypto_balances (
                    user_id INTEGER,
                    currency TEXT DEFAULT 'BITCOIN',
                    balance REAL DEFAULT 0,
                    PRIMARY KEY (user_id, currency)
                )
            ''')
            
            await db.execute('''
                CREATE TABLE IF NOT EXISTS activity_logs (
                    user_id INTEGER,
                    action_type TEXT,
                    action_details TEXT,
                    timestamp TEXT
                )
            ''')
            
            await db.execute('''
                CREATE TABLE IF NOT EXISTS moderation_logs (
                    moderator_id INTEGER,
                    target_id INTEGER,
                    action_type TEXT,
                    reason TEXT,
                    duration TEXT,
                    timestamp TEXT
                )
            ''')
            
            await db.commit()
            logging.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

# üîÑ –°–ò–°–¢–ï–ú–ê –ë–≠–ö–ê–ü–û–í
class BackupSystem:
    def __init__(self, db: Database):
        self.db = db
    
    async def create_backup(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        backup_dir = "backups"
        os.makedirs(backup_dir, exist_ok=True)
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_path = f"{backup_dir}/backup_{timestamp}.db"
        
        async with aiosqlite.connect(self.db.db_path) as source:
            async with aiosqlite.connect(backup_path) as target:
                await source.backup(target)
        
        logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø: {backup_path}")
        return backup_path
    
    async def auto_backup(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–æ–≤"""
        while True:
            await asyncio.sleep(86400)  # –ö–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
            await self.create_backup()

# üìä –°–ò–°–¢–ï–ú–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø
class LoggingSystem:
    @staticmethod
    async def log_action(user_id: int, action_type: str, details: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        timestamp = datetime.now().isoformat()
        
        async with aiosqlite.connect("data/bot.db") as db:
            await db.execute(
                'INSERT INTO activity_logs (user_id, action_type, action_details, timestamp) VALUES (?, ?, ?, ?)',
                (user_id, action_type, details, timestamp)
            )
            await db.commit()
        
        logging.info(f"üë§ {user_id} - {action_type}: {details}")
    
    @staticmethod
    async def log_moderation(moderator_id: int, target_id: int, action_type: str, reason: str, duration: str = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        timestamp = datetime.now().isoformat()
        
        async with aiosqlite.connect("data/bot.db") as db:
            await db.execute(
                'INSERT INTO moderation_logs (moderator_id, target_id, action_type, reason, duration, timestamp) VALUES (?, ?, ?, ?, ?, ?)',
                (moderator_id, target_id, action_type, reason, duration, timestamp)
            )
            await db.commit()
        
        logging.info(f"üõ°Ô∏è {moderator_id} -> {target_id} {action_type}: {reason}")

# üõ°Ô∏è –ê–í–¢–û–ú–û–î–ï–†–ê–¶–ò–Ø
class AutoModSystem:
    def __init__(self):
        self.user_message_count = {}
        self.last_message_time = {}
    
    async def check_spam(self, message: discord.Message) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º"""
        user_id = message.author.id
        current_time = datetime.now()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in self.user_message_count:
            self.user_message_count[user_id] = 0
            self.last_message_time[user_id] = current_time
        
        # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 10 —Å–µ–∫—É–Ω–¥
        if (current_time - self.last_message_time[user_id]).seconds > 10:
            self.user_message_count[user_id] = 0
        
        self.user_message_count[user_id] += 1
        self.last_message_time[user_id] = current_time
        
        # –ï—Å–ª–∏ –±–æ–ª—å—à–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ 10 —Å–µ–∫—É–Ω–¥ - —Å–ø–∞–º
        if self.user_message_count[user_id] > 5:
            await message.delete()
            warning_msg = await message.channel.send(
                f"‚ö†Ô∏è {message.author.mention}, –Ω–µ —Å–ø–∞–º—å—Ç–µ!"
            )
            await asyncio.sleep(5)
            await warning_msg.delete()
            return True
        
        return False
    
    async def check_mentions(self, message: discord.Message) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Å—Å–æ–≤—ã—Ö —É–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        if len(message.mentions) > 5:
            await message.delete()
            warning_msg = await message.channel.send(
                f"‚ö†Ô∏è {message.author.mention}, —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π!"
            )
            await asyncio.sleep(5)
            await warning_msg.delete()
            return True
        return False

# üéØ –°–ò–°–¢–ï–ú–ê –†–ï–ü–û–†–¢–û–í
class ReportSystem:
    @staticmethod
    async def create_report(reporter: discord.Member, reported: discord.Member, reason: str, proof: str = None):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∂–∞–ª–æ–±—ã –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        report_id = len(user_reports) + 1
        user_reports[report_id] = {
            'reporter_id': reporter.id,
            'reported_id': reported.id,
            'reason': reason,
            'proof': proof,
            'status': 'open',
            'created_at': datetime.now().isoformat()
        }
        
        return report_id
    
    @staticmethod
    async def get_report_channel(guild: discord.Guild):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –∂–∞–ª–æ–±"""
        channel = discord.utils.get(guild.channels, name="–∂–∞–ª–æ–±—ã")
        if not channel:
            overwrites = {
                guild.default_role: discord.PermissionOverwrite(read_messages=False),
                guild.me: discord.PermissionOverwrite(read_messages=True)
            }
            channel = await guild.create_text_channel("–∂–∞–ª–æ–±—ã", overwrites=overwrites)
        return channel

# üé™ –°–ò–°–¢–ï–ú–ê –ò–í–ï–ù–¢–û–í
class EventSystem:
    def __init__(self, economy):
        self.economy = economy
        self.active_events = {}
    
    async def start_event(self, event_type: str, duration: int, reward: int):
        """–ó–∞–ø—É—Å–∫ –∏–≤–µ–Ω—Ç–∞"""
        event_id = len(self.active_events) + 1
        end_time = datetime.now() + timedelta(hours=duration)
        
        self.active_events[event_id] = {
            'type': event_type,
            'start_time': datetime.now().isoformat(),
            'end_time': end_time.isoformat(),
            'reward': reward,
            'participants': []
        }
        
        return event_id
    
    async def add_participant(self, event_id: int, user_id: int):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–≤–µ–Ω—Ç–∞"""
        if event_id in self.active_events:
            if user_id not in self.active_events[event_id]['participants']:
                self.active_events[event_id]['participants'].append(user_id)
    
    async def finish_event(self, event_id: int):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≤–µ–Ω—Ç–∞ –∏ –≤—ã–¥–∞—á–∞ –Ω–∞–≥—Ä–∞–¥"""
        if event_id in self.active_events:
            event = self.active_events[event_id]
            for user_id in event['participants']:
                await self.economy.update_balance(user_id, event['reward'])
            del self.active_events[event_id]

# üíë –°–ò–°–¢–ï–ú–ê –ë–†–ê–ö–û–í
class MarriageSystem:
    def __init__(self, db: Database):
        self.db = db
    
    async def marry(self, user1_id: int, user2_id: int):
        """–ó–∞–∫–ª—é—á–µ–Ω–∏–µ –±—Ä–∞–∫–∞"""
        async with aiosqlite.connect(self.db.db_path) as db:
            await db.execute(
                'INSERT INTO marriages (user1_id, user2_id, married_at) VALUES (?, ?, ?)',
                (user1_id, user2_id, datetime.now().isoformat())
            )
            await db.commit()
        
        marriages[user1_id] = user2_id
        marriages[user2_id] = user1_id
    
    async def divorce(self, user_id: int):
        """–†–∞–∑–≤–æ–¥"""
        if user_id in marriages:
            partner_id = marriages[user_id]
            
            async with aiosqlite.connect(self.db.db_path) as db:
                await db.execute(
                    'DELETE FROM marriages WHERE user1_id = ? OR user2_id = ?',
                    (user_id, user_id)
                )
                await db.commit()
            
            del marriages[user_id]
            del marriages[partner_id]
            
            return partner_id
        return None

# üèòÔ∏è –°–ò–°–¢–ï–ú–ê –ö–õ–ê–ù–û–í
class ClanSystem:
    def __init__(self, db: Database):
        self.db = db
    
    async def create_clan(self, clan_name: str, leader_id: int):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–Ω–∞"""
        async with aiosqlite.connect(self.db.db_path) as db:
            cursor = await db.execute(
                'INSERT INTO clans (clan_name, clan_leader, created_at) VALUES (?, ?, ?)',
                (clan_name, leader_id, datetime.now().isoformat())
            )
            clan_id = cursor.lastrowid
            
            await db.execute(
                'INSERT INTO clan_members (clan_id, user_id, role, joined_at) VALUES (?, ?, ?, ?)',
                (clan_id, leader_id, 'leader', datetime.now().isoformat())
            )
            await db.commit()
        
        clans_data[clan_id] = {
            'name': clan_name,
            'leader': leader_id,
            'members': [leader_id],
            'level': 1,
            'xp': 0
        }
        
        return clan_id
    
    async def add_member(self, clan_id: int, user_id: int):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –∫–ª–∞–Ω"""
        if clan_id in clans_data:
            clans_data[clan_id]['members'].append(user_id)
            
            async with aiosqlite.connect(self.db.db_path) as db:
                await db.execute(
                    'INSERT INTO clan_members (clan_id, user_id, role, joined_at) VALUES (?, ?, ?, ?)',
                    (clan_id, user_id, 'member', datetime.now().isoformat())
                )
                await db.commit()

# üíé –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–ê
class CryptoSystem:
    def __init__(self, db: Database):
        self.db = db
        self.crypto_prices = {
            'BITCOIN': 50000,
            'ETHEREUM': 3000,
            'DOGECOIN': 0.15
        }
    
    async def get_crypto_balance(self, user_id: int, currency: str = 'BITCOIN'):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"""
        async with aiosqlite.connect(self.db.db_path) as db:
            async with db.execute(
                'SELECT balance FROM crypto_balances WHERE user_id = ? AND currency = ?',
                (user_id, currency)
            ) as cursor:
                result = await cursor.fetchone()
                return result[0] if result else 0
    
    async def update_crypto_balance(self, user_id: int, amount: float, currency: str = 'BITCOIN'):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"""
        async with aiosqlite.connect(self.db.db_path) as db:
            await db.execute('''
                INSERT OR REPLACE INTO crypto_balances (user_id, currency, balance)
                VALUES (?, ?, COALESCE((SELECT balance FROM crypto_balances WHERE user_id = ? AND currency = ?), 0) + ?)
            ''', (user_id, currency, user_id, currency, amount))
            await db.commit()

# üìà –ë–ò–†–ñ–ê –ê–ö–¶–ò–ô
class StockMarket:
    def __init__(self):
        self.stocks = {
            'GOLD': {'price': 100, 'volatility': 5},
            'OIL': {'price': 80, 'volatility': 8},
            'TECH': {'price': 150, 'volatility': 12}
        }
    
    def update_prices(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –∞–∫—Ü–∏–π"""
        for stock in self.stocks.values():
            change = random.uniform(-stock['volatility'], stock['volatility'])
            stock['price'] = max(1, stock['price'] + change)
    
    def get_stock_price(self, symbol: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –∞–∫—Ü–∏–∏"""
        return self.stocks.get(symbol, {}).get('price', 0)

# üè† –°–ò–°–¢–ï–ú–ê –ù–ï–î–í–ò–ñ–ò–ú–û–°–¢–ò
class PropertySystem:
    def __init__(self, db: Database):
        self.db = db
        self.properties = {
            'HOUSE_SMALL': {'name': '–ú–∞–ª–µ–Ω—å–∫–∏–π –¥–æ–º', 'price': 5000, 'income': 50},
            'HOUSE_MEDIUM': {'name': '–°—Ä–µ–¥–Ω–∏–π –¥–æ–º', 'price': 15000, 'income': 150},
            'HOUSE_LARGE': {'name': '–ë–æ–ª—å—à–æ–π –¥–æ–º', 'price': 50000, 'income': 500},
            'CASTLE': {'name': '–ó–∞–º–æ–∫', 'price': 200000, 'income': 2000}
        }
    
    async def buy_property(self, user_id: int, property_id: str):
        """–ü–æ–∫—É–ø–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"""
        if property_id not in self.properties:
            return False
        
        property_data = self.properties[property_id]
        
        async with aiosqlite.connect(self.db.db_path) as db:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å
            async with db.execute(
                'SELECT 1 FROM user_properties WHERE user_id = ? AND property_id = ?',
                (user_id, property_id)
            ) as cursor:
                if await cursor.fetchone():
                    return False
            
            await db.execute(
                'INSERT INTO user_properties (user_id, property_id, property_name, property_value, purchased_at) VALUES (?, ?, ?, ?, ?)',
                (user_id, property_id, property_data['name'], property_data['price'], datetime.now().isoformat())
            )
            await db.commit()
        
        user_properties[user_id] = user_properties.get(user_id, {})
        user_properties[user_id][property_id] = property_data
        
        return True

# üèÜ –°–ò–°–¢–ï–ú–ê –î–û–°–¢–ò–ñ–ï–ù–ò–ô
class AchievementSystem:
    def __init__(self, db: Database):
        self.db = db
        self.achievements = {
            'FIRST_STEPS': {'name': '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏', 'description': '–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –ø–µ—Ä–≤—É—é 1000 –º–æ–Ω–µ—Ç'},
            'RICH': {'name': '–ë–æ–≥–∞—á', 'description': '–ù–∞–∫–æ–ø–∏—Ç—å 10,000 –º–æ–Ω–µ—Ç'},
            'GAMBLER': {'name': '–ê–∑–∞—Ä—Ç–Ω—ã–π –∏–≥—Ä–æ–∫', 'description': '–í—ã–∏–≥—Ä–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ 1000 –º–æ–Ω–µ—Ç'},
            'WORKAHOLIC': {'name': '–¢—Ä—É–¥–æ–≥–æ–ª–∏–∫', 'description': '–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É 50 —Ä–∞–∑'}
        }
    
    async def check_achievements(self, user_id: int, achievement_type: str, progress: int):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã–¥–∞—á–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        pass
    
    async def grant_achievement(self, user_id: int, achievement_id: str):
        """–í—ã–¥–∞—á–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
        if achievement_id in self.achievements:
            async with aiosqlite.connect(self.db.db_path) as db:
                await db.execute(
                    'INSERT OR IGNORE INTO user_achievements (user_id, achievement_id, achieved_at) VALUES (?, ?, ?)',
                    (user_id, achievement_id, datetime.now().isoformat())
                )
                await db.commit()
            
            user_achievements[user_id] = user_achievements.get(user_id, [])
            user_achievements[user_id].append(achievement_id)

# üéÆ –°–ò–°–¢–ï–ú–ê –ú–ò–ù–ò-–ò–ì–†
class MiniGameSystem:
    def __init__(self, economy):
        self.economy = economy
    
    async def start_quiz(self, interaction: discord.Interaction, topic: str):
        """–ó–∞–ø—É—Å–∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
        questions = {
            'general': [
                {'question': '–°—Ç–æ–ª–∏—Ü–∞ –†–æ—Å—Å–∏–∏?', 'answer': '–ú–æ—Å–∫–≤–∞'},
                {'question': '2+2?', 'answer': '4'}
            ],
            'games': [
                {'question': '–°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –∏–≥—Ä–æ–≤–æ–π –¥–≤–∏–∂–æ–∫?', 'answer': 'Unreal Engine'}
            ]
        }
        
        if topic not in questions:
            await interaction.response.send_message("‚ùå –¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", ephemeral=True)
            return
        
        question_data = random.choice(questions[topic])
        return question_data

# üí∞ –≠–ö–û–ù–û–ú–ò–ö–ê (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∞—Å—Å —Å –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è–º–∏)
class EconomySystem:
    def __init__(self, db: Database):
        self.db = db

    async def get_balance(self, user_id: int):
        async with aiosqlite.connect(self.db.db_path) as db:
            async with db.execute('SELECT balance FROM users WHERE user_id = ?', (user_id,)) as cursor:
                result = await cursor.fetchone()
                if result:
                    return result[0]
                else:
                    await db.execute('INSERT INTO users (user_id) VALUES (?)', (user_id,))
                    await db.commit()
                    return 1000
    
    async def update_balance(self, user_id: int, amount: int):
        async with aiosqlite.connect(self.db.db_path) as db:
            await db.execute('INSERT OR IGNORE INTO users (user_id) VALUES (?)', (user_id,))
            await db.execute('UPDATE users SET balance = balance + ? WHERE user_id = ?', (amount, user_id))
            await db.commit()
            return await self.get_balance(user_id)
    
    async def get_user_data(self, user_id: int):
        async with aiosqlite.connect(self.db.db_path) as db:
            async with db.execute('SELECT balance, level, xp, daily_claimed, work_cooldown FROM users WHERE user_id = ?', (user_id,)) as cursor:
                result = await cursor.fetchone()
                if result:
                    return {
                        "balance": result[0], "level": result[1], "xp": result[2],
                        "daily_claimed": result[3], "work_cooldown": result[4]
                    }
                else:
                    await db.execute('INSERT INTO users (user_id) VALUES (?)', (user_id,))
                    await db.commit()
                    return {"balance": 1000, "level": 1, "xp": 0, "daily_claimed": None, "work_cooldown": None}
    
    async def add_xp(self, user_id: int, xp_gain: int):
        async with aiosqlite.connect(self.db.db_path) as db:
            await db.execute('INSERT OR IGNORE INTO users (user_id) VALUES (?)', (user_id,))
            await db.execute('UPDATE users SET xp = xp + ? WHERE user_id = ?', (xp_gain, user_id))
            async with db.execute('SELECT xp, level FROM users WHERE user_id = ?', (user_id,)) as cursor:
                user_data = await cursor.fetchone()
                if user_data:
                    xp, level = user_data
                    xp_needed = level * 100
                    if xp >= xp_needed:
                        await db.execute('UPDATE users SET level = level + 1, xp = xp - ? WHERE user_id = ?', (xp_needed, user_id))
                        level_up = True
                    else:
                        level_up = False
            await db.commit()
            return level_up

    async def reset_weekly_xp(self):
        async with aiosqlite.connect(self.db.db_path) as db:
            await db.execute('UPDATE users SET xp = 0 WHERE xp > 0')
            await db.commit()
    
    async def admin_add_money(self, user_id: int, amount: int):
        async with aiosqlite.connect(self.db.db_path) as db:
            await db.execute('INSERT OR IGNORE INTO users (user_id) VALUES (?)', (user_id,))
            await db.execute('UPDATE users SET balance = balance + ? WHERE user_id = ?', (amount, user_id))
            await db.commit()
            return await self.get_balance(user_id)
    
    async def admin_set_money(self, user_id: int, amount: int):
        async with aiosqlite.connect(self.db.db_path) as db:
            await db.execute('INSERT OR IGNORE INTO users (user_id) VALUES (?)', (user_id,))
            await db.execute('UPDATE users SET balance = ? WHERE user_id = ?', (amount, user_id))
            await db.commit()
            return await self.get_balance(user_id)
    
    async def admin_reset_cooldowns(self, user_id: int):
        async with aiosqlite.connect(self.db.db_path) as db:
            await db.execute('INSERT OR IGNORE INTO users (user_id) VALUES (?)', (user_id,))
            await db.execute('UPDATE users SET daily_claimed = NULL, work_cooldown = NULL WHERE user_id = ?', (user_id,))
            await db.commit()

# üèóÔ∏è –ì–õ–ê–í–ù–´–ô –ë–û–¢ –° –í–°–ï–ú–ò –°–ò–°–¢–ï–ú–ê–ú–ò
class MegaBot(commands.Bot):
    def __init__(self):
        intents = discord.Intents.all()
        super().__init__(command_prefix='!', intents=intents, help_command=None)
        
        self.db = Database()
        self.economy = EconomySystem(self.db)
        self.shop = ShopSystem(self.db)
        self.casino = CasinoSystem(self.db)
        self.moderation = ModerationSystem()
        self.music = MusicPlayer()
        self.backup_system = BackupSystem(self.db)
        self.logging_system = LoggingSystem()
        self.automod = AutoModSystem()
        self.report_system = ReportSystem()
        self.event_system = EventSystem(self.economy)
        self.marriage_system = MarriageSystem(self.db)
        self.clan_system = ClanSystem(self.db)
        self.crypto_system = CryptoSystem(self.db)
        self.stock_market = StockMarket()
        self.property_system = PropertySystem(self.db)
        self.achievement_system = AchievementSystem(self.db)
        self.minigame_system = MiniGameSystem(self.economy)
        
        self.start_time = datetime.now()
    
    async def setup_hook(self):
        await self.db.init_db()
        try:
            synced = await self.tree.sync()
            logging.info(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(synced)} –∫–æ–º–∞–Ω–¥")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        
        # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
        self.auto_backup.start()
        self.update_stock_prices.start()
        self.weekly_bonuses.start()

    @tasks.loop(hours=24)
    async def auto_backup(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–æ–≤"""
        await self.backup_system.create_backup()
    
    @tasks.loop(minutes=5)
    async def update_stock_prices(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –∞–∫—Ü–∏–π"""
        self.stock_market.update_prices()
    
    @tasks.loop(hours=168)  # 1 –Ω–µ–¥–µ–ª—è
    async def weekly_bonuses(self):
        """–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"""
        # –õ–æ–≥–∏–∫–∞ –≤—ã–¥–∞—á–∏ –±–æ–Ω—É—Å–æ–≤
        pass

    async def weekly_reset_task(self):
        await self.wait_until_ready()
        while not self.is_closed():
            now = datetime.now()
            next_monday = now + timedelta(days=(7 - now.weekday()))
            next_reset = datetime(next_monday.year, next_monday.month, next_monday.day, 0, 0, 0)
            wait_seconds = (next_reset - now).total_seconds()
            await asyncio.sleep(wait_seconds)
            await self.economy.reset_weekly_xp()
            logging.info("‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –æ–ø—ã—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω")

# üéµ –ú–£–ó–´–ö–ê - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
class MusicPlayer:
    def __init__(self):
        self.queues = {}
        self.voice_clients = {}
        self.now_playing = {}
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è yt-dlp
        self.ytdl_format_options = {
            'format': 'bestaudio/best',
            'outtmpl': '%(extractor)s-%(id)s-%(title)s.%(ext)s',
            'restrictfilenames': True,
            'noplaylist': True,
            'nocheckcertificate': True,
            'ignoreerrors': False,
            'logtostderr': False,
            'quiet': True,
            'no_warnings': True,
            'default_search': 'auto',
            'source_address': '0.0.0.0'
        }
        
        self.ffmpeg_options = {
            'before_options': '-reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5',
            'options': '-vn'
        }
        
        try:
            self.ytdl = yt_dlp.YoutubeDL(self.ytdl_format_options)
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ yt-dlp: {e}")
            self.ytdl = None

    def get_queue(self, guild_id: int):
        if guild_id not in self.queues:
            self.queues[guild_id] = []
        return self.queues[guild_id]

    async def connect_to_voice_channel(self, interaction: discord.Interaction):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É"""
        if not interaction.user.voice:
            await interaction.response.send_message("‚ùå –í—ã –Ω–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ! –ó–∞–π–¥–∏—Ç–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª.", ephemeral=True)
            return None
        
        voice_channel = interaction.user.voice.channel
        
        if interaction.guild.id in self.voice_clients:
            voice_client = self.voice_clients[interaction.guild.id]
            if voice_client.is_connected():
                await voice_client.move_to(voice_channel)
                return voice_client
        
        try:
            voice_client = await voice_channel.connect()
            self.voice_clients[interaction.guild.id] = voice_client
            return voice_client
        except Exception as e:
            await interaction.response.send_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}", ephemeral=True)
            return None

    async def play_music(self, interaction: discord.Interaction, query: str):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –º—É–∑—ã–∫–∏"""
        if not self.ytdl:
            await interaction.response.send_message("‚ùå –ú—É–∑—ã–∫–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", ephemeral=True)
            return
        
        voice_client = await self.connect_to_voice_channel(interaction)
        if not voice_client:
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ
            data = await asyncio.get_event_loop().run_in_executor(
                None, lambda: self.ytdl.extract_info(query, download=False)
            )
            
            if 'entries' in data:
                data = data['entries'][0]
            
            url = data['url']
            title = data.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫')
            duration = data.get('duration', 0)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            if duration:
                minutes = duration // 60
                seconds = duration % 60
                duration_str = f"{minutes}:{seconds:02d}"
            else:
                duration_str = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
            queue = self.get_queue(interaction.guild.id)
            track_info = {
                'url': url,
                'title': title,
                'duration': duration_str,
                'requester': interaction.user
            }
            queue.append(track_info)
            
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
            if not voice_client.is_playing():
                await self.play_next(interaction.guild.id, interaction.channel)
                embed = Design.create_embed("üéµ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç", 
                                          f"**{title}**\n"
                                          f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_str}\n"
                                          f"üë§ –ó–∞–ø—Ä–æ—Å–∏–ª: {interaction.user.mention}", "music")
            else:
                embed = Design.create_embed("üéµ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å", 
                                          f"**{title}**\n"
                                          f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_str}\n"
                                          f"üë§ –ó–∞–ø—Ä–æ—Å–∏–ª: {interaction.user.mention}\n"
                                          f"üìã –ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: {len(queue)}", "music")
            
            await interaction.response.send_message(embed=embed)
            
        except Exception as e:
            await interaction.response.send_message(f"‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ç—Ä–µ–∫", ephemeral=True)
            logging.error(f"–û—à–∏–±–∫–∞ –º—É–∑—ã–∫–∏: {e}")

    async def play_next(self, guild_id: int, channel=None):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç—Ä–µ–∫–∞"""
        queue = self.get_queue(guild_id)
        if not queue:
            return
        
        if guild_id not in self.voice_clients:
            return
        
        voice_client = self.voice_clients[guild_id]
        
        if voice_client.is_playing():
            return
        
        if queue:
            track = queue.pop(0)
            self.now_playing[guild_id] = track
            
            def after_playing(error):
                if error:
                    logging.error(f'–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {error}')
                asyncio.run_coroutine_threadsafe(self.play_next(guild_id, channel), voice_client.loop)
            
            try:
                source = discord.FFmpegPCMAudio(track['url'], **self.ffmpeg_options)
                voice_client.play(source, after=after_playing)
                
                if channel:
                    embed = Design.create_embed("üéµ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç", 
                                              f"**{track['title']}**\n"
                                              f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {track['duration']}\n"
                                              f"üë§ –ó–∞–ø—Ä–æ—Å–∏–ª: {track['requester'].mention}", "music")
                    asyncio.run_coroutine_threadsafe(channel.send(embed=embed), voice_client.loop)
                    
            except Exception as e:
                logging.error(f'–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {e}')
                asyncio.run_coroutine_threadsafe(self.play_next(guild_id, channel), voice_client.loop)

    def get_queue_embed(self, guild_id: int):
        queue = self.get_queue(guild_id)
        embed = Design.create_embed("üéµ –û—á–µ—Ä–µ–¥—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è", "", "music")
        
        # –¢–µ–∫—É—â–∏–π —Ç—Ä–µ–∫
        if guild_id in self.now_playing:
            current = self.now_playing[guild_id]
            embed.add_field(
                name="üéµ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç",
                value=f"**{current['title']}**\n‚è±Ô∏è {current['duration']} | üë§ {current['requester'].display_name}",
                inline=False
            )
        
        # –û—á–µ—Ä–µ–¥—å
        if queue:
            embed.add_field(name=f"üìã –û—á–µ—Ä–µ–¥—å ({len(queue)} —Ç—Ä–µ–∫–æ–≤)", value="", inline=False)
            for i, track in enumerate(queue[:5], 1):
                embed.add_field(
                    name=f"{i}. {track['title']}",
                    value=f"‚è±Ô∏è {track['duration']} | üë§ {track['requester'].display_name}",
                    inline=False
                )
        else:
            embed.add_field(name="üìã –û—á–µ—Ä–µ–¥—å", value="–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞", inline=False)
        
        return embed

    async def stop_music(self, guild_id: int):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º—É–∑—ã–∫–∏"""
        if guild_id in self.voice_clients:
            voice_client = self.voice_clients[guild_id]
            if voice_client.is_playing():
                voice_client.stop()
            
            self.queues[guild_id] = []
            if guild_id in self.now_playing:
                del self.now_playing[guild_id]
            
            await voice_client.disconnect()
            del self.voice_clients[guild_id]

# üè™ –ú–ê–ì–ê–ó–ò–ù (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∞—Å—Å)
class ShopSystem:
    def __init__(self, db: Database):
        self.db = db
        self.categories = SHOP_CATEGORIES
        self.payment_details = "**üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:**\n–ö–∞—Ä—Ç–∞: `2200 0000 0000 0000`\n–¢–∏–Ω—å–∫–æ—Ñ—Ñ\n–ü–æ–ª—É—á–∞—Ç–µ–ª—å: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤"
    
    async def create_order(self, user_id: int, item_id: int, quantity: int = 1, details: str = ""):
        product = None
        category_name = ""
        for cat_name, category in self.categories.items():
            if item_id in category["items"]:
                product = category["items"][item_id]
                category_name = cat_name
                break
        
        if not product:
            return {"success": False, "error": "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"}
        
        if product.get("per_unit"):
            total_price = product["price"] * quantity
        else:
            total_price = product["price"]
            quantity = 1
        
        async with aiosqlite.connect(self.db.db_path) as db:
            cursor = await db.execute('''
                INSERT INTO orders (user_id, category, product_name, quantity, price, details, order_time)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            ''', (user_id, category_name, product["name"], quantity, total_price, details, datetime.now().isoformat()))
            order_id = cursor.lastrowid
            await db.commit()
        
        return {"success": True, "order_id": order_id, "product": product, "total_price": total_price, "quantity": quantity}
    
    async def get_user_orders(self, user_id: int):
        async with aiosqlite.connect(self.db.db_path) as db:
            async with db.execute('''
                SELECT id, product_name, quantity, price, status, order_time 
                FROM orders WHERE user_id = ? ORDER BY order_time DESC
            ''', (user_id,)) as cursor:
                return await cursor.fetchall()
    
    async def update_order_status(self, order_id: int, status: str, admin_id: int = None, screenshot: str = None):
        async with aiosqlite.connect(self.db.db_path) as db:
            if status == "–≤—ã–ø–æ–ª–Ω–µ–Ω":
                await db.execute('''
                    UPDATE orders SET status = ?, admin_id = ?, completion_time = ?, payment_screenshot = ?
                    WHERE id = ?
                ''', (status, admin_id, datetime.now().isoformat(), screenshot, order_id))
            else:
                await db.execute('UPDATE orders SET status = ?, payment_screenshot = ? WHERE id = ?', 
                               (status, screenshot, order_id))
            await db.commit()
    
    def get_product_by_id(self, item_id: int):
        for category in self.categories.values():
            if item_id in category["items"]:
                return category["items"][item_id]
        return None

# üé∞ –ö–ê–ó–ò–ù–û (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∞—Å—Å)
class CasinoSystem:
    def __init__(self, db: Database):
        self.db = db
    
    async def play_slots(self, user_id: int, bet: int):
        if bet <= 0:
            return {"success": False, "error": "–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π"}
        
        economy = EconomySystem(self.db)
        balance = await economy.get_balance(user_id)
        
        if balance < bet:
            return {"success": False, "error": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤"}
        
        symbols = ["üçí", "üçã", "üçä", "üçá", "üîî", "üíé"]
        result = [random.choice(symbols) for _ in range(3)]
        
        if result[0] == result[1] == result[2]:
            multiplier = 5
        elif result[0] == result[1] or result[1] == result[2]:
            multiplier = 2
        else:
            multiplier = 0
        
        win_amount = bet * multiplier
        net_win = win_amount - bet
        
        await economy.update_balance(user_id, net_win)
        
        return {
            "success": True,
            "result": result,
            "bet": bet,
            "win_amount": win_amount,
            "multiplier": multiplier
        }

# üõ°Ô∏è –ú–û–î–ï–†–ê–¶–ò–Ø (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∞—Å—Å)
class ModerationSystem:
    async def create_ticket(self, user: discord.Member, reason: str):
        guild = user.guild
        overwrites = {
            guild.default_role: discord.PermissionOverwrite(read_messages=False),
            user: discord.PermissionOverwrite(read_messages=True, send_messages=True),
            guild.me: discord.PermissionOverwrite(read_messages=True, send_messages=True)
        }
        
        for admin_id in ADMIN_IDS:
            admin = guild.get_member(admin_id)
            if admin:
                overwrites[admin] = discord.PermissionOverwrite(read_messages=True, send_messages=True)
        
        channel = await guild.create_text_channel(
            f'ticket-{user.display_name}',
            overwrites=overwrites,
            topic=f'–¢–∏–∫–µ—Ç: {reason}'
        )
        
        embed = Design.create_embed("üé´ –¢–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω", 
                                  f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user.mention}\n"
                                  f"**–ü—Ä–∏—á–∏–Ω–∞:** {reason}", "success")
        
        await channel.send(embed=embed)
        return channel

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞ (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ)
SHOP_CATEGORIES = {
    "üéÆ TDS/TDX": {
        "color": "tds",
        "items": {
            1: {"name": "üèóÔ∏è –ò–Ω–∂–µ–Ω–µ—Ä (4500 –≥–µ–º–æ–≤)", "price": 860, "type": "–∏–≥—Ä–∞"},
            2: {"name": "‚ö° –£—Å–∫–æ—Ä–∏—Ç–µ–ª—å (2500 –≥–µ–º–æ–≤)", "price": 490, "type": "–∏–≥—Ä–∞"},
            3: {"name": "üíÄ –ù–µ–∫—Ä–æ–º–∞–Ω—Å–µ—Ä (1800 –≥–µ–º–æ–≤)", "price": 350, "type": "–∏–≥—Ä–∞"},
            4: {"name": "ü•ä –ë—Ä–∞–≤–ª–µ—Ä (1250 –≥–µ–º–æ–≤)", "price": 240, "type": "–∏–≥—Ä–∞"},
            5: {"name": "üéØ –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –•–∞—Ä–¥–∫–æ—Ä", "price": 90, "type": "—É—Å–ª—É–≥–∞"},
            6: {"name": "üçï –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –ü–∏—Ü—Ü–∞ –ü–∞—Ç–∏", "price": 45, "type": "—É—Å–ª—É–≥–∞"},
        }
    },
    "üî¥ Roblox": {
        "color": "roblox", 
        "items": {
            7: {"name": "üéÅ Robux Gift (–∫—É—Ä—Å: 1 —Ä—É–± = 2 robux)", "price": 0.5, "per_unit": True, "type": "—Ü–∏—Ñ—Ä–æ–≤–æ–π"},
            8: {"name": "üé´ Robux Gamepass (–∫—É—Ä—Å: 1 —Ä—É–± = 1.5 robux)", "price": 0.67, "per_unit": True, "type": "—Ü–∏—Ñ—Ä–æ–≤–æ–π"},
        }
    },
    "ü•ä Blox Fruits": {
        "color": "roblox",
        "items": {
            9: {"name": "üé≤ –†–∞–Ω–¥–æ–º –ú–∏—Ñ–∏–∫", "price": 15, "type": "–∏–≥—Ä–∞"},
            10: {"name": "üêÜ Leopard", "price": 55, "type": "–∏–≥—Ä–∞"},
            11: {"name": "üí® Gas", "price": 60, "type": "–∏–≥—Ä–∞"},
        }
    },
    "‚ö° Discord": {
        "color": "discord",
        "items": {
            12: {"name": "‚≠ê –ü—Ä–µ–º–∏—É–º+ (–º–µ—Å—è—Ü)", "price": 999, "type": "–ø–æ–¥–ø–∏—Å–∫–∞"},
            13: {"name": "üéñÔ∏è –°–ø–æ–Ω—Å–æ—Ä (–Ω–∞–≤—Å–µ–≥–¥–∞)", "price": 405, "type": "—Ä–æ–ª—å"},
            14: {"name": "üé® –ö–∞—Å—Ç–æ–º —Ä–æ–ª—å (–º–µ—Å—è—Ü)", "price": 76, "type": "—Ä–æ–ª—å"},
        }
    }
}

bot = MegaBot()

# üîß –§–£–ù–ö–¶–ò–ò –ü–†–û–í–ï–†–û–ö –ú–£–¢–û–í –ò –ë–ê–ù–û–í (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ)
def parse_time(time_str: str) -> int:
    """–ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏ (1—Å, 1–º, 1—á, 1–¥, 1–Ω)"""
    time_units = {
        '—Å': 1, '—Å–µ–∫': 1, '—Å–µ–∫—É–Ω–¥': 1,
        '–º': 60, '–º–∏–Ω': 60, '–º–∏–Ω—É—Ç': 60, 
        '—á': 3600, '—á–∞—Å': 3600, '—á–∞—Å–æ–≤': 3600,
        '–¥': 86400, '–¥–µ–Ω—å': 86400, '–¥–Ω–µ–π': 86400,
        '–Ω': 604800, '–Ω–µ–¥–µ–ª—è': 604800, '–Ω–µ–¥–µ–ª—å': 604800
    }
    
    time_str = time_str.lower().replace(' ', '')
    num_str = ''
    unit_str = ''
    
    for char in time_str:
        if char.isdigit():
            num_str += char
        else:
            unit_str += char
    
    if not num_str:
        return 0
    
    number = int(num_str)
    unit = unit_str.lower()
    
    if unit in time_units:
        return number * time_units[unit]
    else:
        return 0

async def check_user_muted(interaction: discord.Interaction, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: discord.Member) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–º—É—á–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    mute_role = discord.utils.get(interaction.guild.roles, name="Muted")
    if mute_role and mute_role in –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.roles:
        if –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id in mute_data:
            mute_info = mute_data[–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id]
            remaining_time = mute_info['end_time'] - datetime.now()
            if remaining_time.total_seconds() > 0:
                hours = int(remaining_time.total_seconds() // 3600)
                minutes = int((remaining_time.total_seconds() % 3600) // 60)
                
                embed = Design.create_embed("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –º—É—Ç–µ", 
                                          f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.mention}\n"
                                          f"**–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏:** {hours}—á {minutes}–º\n"
                                          f"**–ü—Ä–∏—á–∏–Ω–∞:** {mute_info['reason']}\n"
                                          f"**–ó–∞–º—É—Ç–∏–ª:** {mute_info['moderator']}", "warning")
                await interaction.response.send_message(embed=embed, ephemeral=True)
                return True
            else:
                await –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.remove_roles(mute_role)
                del mute_data[–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id]
        else:
            embed = Design.create_embed("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –º—É—Ç–µ", 
                                      f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.mention}\n"
                                      f"**–°—Ç–∞—Ç—É—Å:** –í –º—É—Ç–µ (–≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ)", "warning")
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return True
    return False

async def check_user_banned(interaction: discord.Interaction, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: discord.Member) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    try:
        ban_entry = await interaction.guild.fetch_ban(–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
        embed = Design.create_embed("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω", 
                                  f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.mention}\n"
                                  f"**–ü—Ä–∏—á–∏–Ω–∞:** {ban_entry.reason or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}", "danger")
        await interaction.response.send_message(embed=embed, ephemeral=True)
        return True
    except discord.NotFound:
        return False

# üîÑ –ù–û–í–´–ï –ö–û–ú–ê–ù–î–´ –î–õ–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–• –°–ò–°–¢–ï–ú

# üõ°Ô∏è –ö–û–ú–ê–ù–î–´ –ê–í–¢–û–ú–û–î–ï–†–ê–¶–ò–ò –ò –†–ï–ü–û–†–¢–û–í
@bot.tree.command(name="—Ä–µ–ø–æ—Ä—Ç", description="–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def —Ä–µ–ø–æ—Ä—Ç(interaction: discord.Interaction, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: discord.Member, –ø—Ä–∏—á–∏–Ω–∞: str, –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞: str = None):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∂–∞–ª–æ–± –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    report_id = await bot.report_system.create_report(interaction.user, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø—Ä–∏—á–∏–Ω–∞, –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞)
    
    report_channel = await bot.report_system.get_report_channel(interaction.guild)
    
    embed = Design.create_embed("üõ°Ô∏è –ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞", 
                              f"**–ñ–∞–ª–æ–±–∞ #{report_id}**\n"
                              f"üë§ **–û—Ç:** {interaction.user.mention}\n"
                              f"‚ö†Ô∏è **–ù–∞:** {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.mention}\n"
                              f"üìù **–ü—Ä–∏—á–∏–Ω–∞:** {–ø—Ä–∏—á–∏–Ω–∞}", "warning")
    
    if –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞:
        embed.add_field(name="üìé –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞", value=–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞, inline=False)
    
    await report_channel.send(embed=embed)
    await interaction.response.send_message("‚úÖ –ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º!", ephemeral=True)

@bot.tree.command(name="–∞–≤—Ç–æ–º–æ–¥", description="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏–∏")
@commands.has_permissions(administrator=True)
async def –∞–≤—Ç–æ–º–æ–¥(interaction: discord.Interaction, –∞–Ω—Ç–∏_—Å–ø–∞–º: bool = True, –∞–Ω—Ç–∏_—É–ø–æ–º–∏–Ω–∞–Ω–∏—è: bool = True):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    automod_settings[interaction.guild.id] = {
        'anti_spam': –∞–Ω—Ç–∏_—Å–ø–∞–º,
        'anti_mentions': –∞–Ω—Ç–∏_—É–ø–æ–º–∏–Ω–∞–Ω–∏—è
    }
    
    embed = Design.create_embed("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏–∏", 
                              f"**–ê–Ω—Ç–∏-—Å–ø–∞–º:** {'‚úÖ' if –∞–Ω—Ç–∏_—Å–ø–∞–º else '‚ùå'}\n"
                              f"**–ê–Ω—Ç–∏-—É–ø–æ–º–∏–Ω–∞–Ω–∏—è:** {'‚úÖ' if –∞–Ω—Ç–∏_—É–ø–æ–º–∏–Ω–∞–Ω–∏—è else '‚ùå'}", "success")
    await interaction.response.send_message(embed=embed)

# üéØ –ö–û–ú–ê–ù–î–´ –ò–í–ï–ù–¢–û–í
@bot.tree.command(name="–∏–≤–µ–Ω—Ç", description="–°–æ–∑–¥–∞—Ç—å –∏–≤–µ–Ω—Ç")
@is_admin()
async def –∏–≤–µ–Ω—Ç(interaction: discord.Interaction, —Ç–∏–ø: str, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: int, –Ω–∞–≥—Ä–∞–¥–∞: int):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–≤–µ–Ω—Ç–∞"""
    event_id = await bot.event_system.start_event(—Ç–∏–ø, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –Ω–∞–≥—Ä–∞–¥–∞)
    
    embed = Design.create_embed("üé™ –ù–æ–≤—ã–π –∏–≤–µ–Ω—Ç!", 
                              f"**–ò–≤–µ–Ω—Ç #{event_id}**\n"
                              f"üéØ **–¢–∏–ø:** {—Ç–∏–ø}\n"
                              f"‚è±Ô∏è **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å} —á–∞—Å–æ–≤\n"
                              f"üí∞ **–ù–∞–≥—Ä–∞–¥–∞:** {–Ω–∞–≥—Ä–∞–¥–∞} –º–æ–Ω–µ—Ç", "event")
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", description="–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∏–≤–µ–Ω—Ç–µ")
async def —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å(interaction: discord.Interaction, id_–∏–≤–µ–Ω—Ç–∞: int):
    """–£—á–∞—Å—Ç–∏–µ –≤ –∏–≤–µ–Ω—Ç–µ"""
    await bot.event_system.add_participant(id_–∏–≤–µ–Ω—Ç–∞, interaction.user.id)
    await interaction.response.send_message("‚úÖ –í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∏–≤–µ–Ω—Ç–µ!", ephemeral=True)

# üíë –ö–û–ú–ê–ù–î–´ –ë–†–ê–ö–û–í
@bot.tree.command(name="–±—Ä–∞–∫", description="–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –±—Ä–∞–∫")
async def –±—Ä–∞–∫(interaction: discord.Interaction, –ø–∞—Ä—Ç–Ω–µ—Ä: discord.Member):
    """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—Ä–∞–∫–∞"""
    if –ø–∞—Ä—Ç–Ω–µ—Ä.id == interaction.user.id:
        await interaction.response.send_message("‚ùå –ù–µ–ª—å–∑—è –∂–µ–Ω–∏—Ç—å—Å—è –Ω–∞ —Å–µ–±–µ!", ephemeral=True)
        return
    
    embed = Design.create_embed("üíç –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—Ä–∞–∫–∞", 
                              f"{interaction.user.mention} –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –±—Ä–∞–∫ {–ø–∞—Ä—Ç–Ω–µ—Ä.mention}!\n"
                              f"–î–ª—è —Å–æ–≥–ª–∞—Å–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/–ø—Ä–∏–Ω—è—Ç—å_–±—Ä–∞–∫ {interaction.user.id}`", "marriage")
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="–ø—Ä–∏–Ω—è—Ç—å_–±—Ä–∞–∫", description="–ü—Ä–∏–Ω—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—Ä–∞–∫–∞")
async def –ø—Ä–∏–Ω—è—Ç—å_–±—Ä–∞–∫(interaction: discord.Interaction, –ø–∞—Ä—Ç–Ω–µ—Ä_id: str):
    """–ü—Ä–∏–Ω—è—Ç–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –±—Ä–∞–∫–∞"""
    try:
        partner_id = int(–ø–∞—Ä—Ç–Ω–µ—Ä_id)
        await bot.marriage_system.marry(interaction.user.id, partner_id)
        
        partner = await bot.fetch_user(partner_id)
        embed = Design.create_embed("üíë –ë—Ä–∞–∫ –∑–∞–∫–ª—é—á–µ–Ω!", 
                                  f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º {interaction.user.mention} –∏ {partner.mention} —Å –±—Ä–∞–∫–æ–º! üíï", "marriage")
        await interaction.response.send_message(embed=embed)
    except Exception as e:
        await interaction.response.send_message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫–ª—é—á–µ–Ω–∏–∏ –±—Ä–∞–∫–∞", ephemeral=True)

# üèòÔ∏è –ö–û–ú–ê–ù–î–´ –ö–õ–ê–ù–û–í
@bot.tree.command(name="—Å–æ–∑–¥–∞—Ç—å_–∫–ª–∞–Ω", description="–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–Ω")
async def —Å–æ–∑–¥–∞—Ç—å_–∫–ª–∞–Ω(interaction: discord.Interaction, –Ω–∞–∑–≤–∞–Ω–∏–µ: str):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–Ω–∞"""
    clan_id = await bot.clan_system.create_clan(–Ω–∞–∑–≤–∞–Ω–∏–µ, interaction.user.id)
    
    embed = Design.create_embed("üèòÔ∏è –ö–ª–∞–Ω —Å–æ–∑–¥–∞–Ω!", 
                              f"**–ö–ª–∞–Ω:** {–Ω–∞–∑–≤–∞–Ω–∏–µ}\n"
                              f"üëë **–õ–∏–¥–µ—Ä:** {interaction.user.mention}\n"
                              f"üÜî **ID –∫–ª–∞–Ω–∞:** {clan_id}", "clan")
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="–≤—Å—Ç—É–ø–∏—Ç—å_–≤_–∫–ª–∞–Ω", description="–í—Å—Ç—É–ø–∏—Ç—å –≤ –∫–ª–∞–Ω")
async def –≤—Å—Ç—É–ø–∏—Ç—å_–≤_–∫–ª–∞–Ω(interaction: discord.Interaction, id_–∫–ª–∞–Ω–∞: int):
    """–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–ª–∞–Ω"""
    await bot.clan_system.add_member(id_–∫–ª–∞–Ω–∞, interaction.user.id)
    await interaction.response.send_message("‚úÖ –í—ã –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –∫–ª–∞–Ω!", ephemeral=True)

# üíé –ö–û–ú–ê–ù–î–´ –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–´
@bot.tree.command(name="–∫—Ä–∏–ø—Ç–æ", description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã")
async def –∫—Ä–∏–ø—Ç–æ(interaction: discord.Interaction, –≤–∞–ª—é—Ç–∞: str = "BITCOIN"):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"""
    balance = await bot.crypto_system.get_crypto_balance(interaction.user.id, –≤–∞–ª—é—Ç–∞)
    price = bot.crypto_system.crypto_prices.get(–≤–∞–ª—é—Ç–∞, 0)
    
    embed = Design.create_embed("üíé –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", 
                              f"**–ë–∞–ª–∞–Ω—Å {–≤–∞–ª—é—Ç–∞}:** {balance:.8f}\n"
                              f"**–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:** ${price:,.2f}\n"
                              f"**–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:** ${balance * price:,.2f}", "crypto")
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="–∫—É–ø–∏—Ç—å_–∫—Ä–∏–ø—Ç–æ", description="–ö—É–ø–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É")
async def –∫—É–ø–∏—Ç—å_–∫—Ä–∏–ø—Ç–æ(interaction: discord.Interaction, –≤–∞–ª—é—Ç–∞: str, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: float):
    """–ü–æ–∫—É–ø–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"""
    price = bot.crypto_system.crypto_prices.get(–≤–∞–ª—é—Ç–∞, 0)
    total_cost = price * –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    
    balance = await bot.economy.get_balance(interaction.user.id)
    if balance < total_cost:
        await interaction.response.send_message("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!", ephemeral=True)
        return
    
    await bot.economy.update_balance(interaction.user.id, -total_cost)
    await bot.crypto_system.update_crypto_balance(interaction.user.id, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –≤–∞–ª—é—Ç–∞)
    
    embed = Design.create_embed("üíé –ü–æ–∫—É–ø–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã", 
                              f"**–ö—É–ø–ª–µ–Ω–æ:** {–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:.8f} {–≤–∞–ª—é—Ç–∞}\n"
                              f"**–ü–æ—Ç—Ä–∞—á–µ–Ω–æ:** {total_cost:,.2f} –º–æ–Ω–µ—Ç", "success")
    await interaction.response.send_message(embed=embed)

# üìà –ö–û–ú–ê–ù–î–´ –ë–ò–†–ñ–ò
@bot.tree.command(name="–∞–∫—Ü–∏–∏", description="–ü—Ä–æ—Å–º–æ—Ç—Ä —Ü–µ–Ω –∞–∫—Ü–∏–π")
async def –∞–∫—Ü–∏–∏(interaction: discord.Interaction):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Ü–µ–Ω –∞–∫—Ü–∏–π"""
    embed = Design.create_embed("üìà –ë–∏—Ä–∂–∞ –∞–∫—Ü–∏–π", "", "info")
    
    for symbol, data in bot.stock_market.stocks.items():
        embed.add_field(
            name=f"üìä {symbol}",
            value=f"–¶–µ–Ω–∞: ${data['price']:.2f}",
            inline=True
        )
    
    await interaction.response.send_message(embed=embed)

# üè† –ö–û–ú–ê–ù–î–´ –ù–ï–î–í–ò–ñ–ò–ú–û–°–¢–ò
@bot.tree.command(name="–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å", description="–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ—Å—Ç—É–ø–Ω–æ–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏")
async def –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å(interaction: discord.Interaction):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"""
    embed = Design.create_embed("üè† –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å", "–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏:", "info")
    
    for prop_id, prop_data in bot.property_system.properties.items():
        embed.add_field(
            name=f"üè° {prop_data['name']}",
            value=f"–¶–µ–Ω–∞: {prop_data['price']:,} –º–æ–Ω–µ—Ç\n–î–æ—Ö–æ–¥: {prop_data['income']} –º–æ–Ω–µ—Ç/–¥–µ–Ω—å",
            inline=False
        )
    
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="–∫—É–ø–∏—Ç—å_–¥–æ–º", description="–ö—É–ø–∏—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å")
async def –∫—É–ø–∏—Ç—å_–¥–æ–º(interaction: discord.Interaction, id_–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏: str):
    """–ü–æ–∫—É–ø–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"""
    success = await bot.property_system.buy_property(interaction.user.id, id_–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏)
    
    if success:
        prop_data = bot.property_system.properties[id_–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏]
        embed = Design.create_embed("‚úÖ –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –∫—É–ø–ª–µ–Ω–∞!", 
                                  f"**–û–±—ä–µ–∫—Ç:** {prop_data['name']}\n"
                                  f"**–¶–µ–Ω–∞:** {prop_data['price']:,} –º–æ–Ω–µ—Ç\n"
                                  f"**–î–æ—Ö–æ–¥:** {prop_data['income']} –º–æ–Ω–µ—Ç/–¥–µ–Ω—å", "success")
    else:
        embed = Design.create_embed("‚ùå –û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å", "danger")
    
    await interaction.response.send_message(embed=embed)

# üèÜ –ö–û–ú–ê–ù–î–´ –î–û–°–¢–ò–ñ–ï–ù–ò–ô
@bot.tree.command(name="–¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è", description="–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π")
async def –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è(interaction: discord.Interaction, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: Optional[discord.Member] = None):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    user = –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å or interaction.user
    achievements = user_achievements.get(user.id, [])
    
    embed = Design.create_embed("üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", f"–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è {user.display_name}:", "premium")
    
    if achievements:
        for ach_id in achievements[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            ach_data = bot.achievement_system.achievements.get(ach_id, {})
            embed.add_field(
                name=f"üéØ {ach_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}",
                value=ach_data.get('description', ''),
                inline=False
            )
    else:
        embed.description = "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π üò¢"
    
    await interaction.response.send_message(embed=embed)

# üéÆ –ö–û–ú–ê–ù–î–´ –ú–ò–ù–ò-–ò–ì–†
@bot.tree.command(name="–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞", description="–ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É")
async def –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞(interaction: discord.Interaction, —Ç–µ–º–∞: str = "general"):
    """–ó–∞–ø—É—Å–∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
    question_data = await bot.minigame_system.start_quiz(interaction, —Ç–µ–º–∞)
    
    if question_data:
        embed = Design.create_embed("üéÆ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞", 
                                  f"**–í–æ–ø—Ä–æ—Å:** {question_data['question']}\n\n"
                                  f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç!", "info")
        await interaction.response.send_message(embed=embed)
    else:
        await interaction.response.send_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É", ephemeral=True)

# üìä –ö–û–ú–ê–ù–î–´ –ê–ù–ê–õ–ò–¢–ò–ö–ò
@bot.tree.command(name="–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", description="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
@is_admin()
async def –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å(interaction: discord.Interaction, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: Optional[discord.Member] = None):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    user = –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å or interaction.user
    
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    embed = Design.create_embed("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", 
                              f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user.mention}\n"
                              f"**–°–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –¥–µ–Ω—å:** 0\n"  # –ó–∞–≥–ª—É—à–∫–∞
                              f"**–ö–æ–º–∞–Ω–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:** 0", "info")
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="–æ–ø—Ä–æ—Å", description="–°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å")
@commands.has_permissions(manage_messages=True)
async def –æ–ø—Ä–æ—Å(interaction: discord.Interaction, –≤–æ–ø—Ä–æ—Å: str, –≤–∞—Ä–∏–∞–Ω—Ç1: str, –≤–∞—Ä–∏–∞–Ω—Ç2: str, –≤–∞—Ä–∏–∞–Ω—Ç3: str = None, –≤–∞—Ä–∏–∞–Ω—Ç4: str = None):
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞"""
    embed = Design.create_embed("üìä –û–ø—Ä–æ—Å", –≤–æ–ø—Ä–æ—Å, "info")
    embed.add_field(name="1Ô∏è‚É£", value=–≤–∞—Ä–∏–∞–Ω—Ç1, inline=False)
    embed.add_field(name="2Ô∏è‚É£", value=–≤–∞—Ä–∏–∞–Ω—Ç2, inline=False)
    
    if –≤–∞—Ä–∏–∞–Ω—Ç3:
        embed.add_field(name="3Ô∏è‚É£", value=–≤–∞—Ä–∏–∞–Ω—Ç3, inline=False)
    if –≤–∞—Ä–∏–∞–Ω—Ç4:
        embed.add_field(name="4Ô∏è‚É£", value=–≤–∞—Ä–∏–∞–Ω—Ç4, inline=False)
    
    message = await interaction.response.send_message(embed=embed)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏–∏
    poll_msg = await interaction.original_response()
    reactions = ['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£']
    for i in range(2 + bool(–≤–∞—Ä–∏–∞–Ω—Ç3) + bool(–≤–∞—Ä–∏–∞–Ω—Ç4)):
        await poll_msg.add_reaction(reactions[i])

# üîß –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –ö–û–ú–ê–ù–î–´ (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞)
# ... [–í—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π] ...

# üîÑ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô –° –ê–í–¢–û–ú–û–î–ï–†–ê–¶–ò–ï–ô
@bot.event
async def on_message(message):
    if message.author.bot:
        return
    
    # –ê–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏—è
    guild_settings = automod_settings.get(message.guild.id, {})
    
    if guild_settings.get('anti_spam', True):
        if await bot.automod.check_spam(message):
            return
    
    if guild_settings.get('anti_mentions', True):
        if await bot.automod.check_mentions(message):
            return
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    await bot.logging_system.log_action(
        message.author.id, 
        'message', 
        f"–°–æ–æ–±—â–µ–Ω–∏–µ –≤ #{message.channel.name}: {message.content[:50]}..."
    )
    
    if isinstance(message.channel, discord.TextChannel):
        async with aiosqlite.connect(bot.db.db_path) as db:
            await db.execute('INSERT OR IGNORE INTO users (user_id) VALUES (?)', (message.author.id,))
            await db.commit()
        
        xp_gain = random.randint(5, 15)
        level_up = await bot.economy.add_xp(message.author.id, xp_gain)
        
        if level_up:
            user_data = await bot.economy.get_user_data(message.author.id)
            embed = Design.create_embed("üéâ –£—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω!", 
                                      f"**{message.author.mention} –¥–æ—Å—Ç–∏–≥ {user_data['level']} —É—Ä–æ–≤–Ω—è!**", "success")
            await message.channel.send(embed=embed)
    
    await bot.process_commands(message)

@bot.event
async def on_member_join(member):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    embed = Design.create_embed("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", 
                              f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º {member.mention} –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!\n"
                              f"–ò—Å–ø–æ–ª—å–∑—É–π `/–ø–æ–º–æ—â—å` –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥", "success")
    
    # –ò—â–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π
    channel = discord.utils.get(member.guild.channels, name="–æ–±—â–µ–µ")
    if not channel:
        channel = member.guild.system_channel
    
    if channel:
        await channel.send(embed=embed)

@bot.event 
async def on_command_error(ctx, error):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∫–æ–º–∞–Ω–¥"""
    if isinstance(error, commands.CommandNotFound):
        return
    elif isinstance(error, commands.MissingPermissions):
        await ctx.send("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!", ephemeral=True)
    else:
        logging.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã: {error}")
        await ctx.send("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)

# üöÄ –ó–ê–ü–£–°–ö –ë–û–¢–ê
if __name__ == "__main__":
    try:
        logging.info("üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞...")
        bot.run(TOKEN)
    except KeyboardInterrupt:
        logging.info("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")


