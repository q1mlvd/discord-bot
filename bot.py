import os
import discord
from discord import app_commands
from discord.ext import commands, tasks
from discord.ui import Button, View, Select
import json
import random
import asyncio
import datetime
import aiohttp
from typing import Dict, List, Optional
import traceback

# –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–º–ø–æ—Ä—Ç–∞ PostgreSQL
try:
    import psycopg2
    from psycopg2.extras import RealDictCursor
    print("‚úÖ psycopg2 –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
except ImportError:
    print("‚ùå psycopg2 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...")
    os.system("pip install psycopg2-binary")
    import psycopg2
    from psycopg2.extras import RealDictCursor

# –ü–û–õ–£–ß–ï–ù–ò–ï –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø
def get_database_url():
    """–ü–æ–ª—É—á–∞–µ–º DATABASE_URL —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏"""
    database_url = os.environ.get('DATABASE_URL')
    if database_url:
        print("‚úÖ DATABASE_URL –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return database_url
    
    alternative_names = ['POSTGRES_URL', 'POSTGRESQL_URL', 'RAILWAY_DATABASE_URL']
    for name in alternative_names:
        database_url = os.environ.get(name)
        if database_url:
            print(f"‚úÖ DATABASE_URL –Ω–∞–π–¥–µ–Ω –∫–∞–∫ {name}")
            return database_url
    
    db_user = os.environ.get('PGUSER')
    db_password = os.environ.get('PGPASSWORD')
    db_host = os.environ.get('PGHOST')
    db_port = os.environ.get('PGPORT')
    db_name = os.environ.get('PGDATABASE')
    
    if all([db_user, db_password, db_host, db_port, db_name]):
        database_url = f"postgresql://{db_user}:{db_password}@{db_host}:{db_port}/{db_name}"
        print("‚úÖ DATABASE_URL —Å–æ–±—Ä–∞–Ω –∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö")
        return database_url
    
    print("‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    return None

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
DATABASE_URL = get_database_url()
BOT_TOKEN = os.environ.get('DISCORD_BOT_TOKEN')

if not BOT_TOKEN:
    print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: DISCORD_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    exit(1)

if not DATABASE_URL:
    print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
intents = discord.Intents.all()
bot = commands.Bot(command_prefix='!', intents=intents, help_command=None)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
LOG_CHANNEL_ID = 1423377881047896207
ADMIN_IDS = [766767256742526996, 1195144951546265675, 691904643181314078, 1078693283695448064, 1138140772097597472]
ADMIN_USER_ID = 1188261847850299514

# –≠–º–æ–¥–∑–∏ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
EMOJIS = {
    'coin': 'ü™ô',
    'daily': 'üìÖ',
    'case': 'üéÅ',
    'win': 'üéâ',
    'lose': 'üíÄ',
    'steal': 'ü¶π',
    'market': 'üè™',
    'quest': 'üó∫Ô∏è',
    'dice': 'üé≤',
    'duel': '‚öîÔ∏è',
    'admin': '‚öôÔ∏è',
    'slot': 'üé∞',
    'coinflip': 'ü™ô',
    'blackjack': 'üÉè'
}

# –°–∏—Å—Ç–µ–º–∞ –±–∞—Ñ–æ–≤ –æ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤
ITEM_BUFFS = {
    '–ó–æ–ª–æ—Ç–æ–π –∞–º—É–ª–µ—Ç': {'type': 'daily_bonus', 'value': 1.2, 'description': '+20% –∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥–µ'},
    '–°–µ—Ä–µ–±—Ä—è–Ω—ã–π –∞–º—É–ª–µ—Ç': {'type': 'daily_bonus', 'value': 1.1, 'description': '+10% –∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥–µ'},
    '–ö–æ–ª—å—Ü–æ —É–¥–∞—á–∏': {'type': 'case_bonus', 'value': 1.15, 'description': '+15% –∫ –Ω–∞–≥—Ä–∞–¥–∞–º –∏–∑ –∫–µ–π—Å–æ–≤'},
    '–ë—Ä–∞—Å–ª–µ—Ç –≤–µ–∑–µ–Ω–∏—è': {'type': 'game_bonus', 'value': 1.1, 'description': '+10% –∫ –≤—ã–∏–≥—Ä—ã—à–∞–º –≤ –∏–≥—Ä–∞–Ω'},
    '–ó–∞—â–∏—Ç–Ω—ã–π —Ç–∞–ª–∏—Å–º–∞–Ω': {'type': 'steal_protection', 'value': 0.5, 'description': '-50% –∫ —à–∞–Ω—Å—É –∫—Ä–∞–∂–∏ —É –≤–∞—Å'},
    '–ü–µ—Ä—á–∞—Ç–∫–∞ –≤–æ—Ä–∞': {'type': 'steal_bonus', 'value': 1.2, 'description': '+20% –∫ —à–∞–Ω—Å—É —É—Å–ø–µ—à–Ω–æ–π –∫—Ä–∞–∂–∏'},
    '–ú–∞–≥–∏—á–µ—Å–∫–∏–π —Å–≤–∏—Ç–æ–∫': {'type': 'roulette_bonus', 'value': 1.25, 'description': '+25% –∫ –≤—ã–∏–≥—Ä—ã—à—É –≤ —Ä—É–ª–µ—Ç–∫–µ'},
    '–ö—Ä–∏—Å—Ç–∞–ª–ª –º–∞–Ω—ã': {'type': 'multiplier', 'value': 1.3, 'description': 'x1.3 –∫ –ª—é–±—ã–º –Ω–∞–≥—Ä–∞–¥–∞–º'},
    '–î—Ä–µ–≤–Ω–∏–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç': {'type': 'multiplier', 'value': 1.5, 'description': 'x1.5 –∫ –ª—é–±—ã–º –Ω–∞–≥—Ä–∞–¥–∞–º'},
    '–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π –ø—Ä–µ–¥–º–µ—Ç': {'type': 'multiplier', 'value': 2.0, 'description': 'x2.0 –∫ –ª—é–±—ã–º –Ω–∞–≥—Ä–∞–¥–∞–º'},
    '–°—á–∞—Å—Ç–ª–∏–≤–∞—è –º–æ–Ω–µ—Ç–∞': {'type': 'coinflip_bonus', 'value': 1.2, 'description': '+20% –∫ –≤—ã–∏–≥—Ä—ã—à—É –≤ coinflip'},
    '–ö–∞—Ä—Ç–æ—á–Ω—ã–π —à—É–ª–µ—Ä': {'type': 'blackjack_bonus', 'value': 1.15, 'description': '+15% –∫ –≤—ã–∏–≥—Ä—ã—à—É –≤ –±–ª—ç–∫–¥–∂–µ–∫–µ'},
    '–°–ª–æ—Ç-–º–∞—Å—Ç–µ—Ä': {'type': 'slot_bonus', 'value': 1.25, 'description': '+25% –∫ –≤—ã–∏–≥—Ä—ã—à—É –≤ —Å–ª–æ—Ç–∞—Ö'},
    '–©–∏—Ç –±–æ–≥–∞—Ç—Å—Ç–≤–∞': {'type': 'loss_protection', 'value': 0.8, 'description': '-20% –∫ –ø—Ä–æ–∏–≥—Ä—ã—à–∞–º'},
    '–§–ª–∞–∫–æ–Ω –∑–µ–ª—å—è': {'type': 'quest_bonus', 'value': 1.2, 'description': '+20% –∫ –Ω–∞–≥—Ä–∞–¥–∞–º –∑–∞ –∫–≤–µ—Å—Ç—ã'},
    '–ó–µ–ª—å–µ —É–¥–∞—á–∏': {'type': 'all_bonus', 'value': 1.1, 'description': '+10% –∫–æ –≤—Å–µ–º –Ω–∞–≥—Ä–∞–¥–∞–º'},
    '–†—É–Ω–∞ –±–æ–≥–∞—Ç—Å—Ç–≤–∞': {'type': 'transfer_bonus', 'value': 0.9, 'description': '-10% –∫ –∫–æ–º–∏—Å—Å–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤'},
    '–¢–æ—Ç–µ–º –∑–∞—â–∏—Ç—ã': {'type': 'duel_bonus', 'value': 1.2, 'description': '+20% –∫ —à–∞–Ω—Å—É –ø–æ–±–µ–¥—ã –≤ –¥—É—ç–ª—è—Ö'},
    '–û–∂–µ—Ä–µ–ª—å–µ –º—É–¥—Ä–æ—Å—Ç–∏': {'type': 'xp_bonus', 'value': 1.15, 'description': '+15% –∫ –æ–ø—ã—Ç—É'},
    '–ü–ª–∞—â —Ç–µ–Ω–∏': {'type': 'steal_chance', 'value': 1.15, 'description': '+15% –∫ —à–∞–Ω—Å—É –∫—Ä–∞–∂–∏'}
}

# –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
ACHIEVEMENTS = {
    'first_daily': {'name': '–ü–µ—Ä–≤—ã–π —à–∞–≥', 'description': '–ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä–≤—É—é –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É', 'reward': 100},
    'rich': {'name': '–ë–æ–≥–∞—á', 'description': '–ù–∞–∫–æ–ø–∏—Ç–µ 10,000 –º–æ–Ω–µ—Ç', 'reward': 500},
    'millionaire': {'name': '–ú–∏–ª–ª–∏–æ–Ω–µ—Ä', 'description': '–ù–∞–∫–æ–ø–∏—Ç–µ 100,000 –º–æ–Ω–µ—Ç', 'reward': 5000},
    'gambler': {'name': '–ê–∑–∞—Ä—Ç–Ω—ã–π –∏–≥—Ä–æ–∫', 'description': '–í—ã–∏–≥—Ä–∞–π—Ç–µ –≤ —Ä—É–ª–µ—Ç–∫—É 25 —Ä–∞–∑', 'reward': 1000},
    'thief': {'name': '–í–æ—Ä', 'description': '–£—Å–ø–µ—à–Ω–æ —É–∫—Ä–∞–¥–∏—Ç–µ –º–æ–Ω–µ—Ç—ã 20 —Ä–∞–∑', 'reward': 800},
    'case_opener': {'name': '–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä', 'description': '–û—Ç–∫—Ä–æ–π—Ç–µ 50 –∫–µ–π—Å–æ–≤', 'reward': 1500},
    'case_master': {'name': '–ú–∞—Å—Ç–µ—Ä –∫–µ–π—Å–æ–≤', 'description': '–û—Ç–∫—Ä–æ–π—Ç–µ 200 –∫–µ–π—Å–æ–≤', 'reward': 5000},
    'duel_master': {'name': '–ú–∞—Å—Ç–µ—Ä –¥—É—ç–ª–µ–π', 'description': '–í—ã–∏–≥—Ä–∞–π—Ç–µ 25 –¥—É—ç–ª–µ–π', 'reward': 1200},
    'slot_king': {'name': '–ö–æ—Ä–æ–ª—å —Å–ª–æ—Ç–æ–≤', 'description': '–í—ã–∏–≥—Ä–∞–π—Ç–µ –¥–∂–µ–∫–ø–æ—Ç –≤ —Å–ª–æ—Ç–∞—Ö', 'reward': 3000},
    'blackjack_pro': {'name': '–ü—Ä–æ—Ñ–∏ –≤ –±–ª—ç–∫–¥–∂–µ–∫–µ', 'description': '–í—ã–∏–≥—Ä–∞–π—Ç–µ 10 —Ä–∞–∑ –≤ –±–ª—ç–∫–¥–∂–µ–∫', 'reward': 2000},
    'coinflip_champ': {'name': '–ß–µ–º–ø–∏–æ–Ω –º–æ–Ω–µ—Ç–∫–∏', 'description': '–í—ã–∏–≥—Ä–∞–π—Ç–µ 30 —Ä–∞–∑ –≤ –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã', 'reward': 1500},
    'trader': {'name': '–¢–æ—Ä–≥–æ–≤–µ—Ü', 'description': '–ü—Ä–æ–¥–∞–π—Ç–µ 15 –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ', 'reward': 800},
    'gifter': {'name': '–©–µ–¥—Ä—ã–π', 'description': '–ü–æ–¥–∞—Ä–∏—Ç–µ 10 –∫–µ–π—Å–æ–≤', 'reward': 1000},
    'veteran': {'name': '–í–µ—Ç–µ—Ä–∞–Ω', 'description': '–ü–æ–ª—É—á–∏—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É 30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥', 'reward': 3000},
    'lucky': {'name': '–í–µ–∑—É–Ω—á–∏–∫', 'description': '–í—ã–∏–≥—Ä–∞–π—Ç–µ 3 —Ä–∞–∑–∞ –ø–æ–¥—Ä—è–¥ –≤ –ª—é–±—É—é –∏–≥—Ä—É', 'reward': 2000},
    'item_collector': {'name': '–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä –ø—Ä–µ–¥–º–µ—Ç–æ–≤', 'description': '–°–æ–±–µ—Ä–∏—Ç–µ 10 —Ä–∞–∑–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤', 'reward': 1500},
    'buff_master': {'name': '–ú–∞—Å—Ç–µ—Ä –±–∞—Ñ–æ–≤', 'description': '–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ 5 —Ä–∞–∑–Ω—ã—Ö –±–∞—Ñ–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ', 'reward': 2000}
}

# –£–õ–£–ß–®–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ö–í–ï–°–¢–û–í
QUESTS = {
    'daily_rich': {'name': '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–≥–∞—á', 'description': '–ü–æ–ª—É—á–∏—Ç–µ 3 –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥—ã –ø–æ–¥—Ä—è–¥', 'reward': 500, 'type': 'daily_streak', 'target': 3},
    'gambling_king': {'name': '–ö–æ—Ä–æ–ª—å –∞–∑–∞—Ä—Ç–∞', 'description': '–í—ã–∏–≥—Ä–∞–π—Ç–µ 5,000 –º–æ–Ω–µ—Ç –≤ –∞–∑–∞—Ä—Ç–Ω—ã—Ö –∏–≥—Ä–∞—Ö', 'reward': 1000, 'type': 'gambling_win', 'target': 5000},
    'case_hunter': {'name': '–û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ –∫–µ–π—Å–∞–º–∏', 'description': '–û—Ç–∫—Ä–æ–π—Ç–µ 10 –∫–µ–π—Å–æ–≤ –ª—é–±–æ–≥–æ —Ç–∏–ø–∞', 'reward': 800, 'type': 'cases_opened', 'target': 10},
    'market_expert': {'name': '–≠–∫—Å–ø–µ—Ä—Ç —Ä—ã–Ω–∫–∞', 'description': '–ü—Ä–æ–¥–∞–π—Ç–µ 3 –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ', 'reward': 600, 'type': 'market_sales', 'target': 3},
    'duel_champion': {'name': '–ß–µ–º–ø–∏–æ–Ω –¥—É—ç–ª–µ–π', 'description': '–í—ã–∏–≥—Ä–∞–π—Ç–µ 5 –¥—É—ç–ª–µ–π', 'reward': 750, 'type': 'duels_won', 'target': 5},
    'item_collector_quest': {'name': '–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä', 'description': '–°–æ–±–µ—Ä–∏—Ç–µ 3 —Ä–∞–∑–Ω—ã—Ö –º–∞–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–∞', 'reward': 900, 'type': 'unique_items', 'target': 3},
    'thief_apprentice': {'name': '–£—á–µ–Ω–∏–∫ –≤–æ—Ä–∞', 'description': '–£—Å–ø–µ—à–Ω–æ —É–∫—Ä–∞–¥–∏—Ç–µ –º–æ–Ω–µ—Ç—ã 5 —Ä–∞–∑', 'reward': 700, 'type': 'steals_successful', 'target': 5},
    'gambler_novice': {'name': '–ù–æ–≤–∏—á–æ–∫ –≤ –∞–∑–∞—Ä—Ç–µ', 'description': '–í—ã–∏–≥—Ä–∞–π—Ç–µ –≤ —Ä—É–ª–µ—Ç–∫—É 3 —Ä–∞–∑–∞', 'reward': 550, 'type': 'roulette_wins', 'target': 3},
    'generous_soul': {'name': '–©–µ–¥—Ä–∞—è –¥—É—à–∞', 'description': '–ü–æ–¥–∞—Ä–∏—Ç–µ 3 –∫–µ–π—Å–∞ –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º', 'reward': 650, 'type': 'gifts_sent', 'target': 3},
    'blackjack_beginner': {'name': '–ù–∞—á–∏–Ω–∞—é—â–∏–π –≤ –±–ª—ç–∫–¥–∂–µ–∫–µ', 'description': '–í—ã–∏–≥—Ä–∞–π—Ç–µ –≤ –±–ª—ç–∫–¥–∂–µ–∫ 2 —Ä–∞–∑–∞', 'reward': 450, 'type': 'blackjack_wins', 'target': 2},
    'slot_enthusiast': {'name': '–≠–Ω—Ç—É–∑–∏–∞—Å—Ç —Å–ª–æ—Ç–æ–≤', 'description': '–í—ã–∏–≥—Ä–∞–π—Ç–µ –≤ —Å–ª–æ—Ç–∞—Ö 5 —Ä–∞–∑', 'reward': 500, 'type': 'slot_wins', 'target': 5},
    'coinflip_pro': {'name': '–ü—Ä–æ—Ñ–∏ –≤ –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–Ω–∏–∏', 'description': '–í—ã–∏–≥—Ä–∞–π—Ç–µ –≤ coinflip 7 —Ä–∞–∑', 'reward': 600, 'type': 'coinflip_wins', 'target': 7}
}

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_data_safe(user_data):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞"""
    return {
        'user_id': user_data[0] if len(user_data) > 0 else 0,
        'balance': user_data[1] if len(user_data) > 1 else 100,
        'daily_streak': user_data[2] if len(user_data) > 2 else 0,
        'last_daily': user_data[3] if len(user_data) > 3 else None,
        'inventory': user_data[4] if len(user_data) > 4 else '{"cases": {}, "items": {}}',
        'created_at': user_data[5] if len(user_data) > 5 else datetime.datetime.now()
    }

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å Database –¥–ª—è PostgreSQL
class Database:
    def __init__(self):
        self.conn = None
        self.connect()
        self.create_tables()
    
    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        max_retries = 3
        for attempt in range(max_retries):
            try:
                self.conn = psycopg2.connect(DATABASE_URL, sslmode='require')
                print("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL!")
                return
            except Exception as e:
                print(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                if attempt < max_retries - 1:
                    print("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
                    import time
                    time.sleep(5)
                else:
                    print("üí• –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫")
                    raise

    def get_user(self, user_id):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            cursor = self.conn.cursor()
            cursor.execute('SELECT * FROM users WHERE user_id = %s', (user_id,))
            user = cursor.fetchone()
            
            if not user:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cursor.execute('''
                    INSERT INTO users (user_id, balance, inventory) 
                    VALUES (%s, %s, %s)
                ''', (user_id, 100, json.dumps({"cases": {}, "items": {}})))
                self.conn.commit()
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cursor.execute('SELECT * FROM users WHERE user_id = %s', (user_id,))
                user = cursor.fetchone()
            
            return user
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_user –¥–ª—è {user_id}: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ—Ä—Ç–µ–∂ —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            return (user_id, 100, 0, None, json.dumps({"cases": {}, "items": {}}), datetime.datetime.now())

    def get_user_safe(self, user_id):
        """–ê–ª–∏–∞—Å –¥–ª—è get_user –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        return self.get_user(user_id)
    
    def update_balance(self, user_id, amount):
        cursor = self.conn.cursor()
        cursor.execute('UPDATE users SET balance = balance + %s WHERE user_id = %s', (amount, user_id))
        self.conn.commit()
    
    def log_transaction(self, user_id, transaction_type, amount, target_user_id=None, description=""):
        cursor = self.conn.cursor()
        cursor.execute('''
            INSERT INTO transactions (user_id, type, amount, target_user_id, description)
            VALUES (%s, %s, %s, %s, %s)
        ''', (user_id, transaction_type, amount, target_user_id, description))
        self.conn.commit()
    
    def get_cases(self):
        cursor = self.conn.cursor()
        cursor.execute('SELECT * FROM cases ORDER BY price ASC')
        return cursor.fetchall()
    
    def get_case(self, case_id):
        cursor = self.conn.cursor()
        cursor.execute('SELECT * FROM cases WHERE id = %s', (case_id,))
        return cursor.fetchone()
    
    def create_case(self, name, price, rewards):
        cursor = self.conn.cursor()
        cursor.execute('INSERT INTO cases (name, price, rewards) VALUES (%s, %s, %s) RETURNING id', 
                      (name, price, json.dumps(rewards)))
        case_id = cursor.fetchone()[0]
        self.conn.commit()
        return case_id
    
    def update_case(self, case_id, name, price, rewards):
        cursor = self.conn.cursor()
        cursor.execute('UPDATE cases SET name = %s, price = %s, rewards = %s WHERE id = %s', 
                      (name, price, json.dumps(rewards), case_id))
        self.conn.commit()
    
    def delete_case(self, case_id):
        cursor = self.conn.cursor()
        cursor.execute('DELETE FROM cases WHERE id = %s', (case_id,))
        self.conn.commit()
    
    def get_items(self):
        cursor = self.conn.cursor()
        cursor.execute('SELECT * FROM items')
        return cursor.fetchall()
    
    def get_item(self, item_id):
        cursor = self.conn.cursor()
        cursor.execute('SELECT * FROM items WHERE id = %s', (item_id,))
        return cursor.fetchone()
    
    def get_item_by_name(self, item_name):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ –∏–º–µ–Ω–∏"""
        try:
            cursor = self.conn.cursor()
            cursor.execute('SELECT * FROM items WHERE name = %s', (item_name,))
            item = cursor.fetchone()
            return item
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_item_by_name –¥–ª—è {item_name}: {e}")
            return None
    
    def add_item_to_inventory(self, user_id, item_name):
        cursor = self.conn.cursor()
        
        cursor.execute('SELECT id FROM items WHERE name = %s', (item_name,))
        item_result = cursor.fetchone()
        
        if not item_result:
            # –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ –±–µ–∑ –±–∞—Ñ–∞
            cursor.execute('INSERT INTO items (name, description, value, rarity) VALUES (%s, %s, %s, %s) RETURNING id', 
                          (item_name, '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç', 100, 'common'))
            item_id = cursor.fetchone()[0]
        else:
            item_id = item_result[0]
        
        cursor.execute('SELECT inventory FROM users WHERE user_id = %s', (user_id,))
        result = cursor.fetchone()
        
        if result and result[0]:
            inventory_data = json.loads(result[0])
        else:
            inventory_data = {"cases": {}, "items": {}}
            
        if "items" not in inventory_data:
            inventory_data["items"] = {}
            
        item_key = str(item_id)
        if item_key in inventory_data["items"]:
            inventory_data["items"][item_key] += 1
        else:
            inventory_data["items"][item_key] = 1
        
        cursor.execute('UPDATE users SET inventory = %s WHERE user_id = %s', 
                      (json.dumps(inventory_data), user_id))
        self.conn.commit()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        self.update_user_stat(user_id, 'items_collected')
    
    def remove_item_from_inventory(self, user_id, item_name):
        cursor = self.conn.cursor()
        
        cursor.execute('SELECT id FROM items WHERE name = %s', (item_name,))
        item_result = cursor.fetchone()
        
        if not item_result:
            return False
            
        item_id = str(item_result[0])
        
        cursor.execute('SELECT inventory FROM users WHERE user_id = %s', (user_id,))
        result = cursor.fetchone()
        
        if not result or not result[0]:
            return False
            
        inventory_data = json.loads(result[0])
        
        if item_id in inventory_data.get("items", {}):
            if inventory_data["items"][item_id] > 1:
                inventory_data["items"][item_id] -= 1
            else:
                del inventory_data["items"][item_id]
            
            cursor.execute('UPDATE users SET inventory = %s WHERE user_id = %s', 
                          (json.dumps(inventory_data), user_id))
            self.conn.commit()
            return True
        return False

    def add_case_to_inventory(self, user_id, case_id, case_name, source="gifted"):
        cursor = self.conn.cursor()
        cursor.execute('SELECT inventory FROM users WHERE user_id = %s', (user_id,))
        result = cursor.fetchone()
        
        if result and result[0]:
            inventory = json.loads(result[0])
        else:
            inventory = {"cases": {}, "items": {}}
        
        if "cases" not in inventory:
            inventory["cases"] = {}
        
        case_key = f"case_{case_id}"
        if case_key in inventory["cases"]:
            inventory["cases"][case_key]["count"] += 1
        else:
            inventory["cases"][case_key] = {
                "name": case_name,
                "count": 1,
                "source": source
            }
        
        cursor.execute('UPDATE users SET inventory = %s WHERE user_id = %s', (json.dumps(inventory), user_id))
        self.conn.commit()
    
    def get_user_inventory(self, user_id):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            cursor = self.conn.cursor()
            cursor.execute('SELECT inventory FROM users WHERE user_id = %s', (user_id,))
            result = cursor.fetchone()
            
            if result and result[0]:
                try:
                    return json.loads(result[0])
                except json.JSONDecodeError:
                    return {"cases": {}, "items": {}}
            return {"cases": {}, "items": {}}
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_user_inventory –¥–ª—è {user_id}: {e}")
            return {"cases": {}, "items": {}}

    def get_user_inventory_safe(self, user_id):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            cursor = self.conn.cursor()
            cursor.execute('SELECT inventory FROM users WHERE user_id = %s', (user_id,))
            result = cursor.fetchone()
            
            if result and result[0]:
                try:
                    inventory_data = json.loads(result[0])
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
                    if not isinstance(inventory_data, dict):
                        inventory_data = {"cases": {}, "items": {}}
                    if "cases" not in inventory_data:
                        inventory_data["cases"] = {}
                    if "items" not in inventory_data:
                        inventory_data["items"] = {}
                    return inventory_data
                except json.JSONDecodeError:
                    return {"cases": {}, "items": {}}
            return {"cases": {}, "items": {}}
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_user_inventory_safe: {e}")
            return {"cases": {}, "items": {}}
    
    def get_all_items_safe(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
        try:
            cursor = self.conn.cursor()
            cursor.execute('SELECT * FROM items')
            return cursor.fetchall()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_all_items_safe: {e}")
            return []
    
    def remove_case_from_inventory(self, user_id, case_id):
        cursor = self.conn.cursor()
        cursor.execute('SELECT inventory FROM users WHERE user_id = %s', (user_id,))
        result = cursor.fetchone()
        
        if not result or not result[0]:
            return False
            
        inventory = json.loads(result[0])
        
        case_key = f"case_{case_id}"
        if case_key in inventory.get("cases", {}):
            if inventory["cases"][case_key]["count"] > 1:
                inventory["cases"][case_key]["count"] -= 1
            else:
                del inventory["cases"][case_key]
            
            cursor.execute('UPDATE users SET inventory = %s WHERE user_id = %s', (json.dumps(inventory), user_id))
            self.conn.commit()
            return True
        return False

    def update_user_stat(self, user_id, stat_name, increment=1):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
        try:
            cursor = self.conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            cursor.execute('SELECT 1 FROM user_stats WHERE user_id = %s', (user_id,))
            if not cursor.fetchone():
                cursor.execute('INSERT INTO user_stats (user_id) VALUES (%s)', (user_id,))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            cursor.execute(f'''
                UPDATE user_stats SET {stat_name} = {stat_name} + %s 
                WHERE user_id = %s
            ''', (increment, user_id))
            
            self.conn.commit()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            return self.check_achievements(user_id)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ update_user_stat: {e}")
            return []
    
    def check_achievements(self, user_id):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –≤—ã–¥–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            cursor = self.conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute('SELECT * FROM user_stats WHERE user_id = %s', (user_id,))
            stats = cursor.fetchone()
            
            if not stats:
                return []
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = self.get_user(user_id)
            balance = user_data[1] if len(user_data) > 1 else 0
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            inventory = self.get_user_inventory(user_id)
            unique_items = len(inventory.get("items", {}))
            
            # –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            cursor.execute('SELECT achievement_id FROM achievements WHERE user_id = %s', (user_id,))
            user_achievements = [row[0] for row in cursor.fetchall()]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
            achievements_to_add = []
            
            # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –±–∞–ª–∞–Ω—Å—É
            if 'rich' not in user_achievements and balance >= 10000:
                achievements_to_add.append('rich')
            if 'millionaire' not in user_achievements and balance >= 100000:
                achievements_to_add.append('millionaire')
            
            # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –∫–µ–π—Å–∞–º
            if 'case_opener' not in user_achievements and stats[1] >= 50:  # cases_opened
                achievements_to_add.append('case_opener')
            if 'case_master' not in user_achievements and stats[1] >= 200:
                achievements_to_add.append('case_master')
            
            # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –∏–≥—Ä–∞–º
            if 'gambler' not in user_achievements and stats[5] >= 25:  # roulette_wins
                achievements_to_add.append('gambler')
            if 'thief' not in user_achievements and stats[3] >= 20:  # steals_successful
                achievements_to_add.append('thief')
            if 'duel_master' not in user_achievements and stats[2] >= 25:  # duels_won
                achievements_to_add.append('duel_master')
            if 'slot_king' not in user_achievements and stats[6] >= 1:  # slot_wins (–¥–∂–µ–∫–ø–æ—Ç)
                achievements_to_add.append('slot_king')
            if 'blackjack_pro' not in user_achievements and stats[7] >= 10:  # blackjack_wins
                achievements_to_add.append('blackjack_pro')
            if 'coinflip_champ' not in user_achievements and stats[8] >= 30:  # coinflip_wins
                achievements_to_add.append('coinflip_champ')
            
            # –î—Ä—É–≥–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            if 'trader' not in user_achievements and stats[11] >= 15:  # market_sales
                achievements_to_add.append('trader')
            if 'gifter' not in user_achievements and stats[12] >= 10:  # gifts_sent
                achievements_to_add.append('gifter')
            if 'veteran' not in user_achievements and stats[9] >= 30:  # daily_claimed
                achievements_to_add.append('veteran')
            if 'lucky' not in user_achievements and stats[13] >= 3:  # consecutive_wins
                achievements_to_add.append('lucky')
            if 'item_collector' not in user_achievements and unique_items >= 10:
                achievements_to_add.append('item_collector')
            if 'buff_master' not in user_achievements and self.get_active_buffs_count(user_id) >= 5:
                achievements_to_add.append('buff_master')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –≤—ã–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã
            for achievement_id in achievements_to_add:
                cursor.execute('INSERT INTO achievements (user_id, achievement_id) VALUES (%s, %s)', 
                              (user_id, achievement_id))
                
                # –í—ã–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
                reward = ACHIEVEMENTS[achievement_id]['reward']
                self.update_balance(user_id, reward)
                self.log_transaction(user_id, 'achievement_reward', reward, description=f"–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: {ACHIEVEMENTS[achievement_id]['name']}")
            
            self.conn.commit()
            
            return achievements_to_add
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ check_achievements: {e}")
            return []

    def get_item_name_by_id(self, item_id):
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ ID"""
        try:
            if not item_id or not str(item_id).isdigit():
                return f"–ü—Ä–µ–¥–º–µ—Ç ID:{item_id}"
                
            item_data = self.get_item(int(item_id))
            if item_data and len(item_data) > 1 and item_data[1]:
                return item_data[1]  # –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
            return f"–ü—Ä–µ–¥–º–µ—Ç ID:{item_id}"
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ {item_id}: {e}")
            return f"–ü—Ä–µ–¥–º–µ—Ç ID:{item_id}"

    def update_consecutive_wins(self, user_id, win=True):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–±–µ–¥"""
        cursor = self.conn.cursor()
        
        if win:
            cursor.execute('''
                UPDATE user_stats 
                SET consecutive_wins = consecutive_wins + 1, last_win_time = CURRENT_TIMESTAMP
                WHERE user_id = %s
            ''', (user_id,))
        else:
            cursor.execute('''
                UPDATE user_stats 
                SET consecutive_wins = 0
                WHERE user_id = %s
            ''', (user_id,))
        
        self.conn.commit()
    
    def get_user_buffs(self, user_id):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –±–∞—Ñ–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            inventory = self.get_user_inventory(user_id)
            buffs = {}
            
            for item_id, count in inventory.get("items", {}).items():
                try:
                    if not item_id.isdigit():
                        continue
                        
                    item_data = self.get_item(int(item_id))
                    if item_data and len(item_data) > 6 and item_data[5]:  # buff_type
                        buff_type = item_data[5]
                        buff_value = item_data[6] if len(item_data) > 6 else 1.0
                        
                        # –ë–µ—Ä–µ–º —Å–∞–º—ã–π —Å–∏–ª—å–Ω—ã–π –±–∞—Ñ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
                        if buff_type not in buffs or buff_value > buffs[buff_type]['value']:
                            buffs[buff_type] = {
                                'value': buff_value,
                                'description': item_data[7] if len(item_data) > 7 else "–ë–æ–Ω—É—Å",
                                'item_name': item_data[1] if len(item_data) > 1 else "–ü—Ä–µ–¥–º–µ—Ç"
                            }
                except (ValueError, IndexError) as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ {item_id}: {e}")
                    continue
            
            return buffs
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_user_buffs –¥–ª—è {user_id}: {e}")
            return {}
    
    def get_active_buffs_count(self, user_id):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±–∞—Ñ–æ–≤"""
        buffs = self.get_user_buffs(user_id)
        return len(buffs)
    
    def apply_buff_to_amount(self, user_id, base_amount, buff_type):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –±–∞—Ñ –∫ —Å—É–º–º–µ, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        buffs = self.get_user_buffs(user_id)
        if buff_type in buffs:
            return int(base_amount * buffs[buff_type]['value'])
        return base_amount
    
    def apply_buff_to_chance(self, user_id, base_chance, buff_type):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –±–∞—Ñ –∫ —à–∞–Ω—Å—É, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        buffs = self.get_user_buffs(user_id)
        if buff_type in buffs:
            return base_chance * buffs[buff_type]['value']
        return base_chance
    
    def get_all_users(self):
        cursor = self.conn.cursor()
        cursor.execute('SELECT * FROM users ORDER BY balance DESC')
        return cursor.fetchall()
    
    def get_all_transactions(self, limit=50):
        cursor = self.conn.cursor()
        cursor.execute('SELECT * FROM transactions ORDER BY timestamp DESC LIMIT %s', (limit,))
        return cursor.fetchall()
    
    def get_all_items(self):
        cursor = self.conn.cursor()
        cursor.execute('SELECT * FROM items')
        return cursor.fetchall()

    def get_user_quests(self, user_id):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–≤–µ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            cursor = self.conn.cursor()
            cursor.execute('SELECT quest_id, progress, completed, assigned_at FROM quests WHERE user_id = %s', (user_id,))
            return cursor.fetchall()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_user_quests: {e}")
            return []
    
    def add_user_quest(self, user_id, quest_id):
        """–î–æ–±–∞–≤–∏—Ç—å –∫–≤–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            cursor = self.conn.cursor()
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º 0 –≤–º–µ—Å—Ç–æ False –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ç–∏–ø–æ–º integer
            cursor.execute('''
                INSERT INTO quests (user_id, quest_id, progress, completed, assigned_at) 
                VALUES (%s, %s, %s, %s, %s)
                ON CONFLICT (user_id, quest_id) DO NOTHING
            ''', (user_id, quest_id, 0, 0, datetime.datetime.now().isoformat()))
            self.conn.commit()
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ add_user_quest: {e}")
            return False
    
    def update_quest_progress(self, user_id, quest_id, progress, completed=False):
        """–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–≤–µ—Å—Ç–∞"""
        try:
            cursor = self.conn.cursor()
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º boolean –≤ integer –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            completed_int = 1 if completed else 0
            cursor.execute('''
                UPDATE quests SET progress = %s, completed = %s 
                WHERE user_id = %s AND quest_id = %s
            ''', (progress, completed_int, user_id, quest_id))
            self.conn.commit()
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ update_quest_progress: {e}")
            return False

    def get_user_active_quest(self, user_id):
        """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–≤–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            cursor = self.conn.cursor()
            cursor.execute('SELECT quest_id, progress, completed, assigned_at FROM quests WHERE user_id = %s AND completed = 0', (user_id,))
            return cursor.fetchone()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_user_active_quest: {e}")
            return None

    def check_quest_completion(self, user_id, quest_type, current_value):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å"""
        try:
            cursor = self.conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–≤–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            active_quest = self.get_user_active_quest(user_id)
            if not active_quest:
                return False
                
            quest_id, progress, completed, assigned_at = active_quest
            
            if quest_id not in QUESTS:
                return False
                
            quest_data = QUESTS[quest_id]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∫–≤–µ—Å—Ç–∞
            if quest_data.get('type') != quest_type:
                return False
                
            target = quest_data.get('target', 0)
            new_progress = min(current_value, target)
            progress_percent = int((new_progress / target) * 100) if target > 0 else 0
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            cursor.execute('''
                UPDATE quests SET progress = %s 
                WHERE user_id = %s AND quest_id = %s
            ''', (progress_percent, user_id, quest_id))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            if new_progress >= target:
                cursor.execute('''
                    UPDATE quests SET completed = 1 
                    WHERE user_id = %s AND quest_id = %s
                ''', (user_id, quest_id))
                
                # –í—ã–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É
                reward = quest_data['reward']
                reward = self.apply_buff_to_amount(user_id, reward, 'quest_bonus')
                reward = self.apply_buff_to_amount(user_id, reward, 'multiplier')
                reward = self.apply_buff_to_amount(user_id, reward, 'all_bonus')
                
                self.update_balance(user_id, reward)
                self.log_transaction(user_id, 'quest_reward', reward, description=f"–ö–≤–µ—Å—Ç: {quest_data['name']}")
                
                self.conn.commit()
                return True
            
            self.conn.commit()
            return False
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ check_quest_completion: {e}")
            return False

    def can_get_new_quest(self, user_id):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –∫–≤–µ—Å—Ç"""
        try:
            cursor = self.conn.cursor()
            cursor.execute('SELECT assigned_at FROM quests WHERE user_id = %s ORDER BY assigned_at DESC LIMIT 1', (user_id,))
            result = cursor.fetchone()
            
            if not result:
                return True
                
            last_quest_time = result[0]
            if isinstance(last_quest_time, str):
                last_quest_time = datetime.datetime.fromisoformat(last_quest_time)
                
            time_since_last_quest = datetime.datetime.now() - last_quest_time
            return time_since_last_quest.total_seconds() >= 3600  # 1 —á–∞—Å
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ can_get_new_quest: {e}")
            return True

def create_tables(self):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        cursor = self.conn.cursor()
        
        print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id BIGINT PRIMARY KEY,
                balance INTEGER DEFAULT 100,
                daily_streak INTEGER DEFAULT 0,
                last_daily TEXT,
                inventory TEXT DEFAULT '{}',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS transactions (
                id SERIAL PRIMARY KEY,
                user_id BIGINT,
                type TEXT,
                amount INTEGER,
                target_user_id BIGINT,
                description TEXT,
                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∫–µ–π—Å–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS cases (
                id SERIAL PRIMARY KEY,
                name TEXT,
                price INTEGER,
                rewards TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –º–∞—Ä–∫–µ—Ç–∞
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS market (
                id SERIAL PRIMARY KEY,
                seller_id BIGINT,
                item_name TEXT,
                price INTEGER,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS achievements (
                user_id BIGINT,
                achievement_id TEXT,
                unlocked_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                PRIMARY KEY (user_id, achievement_id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∫–≤–µ—Å—Ç–æ–≤ - –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º INTEGER –≤–º–µ—Å—Ç–æ BOOLEAN
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS quests (
                user_id BIGINT,
                quest_id TEXT,
                progress INTEGER DEFAULT 0,
                completed INTEGER DEFAULT 0,
                assigned_at TIMESTAMP,
                PRIMARY KEY (user_id, quest_id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥—É—ç–ª–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS duels (
                id SERIAL PRIMARY KEY,
                challenger_id BIGINT,
                target_id BIGINT,
                bet INTEGER,
                status TEXT DEFAULT 'pending',
                winner_id BIGINT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS items (
                id SERIAL PRIMARY KEY,
                name TEXT,
                description TEXT,
                value INTEGER,
                rarity TEXT,
                buff_type TEXT,
                buff_value REAL,
                buff_description TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS user_stats (
                user_id BIGINT PRIMARY KEY,
                cases_opened INTEGER DEFAULT 0,
                duels_won INTEGER DEFAULT 0,
                steals_successful INTEGER DEFAULT 0,
                steals_failed INTEGER DEFAULT 0,
                roulette_wins INTEGER DEFAULT 0,
                slot_wins INTEGER DEFAULT 0,
                blackjack_wins INTEGER DEFAULT 0,
                coinflip_wins INTEGER DEFAULT 0,
                daily_claimed INTEGER DEFAULT 0,
                total_earned INTEGER DEFAULT 0,
                market_sales INTEGER DEFAULT 0,
                gifts_sent INTEGER DEFAULT 0,
                consecutive_wins INTEGER DEFAULT 0,
                items_collected INTEGER DEFAULT 0,
                last_win_time TIMESTAMP
            )
        ''')
        
        self.conn.commit()
        print("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö - –í–´–ó–´–í–ê–ï–ú –ü–†–ê–í–ò–õ–¨–ù–´–ô –ú–ï–¢–û–î
        self._initialize_default_data()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
        self.conn.rollback()
        raise

def _initialize_default_data(self):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –£–õ–£–ß–®–ï–ù–ù–´–ú–ò –ö–ï–ô–°–ê–ú–ò"""
    try:
        cursor = self.conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–µ–π—Å–æ–≤
        cursor.execute('SELECT COUNT(*) FROM cases')
        current_count = cursor.fetchone()[0]
        print(f"üîç –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–µ–π—Å–æ–≤ –≤ –±–∞–∑–µ: {current_count}")
        
        # –ï—Å–ª–∏ –∫–µ–π—Å–æ–≤ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
        if current_count == 0:
            print("üîÑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –∫–µ–π—Å–æ–≤...")
            
            improved_cases = [
                ('üì¶ –ù–∞—á–∏–Ω–∞—é—â–∏–π –∫–µ–π—Å', 25, json.dumps([
                    {'type': 'coins', 'amount': [10, 30], 'chance': 0.6, 'description': '–ù–µ–±–æ–ª—å—à–∞—è —Å—É–º–º–∞ –º–æ–Ω–µ—Ç'},
                    {'type': 'coins', 'amount': [31, 80], 'chance': 0.3, 'description': '–°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ –º–æ–Ω–µ—Ç'},
                    {'type': 'coins', 'amount': [81, 150], 'chance': 0.1, 'description': '–•–æ—Ä–æ—à–∞—è —Å—É–º–º–∞ –º–æ–Ω–µ—Ç'}
                ])),
                ('üì¶ –ú–∞–ª—ã–π –∫–µ–π—Å', 50, json.dumps([
                    {'type': 'coins', 'amount': [20, 50], 'chance': 0.5, 'description': '–ù–µ–±–æ–ª—å—à–∞—è —Å—É–º–º–∞ –º–æ–Ω–µ—Ç'},
                    {'type': 'coins', 'amount': [51, 120], 'chance': 0.3, 'description': '–°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ –º–æ–Ω–µ—Ç'},
                    {'type': 'coins', 'amount': [121, 250], 'chance': 0.15, 'description': '–•–æ—Ä–æ—à–∞—è —Å—É–º–º–∞ –º–æ–Ω–µ—Ç'},
                    {'type': 'special_item', 'name': '–°–µ—Ä–µ–±—Ä—è–Ω—ã–π –∞–º—É–ª–µ—Ç', 'chance': 0.05, 'description': '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É –Ω–∞ 10%'}
                ])),
                ('‚ö° –ë—ã—Å—Ç—Ä—ã–π –∫–µ–π—Å', 75, json.dumps([
                    {'type': 'coins', 'amount': [30, 80], 'chance': 0.7, 'description': '–ë—ã—Å—Ç—Ä—ã–µ –º–æ–Ω–µ—Ç—ã'},
                    {'type': 'coins', 'amount': [81, 180], 'chance': 0.2, 'description': '–ë—ã—Å—Ç—Ä–∞—è —Ö–æ—Ä–æ—à–∞—è —Å—É–º–º–∞'},
                    {'type': 'special_item', 'name': '–ü–µ—Ä—á–∞—Ç–∫–∞ –≤–æ—Ä–∞', 'chance': 0.1, 'description': '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —à–∞–Ω—Å –∫—Ä–∞–∂–∏ –Ω–∞ 20%'}
                ])),
                ('üì¶ –°—Ä–µ–¥–Ω–∏–π –∫–µ–π—Å', 150, json.dumps([
                    {'type': 'coins', 'amount': [50, 100], 'chance': 0.4, 'description': '–ù–∞–¥–µ–∂–Ω–∞—è —Å—É–º–º–∞ –º–æ–Ω–µ—Ç'},
                    {'type': 'coins', 'amount': [101, 250], 'chance': 0.3, 'description': '–û—Ç–ª–∏—á–Ω–∞—è —Å—É–º–º–∞ –º–æ–Ω–µ—Ç'},
                    {'type': 'special_item', 'name': '–ó–æ–ª–æ—Ç–æ–π –∞–º—É–ª–µ—Ç', 'chance': 0.15, 'description': '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É –Ω–∞ 20%'},
                    {'type': 'coins', 'amount': [251, 500], 'chance': 0.1, 'description': '–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à'},
                    {'type': 'bonus', 'multiplier': 1.2, 'duration': 12, 'chance': 0.05, 'description': '–í—Ä–µ–º–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å x1.2 –Ω–∞ 12 —á–∞—Å–æ–≤'}
                ])),
                ('üíé –ë–æ–ª—å—à–æ–π –∫–µ–π—Å', 500, json.dumps([
                    {'type': 'coins', 'amount': [200, 400], 'chance': 0.6, 'description': '–°–æ–ª–∏–¥–Ω–∞—è —Å—É–º–º–∞'},
                    {'type': 'coins', 'amount': [401, 1000], 'chance': 0.25, 'description': '–û—á–µ–Ω—å —Ö–æ—Ä–æ—à–∞—è —Å—É–º–º–∞'},
                    {'type': 'special_item', 'name': '–ó–æ–ª–æ—Ç–æ–π –∫–ª—é—á', 'chance': 0.08, 'description': '–û—Å–æ–±—ã–π –ø—Ä–µ–¥–º–µ—Ç'},
                    {'type': 'bonus', 'multiplier': 1.5, 'duration': 24, 'chance': 0.07, 'description': '–í—Ä–µ–º–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å x1.5 –Ω–∞ 24 —á–∞—Å–∞'}
                ])),
                ('üëë –≠–ª–∏—Ç–Ω—ã–π –∫–µ–π—Å', 1000, json.dumps([
                    {'type': 'coins', 'amount': [500, 1000], 'chance': 0.3, 'description': '–≠–ª–∏—Ç–Ω—ã–µ –º–æ–Ω–µ—Ç—ã'},
                    {'type': 'coins', 'amount': [-300, -100], 'chance': 0.2, 'description': '–ù–µ—É–¥–∞—á–∞ (–ø–æ—Ç–µ—Ä—è –º–æ–Ω–µ—Ç)'},
                    {'type': 'special_item', 'name': '–î—Ä–µ–≤–Ω–∏–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç', 'chance': 0.15, 'description': '–ú–æ—â–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞–≥—Ä–∞–¥'},
                    {'type': 'bonus', 'multiplier': 2.0, 'duration': 48, 'chance': 0.1, 'description': '–í—Ä–µ–º–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å x2.0 –Ω–∞ 48 —á–∞—Å–æ–≤'},
                    {'type': 'coins', 'amount': [1001, 3000], 'chance': 0.15, 'description': '–≠–ª–∏—Ç–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à'},
                    {'type': 'coins', 'amount': [3001, 6000], 'chance': 0.1, 'description': '–≠–ª–∏—Ç–Ω—ã–π –¥–∂–µ–∫–ø–æ—Ç'}
                ])),
                ('üîÆ –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–µ–π—Å', 2000, json.dumps([
                    {'type': 'coins', 'amount': [800, 1500], 'chance': 0.3, 'description': '–°–µ–∫—Ä–µ—Ç–Ω—ã–µ –º–æ–Ω–µ—Ç—ã'},
                    {'type': 'coins', 'amount': [-1000, -500], 'chance': 0.15, 'description': '–°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ä–∏—Å–∫'},
                    {'type': 'special_item', 'name': '–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π –ø—Ä–µ–¥–º–µ—Ç', 'chance': 0.15, 'description': '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞–≥—Ä–∞–¥'},
                    {'type': 'bonus', 'multiplier': 3.0, 'duration': 72, 'chance': 0.1, 'description': '–í—Ä–µ–º–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å x3.0 –Ω–∞ 72 —á–∞—Å–∞'},
                    {'type': 'coins', 'amount': [1501, 3000], 'chance': 0.15, 'description': '–°–µ–∫—Ä–µ—Ç–Ω–∞—è —É–¥–∞—á–∞'},
                    {'type': 'coins', 'amount': [4001, 7000], 'chance': 0.15, 'description': '–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª–∞–¥'}
                ]))
            ]
            
            for case in improved_cases:
                cursor.execute('INSERT INTO cases (name, price, rewards) VALUES (%s, %s, %s)', case)
            
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(improved_cases)} —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –∫–µ–π—Å–æ–≤!")
        else:
            print(f"‚úÖ –í –±–∞–∑–µ —É–∂–µ –µ—Å—Ç—å {current_count} –∫–µ–π—Å–æ–≤, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é")
        
        self.conn.commit()
        print("‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        self.conn.rollback()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞–≥—Ä–∞–¥–∞–º–∏
def get_reward(case):
    rand = random.random()
    cumulative = 0
    for reward in case['rewards']:
        cumulative += reward['chance']
        if rand <= cumulative:
            return reward
    return case['rewards'][-1]

async def create_custom_role_webhook(user):
    try:
        channel = bot.get_channel(LOG_CHANNEL_ID)
        if channel:
            webhook = await channel.create_webhook(name=f"Role-{user.name}")
            message = f"üéâ <@{user.id}> –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤–∞–º –≤—ã–ø–∞–ª–∞ –∫–∞—Å—Ç–æ–º —Ä–æ–ª—å –Ω–∞ 2 –¥–Ω—è, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä <@{ADMIN_USER_ID}> —Å–∫–æ—Ä–æ –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç –∏ –≤—ã –≤—ã–±–µ—Ä–µ—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å"
            await webhook.send(
                content=message,
                username="Case System",
                avatar_url=bot.user.avatar.url if bot.user.avatar else None
            )
            await webhook.delete()
            return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ–±—Ö—É–∫–∞ –¥–ª—è —Ä–æ–ª–∏: {e}")
    return False

async def process_reward(user, reward, case):
    if reward['type'] == 'coins':
        amount = random.randint(reward['amount'][0], reward['amount'][1])
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–∞—Ñ—ã –∫ –Ω–∞–≥—Ä–∞–¥–µ –∏–∑ –∫–µ–π—Å–∞
        amount = db.apply_buff_to_amount(user.id, amount, 'case_bonus')
        amount = db.apply_buff_to_amount(user.id, amount, 'multiplier')
        amount = db.apply_buff_to_amount(user.id, amount, 'all_bonus')
        
        db.update_balance(user.id, amount)
        db.log_transaction(user.id, 'case_reward', amount, description=f"–ù–∞–≥—Ä–∞–¥–∞ –∏–∑ {case['name']}")
        return f"üí∞ {amount} {EMOJIS['coin']} - {reward.get('description', '–ú–æ–Ω–µ—Ç—ã')}"
    
    elif reward['type'] == 'custom_role':
        await create_custom_role_webhook(user)
        return "üé≠ –ö–∞—Å—Ç–æ–º–Ω–∞—è —Ä–æ–ª—å! (–°–æ–∑–¥–∞–Ω –∑–∞–ø—Ä–æ—Å –≤ –∫–∞–Ω–∞–ª–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏)"
    
    elif reward['type'] == 'special_item':
        db.add_item_to_inventory(user.id, reward['name'])
        return f"üì¶ {reward['name']} - {reward.get('description', '–û—Å–æ–±—ã–π –ø—Ä–µ–¥–º–µ—Ç')}"
    
    elif reward['type'] == 'bonus':
        return f"üöÄ –ë–æ–Ω—É—Å x{reward['multiplier']} –Ω–∞ {reward['duration']}—á - {reward.get('description', '–í—Ä–µ–º–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å')}"
    
    elif reward['type'] == 'role':
        return f"üëë –†–æ–ª—å: {reward['name']} –Ω–∞ {reward['duration']}—á"
    
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞"

# –ö–õ–ê–°–°–´ –î–õ–Ø –ú–ò–ù–ò-–ò–ì–†

class CaseView(View):
    def __init__(self, case_id, user_id):
        super().__init__(timeout=60)
        self.case_id = case_id
        self.user_id = user_id
        self.opened = False
    
    @discord.ui.button(label='–û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å', style=discord.ButtonStyle.primary, emoji='üéÅ')
    async def open_case(self, interaction: discord.Interaction, button: Button):
        if self.opened:
            return
        
        if interaction.user.id != self.user_id:
            await interaction.response.send_message("–≠—Ç–æ—Ç –∫–µ–π—Å –Ω–µ –¥–ª—è –≤–∞—Å!", ephemeral=True)
            return
        
        self.opened = True
        case_data = db.get_case(self.case_id)
        if not case_data:
            await interaction.response.send_message("–ö–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!", ephemeral=True)
            return
        
        case = {
            'name': case_data[1],
            'price': case_data[2],
            'rewards': json.loads(case_data[3])
        }
        
        user_data = db.get_user(self.user_id)
        user_safe = get_user_data_safe(user_data)
        
        if user_safe['balance'] < case['price']:
            await interaction.response.send_message("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!", ephemeral=True)
            return
        
        # –°–ø–∏–Ω –∞–Ω–∏–º–∞—Ü–∏—è
        embed = discord.Embed(title="üé∞ –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–∞...", color=0xffd700)
        await interaction.response.send_message(embed=embed)
        
        for i in range(3):
            await asyncio.sleep(1)
            embed.description = "üéÅ" * (i + 1)
            await interaction.edit_original_response(embed=embed)
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã
        reward = get_reward(case)
        db.update_balance(self.user_id, -case['price'])
        db.log_transaction(self.user_id, 'case_purchase', -case['price'], description=f"–ö–µ–π—Å: {case['name']}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–æ–≤
        db.update_user_stat(self.user_id, 'cases_opened')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–≤–µ—Å—Ç—ã
        db.check_quest_completion(self.user_id, 'cases_opened', user_safe['balance'])
        
        # –í—ã–¥–∞—á–∞ –Ω–∞–≥—Ä–∞–¥—ã
        reward_text = await process_reward(interaction.user, reward, case)
        
        embed = discord.Embed(
            title=f"üéâ {case['name']} –æ—Ç–∫—Ä—ã—Ç!",
            description=reward_text,
            color=0x00ff00
        )
        embed.set_footer(text=f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {case['price']} {EMOJIS['coin']}")
        
        await interaction.edit_original_response(embed=embed)

# –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ü–ê–ì–ò–ù–ê–¶–ò–Ø –î–õ–Ø –ö–ï–ô–°–û–í
class ImprovedCasesView(View):
    def __init__(self, pages, author_id):
        super().__init__(timeout=120)
        self.pages = pages
        self.current_page = 0
        self.total_pages = len(pages)
        self.author_id = author_id
        self.update_buttons()

    def update_buttons(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫"""
        self.previous_button.disabled = (self.current_page == 0)
        self.next_button.disabled = (self.current_page >= self.total_pages - 1)

    @discord.ui.button(label='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', style=discord.ButtonStyle.secondary)
    async def previous_button(self, interaction: discord.Interaction, button: Button):
        if interaction.user.id != self.author_id:
            await interaction.response.send_message("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏—è!", ephemeral=True)
            return
        
        if self.current_page > 0:
            self.current_page -= 1
            self.update_buttons()
            embed = self.create_embed()
            await interaction.response.edit_message(embed=embed, view=self)

    @discord.ui.button(label='‚û°Ô∏è –í–ø–µ—Ä–µ–¥', style=discord.ButtonStyle.secondary)
    async def next_button(self, interaction: discord.Interaction, button: Button):
        if interaction.user.id != self.author_id:
            await interaction.response.send_message("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏—è!", ephemeral=True)
            return
        
        if self.current_page < self.total_pages - 1:
            self.current_page += 1
            self.update_buttons()
            embed = self.create_embed()
            await interaction.response.edit_message(embed=embed, view=self)

    def create_embed(self):
        page_cases = self.pages[self.current_page]
        embed = discord.Embed(
            title=f"üéÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–µ–π—Å—ã (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {self.current_page + 1}/{self.total_pages})", 
            color=0xff69b4
        )
        
        for case in page_cases:
            try:
                rewards = json.loads(case[3])
                
                # –ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥
                rewards_desc = ""
                for reward in rewards:
                    chance_percent = reward['chance'] * 100
                    if reward['type'] == 'coins':
                        if reward['amount'][0] < 0:
                            rewards_desc += f"‚Ä¢ üíÄ –ü–æ—Ç–µ—Ä—è: {abs(reward['amount'][0])}-{abs(reward['amount'][1])} –º–æ–Ω–µ—Ç ({chance_percent:.1f}%)\n"
                        else:
                            rewards_desc += f"‚Ä¢ üí∞ –ú–æ–Ω–µ—Ç—ã: {reward['amount'][0]}-{reward['amount'][1]} ({chance_percent:.1f}%)\n"
                    elif reward['type'] == 'special_item':
                        rewards_desc += f"‚Ä¢ üéÅ {reward['name']} ({chance_percent:.1f}%)\n"
                    elif reward['type'] == 'bonus':
                        rewards_desc += f"‚Ä¢ ‚≠ê –ë–æ–Ω—É—Å x{reward['multiplier']} ({chance_percent:.1f}%)\n"
                    elif reward['type'] == 'custom_role':
                        rewards_desc += f"‚Ä¢ üëë –ö–∞—Å—Ç–æ–º–Ω–∞—è —Ä–æ–ª—å ({chance_percent:.1f}%)\n"
                
                embed.add_field(
                    name=f"{case[1]} - {case[2]} {EMOJIS['coin']} (ID: {case[0]})",
                    value=rewards_desc,
                    inline=False
                )
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–µ–π—Å–∞ {case[0]}: {e}")
                continue
        
        return embed

# –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin():
    async def predicate(interaction: discord.Interaction) -> bool:
        is_admin = interaction.user.id in ADMIN_IDS
        if not is_admin:
            await interaction.response.send_message(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!",
                ephemeral=True
            )
        return is_admin
    return app_commands.check(predicate)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥
@bot.tree.error
async def on_app_command_error(interaction: discord.Interaction, error: app_commands.AppCommandError):
    if isinstance(error, app_commands.CheckFailure):
        return
    elif isinstance(error, app_commands.CommandNotFound):
        await interaction.response.send_message("‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", ephemeral=True)
    elif isinstance(error, app_commands.MissingPermissions):
        await interaction.response.send_message("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!", ephemeral=True)
    elif isinstance(error, IndexError):
        print(f"üî¥ IndexError –≤ –∫–æ–º–∞–Ω–¥–µ: {error}")
        error_embed = discord.Embed(
            title="‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö",
            description="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω.",
            color=0xff0000
        )
        try:
            await interaction.response.send_message(embed=error_embed, ephemeral=True)
        except:
            await interaction.followup.send(embed=error_embed, ephemeral=True)
    else:
        print(f"üî¥ –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {error}")
        try:
            await interaction.response.send_message(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã!",
                ephemeral=True
            )
        except:
            try:
                await interaction.followup.send(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã!",
                    ephemeral=True
                )
            except:
                pass

@bot.tree.command(name="debug_cases", description="–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–µ–π—Å–∞—Ö")
async def debug_cases(interaction: discord.Interaction):
    global db
    try:
        cases = db.get_cases()
        embed = discord.Embed(title="üîß –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–µ–π—Å–∞—Ö", color=0xff9900)
        embed.add_field(name="–í—Å–µ–≥–æ –∫–µ–π—Å–æ–≤ –≤ –±–∞–∑–µ", value=len(cases), inline=False)
        embed.add_field(name="–¢–∏–ø db", value=str(type(db)), inline=False)
        
        case_details = []
        for i, case in enumerate(cases[:10]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –∫–µ–π—Å–æ–≤
            case_details.append(f"{i+1}. ID: {case[0]}, Name: {case[1]}, Price: {case[2]}")
        
        if case_details:
            embed.add_field(name="–ö–µ–π—Å—ã (–ø–µ—Ä–≤—ã–µ 10)", value="\n".join(case_details), inline=False)
        else:
            embed.add_field(name="–ö–µ–π—Å—ã", value="–ù–µ—Ç –∫–µ–π—Å–æ–≤ –≤ –±–∞–∑–µ", inline=False)
            
        await interaction.response.send_message(embed=embed, ephemeral=True)
        
    except Exception as e:
        await interaction.response.send_message(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏: {e}", ephemeral=True)

# –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê

# –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
@bot.tree.command(name="balance", description="–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à –±–∞–ª–∞–Ω—Å")
@app_commands.describe(user="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —á–µ–π –±–∞–ª–∞–Ω—Å –ø–æ–∫–∞–∑–∞—Ç—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
async def balance(interaction: discord.Interaction, user: discord.Member = None):
    try:
        user = user or interaction.user
        user_data = db.get_user(user.id)
        user_safe = get_user_data_safe(user_data)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        cursor = db.conn.cursor()
        cursor.execute('SELECT COUNT(*) FROM achievements WHERE user_id = %s', (user.id,))
        achievements_result = cursor.fetchone()
        achievements_count = achievements_result[0] if achievements_result else 0
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –±–∞—Ñ—ã
        buffs = {}
        try:
            buffs = db.get_user_buffs(user.id)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞—Ñ–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
        
        embed = discord.Embed(
            title=f"{EMOJIS['coin']} –ë–∞–ª–∞–Ω—Å {user.display_name}",
            color=0xffd700
        )
        embed.add_field(name="–ë–∞–ª–∞–Ω—Å", value=f"{user_safe['balance']} {EMOJIS['coin']}", inline=True)
        embed.add_field(name="–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–µ—Ä–∏—è", value=f"{user_safe['daily_streak']} –¥–Ω–µ–π", inline=True)
        embed.add_field(name="–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", value=f"{achievements_count}/{len(ACHIEVEMENTS)}", inline=True)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –±–∞—Ñ—ã
        if buffs:
            buffs_text = "\n".join([f"‚Ä¢ {buff['item_name']}: {buff['description']}" for buff in buffs.values()])
            embed.add_field(name="üéØ –ê–∫—Ç–∏–≤–Ω—ã–µ –±–∞—Ñ—ã", value=buffs_text, inline=False)
        
        if user.avatar:
            embed.set_thumbnail(url=user.avatar.url)
        elif user.default_avatar:
            embed.set_thumbnail(url=user.default_avatar.url)
        
        await interaction.response.send_message(embed=embed)
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ balance: {e}")
        error_embed = discord.Embed(
            title="‚ùå –û—à–∏–±–∫–∞",
            description="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            color=0xff0000
        )
        await interaction.response.send_message(embed=error_embed, ephemeral=True)

# –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ö–û–ú–ê–ù–î–ê CASES –° –ü–ê–ì–ò–ù–ê–¶–ò–ï–ô –ò –ü–û–õ–ù–´–ú –û–ü–ò–°–ê–ù–ò–ï–ú
# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ –≤ –Ω–∞—á–∞–ª–æ –∫–æ–º–∞–Ω–¥—ã cases
@bot.tree.command(name="cases", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–µ–π—Å–æ–≤ —Å –ø–æ–ª–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º")
async def cases_list(interaction: discord.Interaction):
    global db  # –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    try:
        cases = db.get_cases()  # –¢–µ–ø–µ—Ä—å db –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞
        
        if not cases:
            await interaction.response.send_message("–ö–µ–π—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!", ephemeral=True)
            return
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ 3 –∫–µ–π—Å–∞ (–∏–∑-–∑–∞ –ø–æ–ª–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è)
        pages = []
        current_page = []
        
        for i, case in enumerate(cases):
            if i > 0 and i % 3 == 0:
                pages.append(current_page)
                current_page = []
            current_page.append(case)
        
        if current_page:
            pages.append(current_page)
        
        view = ImprovedCasesView(pages, interaction.user.id)
        embed = view.create_embed()
        await interaction.response.send_message(embed=embed, view=view)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ cases: {e}")
        await interaction.response.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–µ–π—Å–æ–≤!", ephemeral=True)

# –£–õ–£–ß–®–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ö–í–ï–°–¢–û–í
@bot.tree.command(name="quest", description="–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∫–≤–µ—Å—Ç (–ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞ 1 —á–∞—Å)")
async def quest(interaction: discord.Interaction):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –∫–≤–µ—Å—Ç
        if not db.can_get_new_quest(interaction.user.id):
            await interaction.response.send_message(
                "‚ùå –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –∫–≤–µ—Å—Ç —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ 1 —á–∞—Å –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ!",
                ephemeral=True
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∫–≤–µ—Å—Ç
        active_quest = db.get_user_active_quest(interaction.user.id)
        if active_quest:
            quest_id, progress, completed, assigned_at = active_quest
            if quest_id in QUESTS:
                quest_data = QUESTS[quest_id]
                await interaction.response.send_message(
                    f"‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–≤–µ—Å—Ç: **{quest_data['name']}**\n"
                    f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}%\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/quests` —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏.",
                    ephemeral=True
                )
                return
        
        # –í—ã–¥–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∫–≤–µ—Å—Ç
        available_quests = list(QUESTS.keys())
        if not available_quests:
            await interaction.response.send_message("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤!", ephemeral=True)
            return
        
        quest_id = random.choice(available_quests)
        quest_data = QUESTS[quest_id]
        
        if db.add_user_quest(interaction.user.id, quest_id):
            embed = discord.Embed(
                title=f"{EMOJIS['quest']} –ù–æ–≤—ã–π –∫–≤–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω!",
                description=quest_data['description'],
                color=0x00ff00
            )
            embed.add_field(name="–ù–∞–≥—Ä–∞–¥–∞", value=f"{quest_data['reward']} {EMOJIS['coin']}")
            embed.add_field(name="–¢–∏–ø", value=quest_data.get('type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))
            embed.set_footer(text="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /quests —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –∫–≤–µ—Å—Ç—ã")
            
            await interaction.response.send_message(embed=embed)
        else:
            await interaction.response.send_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –∫–≤–µ—Å—Ç!", ephemeral=True)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ quest: {e}")
        await interaction.response.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–≤–µ—Å—Ç–∞!", ephemeral=True)

@bot.tree.command(name="quests", description="–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∫–≤–µ—Å—Ç—ã")
async def quests(interaction: discord.Interaction):
    try:
        user_quests = db.get_user_quests(interaction.user.id)
        
        embed = discord.Embed(title=f"{EMOJIS['quest']} –í–∞—à–∏ –∫–≤–µ—Å—Ç—ã", color=0x9b59b6)
        
        if not user_quests:
            embed.description = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–≤–µ—Å—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/quest` —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π!"
            await interaction.response.send_message(embed=embed)
            return
        
        active_quests = []
        completed_quests = []
        
        for quest_row in user_quests:
            quest_id, progress, completed, assigned_at = quest_row
            if quest_id in QUESTS:
                quest_data = QUESTS[quest_id]
                quest_info = {
                    'name': quest_data['name'],
                    'description': quest_data['description'],
                    'progress': progress,
                    'reward': quest_data['reward'],
                    'completed': completed
                }
                
                if completed == 1:
                    completed_quests.append(quest_info)
                else:
                    active_quests.append(quest_info)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã
        if active_quests:
            embed.add_field(
                name="üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã",
                value="",
                inline=False
            )
            for quest in active_quests:
                embed.add_field(
                    name=f"üîÑ {quest['name']} - {quest['progress']}%",
                    value=f"{quest['description']}\n–ù–∞–≥—Ä–∞–¥–∞: {quest['reward']} {EMOJIS['coin']}",
                    inline=False
                )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∫–≤–µ—Å—Ç—ã
        if completed_quests:
            embed.add_field(
                name="‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∫–≤–µ—Å—Ç—ã",
                value="",
                inline=False
            )
            for quest in completed_quests:
                embed.add_field(
                    name=f"‚úÖ {quest['name']}",
                    value=f"{quest['description']}\n–ü–æ–ª—É—á–µ–Ω–æ: {quest['reward']} {EMOJIS['coin']}",
                    inline=False
                )
        
        if not active_quests and not completed_quests:
            embed.description = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–≤–µ—Å—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/quest` —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π!"
        
        await interaction.response.send_message(embed=embed)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ quests: {e}")
        await interaction.response.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–≤–µ—Å—Ç–æ–≤!", ephemeral=True)

# –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ö–û–ú–ê–ù–î–ê MARKET –° AUTocomplete
@bot.tree.command(name="market", description="–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–º")
@app_commands.describe(action="–î–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ", item_name="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞", price="–¶–µ–Ω–∞")
@app_commands.choices(action=[
    app_commands.Choice(name="üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤", value="list"),
    app_commands.Choice(name="üí∞ –ü—Ä–æ–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç", value="sell"),
    app_commands.Choice(name="üõí –ö—É–ø–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç", value="buy")
])
async def market(interaction: discord.Interaction, action: app_commands.Choice[str], item_name: str = None, price: int = None):
    try:
        if action.value == "list":
            cursor = db.conn.cursor()
            cursor.execute('SELECT id, seller_id, item_name, price FROM market LIMIT 10')
            items = cursor.fetchall()
            
            embed = discord.Embed(title="üè™ –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å", color=0x00ff00)
            
            if not items:
                embed.description = "–ù–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤."
            else:
                for item in items:
                    item_id = item[0] if len(item) > 0 else "N/A"
                    seller_id = item[1] if len(item) > 1 else None
                    item_name_db = item[2] if len(item) > 2 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç"
                    item_price = item[3] if len(item) > 3 else 0
                    
                    seller = bot.get_user(seller_id) if seller_id else None
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞—Ñ–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ
                    buff_info = ""
                    try:
                        item_data = db.get_item_by_name(item_name_db)
                        if item_data and len(item_data) > 7 and item_data[7]:
                            buff_info = f" - {item_data[7]}"
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–¥–º–µ—Ç–µ {item_name_db}: {e}")
                    
                    embed.add_field(
                        name=f"#{item_id} {item_name_db}{buff_info}",
                        value=f"–¶–µ–Ω–∞: {item_price} {EMOJIS['coin']}\n–ü—Ä–æ–¥–∞–≤–µ—Ü: {seller.name if seller else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}",
                        inline=False
                    )
            
            await interaction.response.send_message(embed=embed)
        
        elif action.value == "sell":
            if not item_name or not price:
                await interaction.response.send_message("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏ —Ü–µ–Ω—É!", ephemeral=True)
                return
            
            if price <= 0:
                await interaction.response.send_message("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!", ephemeral=True)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
            inventory = db.get_user_inventory(interaction.user.id)
            item_found = False
            
            for item_id, count in inventory.get("items", {}).items():
                try:
                    item_data = db.get_item(int(item_id))
                    if item_data and len(item_data) > 1 and item_data[1] == item_name:
                        item_found = True
                        break
                except (ValueError, IndexError) as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ {item_id}: {e}")
                    continue
            
            if not item_found:
                await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ.", ephemeral=True)
                return
            
            cursor = db.conn.cursor()
            cursor.execute('INSERT INTO market (seller_id, item_name, price) VALUES (%s, %s, %s)', 
                          (interaction.user.id, item_name, price))
            db.conn.commit()
            db.update_user_stat(interaction.user.id, 'market_sales')
            
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
            db.remove_item_from_inventory(interaction.user.id, item_name)
            
            embed = discord.Embed(
                title="üè™ –ü—Ä–µ–¥–º–µ—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–¥–∞–∂—É",
                description=f"–ü—Ä–µ–¥–º–µ—Ç: {item_name}\n–¶–µ–Ω–∞: {price} {EMOJIS['coin']}",
                color=0x00ff00
            )
            await interaction.response.send_message(embed=embed)
        
        elif action.value == "buy":
            if not item_name:
                await interaction.response.send_message("–£–∫–∞–∂–∏—Ç–µ ID –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏!", ephemeral=True)
                return
            
            try:
                item_id = int(item_name)
            except ValueError:
                await interaction.response.send_message("ID –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!", ephemeral=True)
                return
            
            cursor = db.conn.cursor()
            cursor.execute('SELECT id, seller_id, item_name, price FROM market WHERE id = %s', (item_id,))
            item = cursor.fetchone()
            
            if not item:
                await interaction.response.send_message("–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!", ephemeral=True)
                return
            
            market_item_id = item[0] if len(item) > 0 else None
            seller_id = item[1] if len(item) > 1 else None
            market_item_name = item[2] if len(item) > 2 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç"
            item_price = item[3] if len(item) > 3 else 0
            
            if not seller_id:
                await interaction.response.send_message("–û—à–∏–±–∫–∞: –ø—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω!", ephemeral=True)
                return
            
            user_data = db.get_user(interaction.user.id)
            user_safe = get_user_data_safe(user_data)
            
            if user_safe['balance'] < item_price:
                await interaction.response.send_message("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!", ephemeral=True)
                return
            
            # –ü–æ–∫—É–ø–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
            db.update_balance(interaction.user.id, -item_price)
            db.update_balance(seller_id, item_price)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
            db.add_item_to_inventory(interaction.user.id, market_item_name)
            
            cursor.execute('DELETE FROM market WHERE id = %s', (market_item_id,))
            db.conn.commit()
            
            db.log_transaction(interaction.user.id, 'market_buy', -item_price, seller_id, f"–ü–æ–∫—É–ø–∫–∞: {market_item_name}")
            db.log_transaction(seller_id, 'market_sell', item_price, interaction.user.id, f"–ü—Ä–æ–¥–∞–∂–∞: {market_item_name}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞—Ñ–µ –∫—É–ø–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
            buff_info = ""
            try:
                item_data = db.get_item_by_name(market_item_name)
                if item_data and len(item_data) > 7 and item_data[7]:
                    buff_info = f"\n**–≠—Ñ—Ñ–µ–∫—Ç:** {item_data[7]}"
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞—Ñ–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ {market_item_name}: {e}")
            
            embed = discord.Embed(
                title="üè™ –ü–æ–∫—É–ø–∫–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞!",
                description=f"–í—ã –∫—É–ø–∏–ª–∏ **{market_item_name}** –∑–∞ {item_price} {EMOJIS['coin']}{buff_info}",
                color=0x00ff00
            )
            await interaction.response.send_message(embed=embed)
    
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ market: {e}")
        error_embed = discord.Embed(
            title="‚ùå –û—à–∏–±–∫–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞",
            description="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            color=0xff0000
        )
        await interaction.response.send_message(embed=error_embed, ephemeral=True)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
try:
    db = Database()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    print("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...")
    db._initialize_default_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–µ–π—Å—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è
    test_cases = db.get_cases()
    print(f"üîç –¢–µ—Å—Ç: –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(test_cases)} –∫–µ–π—Å–æ–≤ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
    
except Exception as e:
    print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    traceback.print_exc()
    exit(1)

    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è db —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫
    class DummyDB:
        def get_cases(self):
            return []
        def get_user(self, user_id):
            return (user_id, 100, 0, None, '{"cases": {}, "items": {}}', datetime.datetime.now())
        # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    db = DummyDB()

# AUT–ûCOMPLETE –î–õ–Ø –ü–†–ï–î–ú–ï–¢–û–í –í –ú–ê–†–ö–ï–¢–ï
@market.autocomplete('item_name')
async def market_item_autocomplete(interaction: discord.Interaction, current: str) -> List[app_commands.Choice[str]]:
    try:
        inventory = db.get_user_inventory_safe(interaction.user.id)
        items = inventory.get("items", {})
        item_choices = []
        
        for item_id, count in items.items():
            try:
                item_name = db.get_item_name_by_id(item_id)
                if current.lower() in item_name.lower():
                    item_choices.append(
                        app_commands.Choice(
                            name=f"{item_name} (x{count})",
                            value=item_name
                        )
                    )
            except Exception as e:
                continue
        
        return item_choices[:25]  # Discord –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–æ 25ÈÄâÈ°π
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ autocomplete: {e}")
        return []

# –î–û–ë–ê–í–õ–Ø–ï–ú –ü–†–û–í–ï–†–ö–£ –ö–í–ï–°–¢–û–í –í –î–†–£–ì–ò–ï –ö–û–ú–ê–ù–î–´

@bot.tree.command(name="daily", description="–ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É")
async def daily(interaction: discord.Interaction):
    try:
        user_data = db.get_user_safe(interaction.user.id)
        user_safe = get_user_data_safe(user_data)
        
        last_daily_str = user_safe['last_daily']
        daily_streak = user_safe['daily_streak']
        
        last_daily = None
        if last_daily_str:
            try:
                last_daily = datetime.datetime.fromisoformat(last_daily_str)
            except (ValueError, TypeError):
                last_daily = None
        
        now = datetime.datetime.now()
        
        if last_daily and (now - last_daily).days < 1:
            await interaction.response.send_message("–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É —Å–µ–≥–æ–¥–Ω—è!", ephemeral=True)
            return
        
        streak = daily_streak + 1 if last_daily and (now - last_daily).days == 1 else 1
        base_reward = 100
        streak_bonus = streak * 10
        reward = base_reward + streak_bonus
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–∞—Ñ—ã –∫ –Ω–∞–≥—Ä–∞–¥–µ
        reward = db.apply_buff_to_amount(interaction.user.id, reward, 'daily_bonus')
        reward = db.apply_buff_to_amount(interaction.user.id, reward, 'multiplier')
        reward = db.apply_buff_to_amount(interaction.user.id, reward, 'all_bonus')
        
        db.update_balance(interaction.user.id, reward)
        cursor = db.conn.cursor()
        cursor.execute('UPDATE users SET daily_streak = %s, last_daily = %s WHERE user_id = %s', 
                       (streak, now.isoformat(), interaction.user.id))
        db.conn.commit()
        db.log_transaction(interaction.user.id, 'daily', reward)
        db.update_user_stat(interaction.user.id, 'daily_claimed')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–≤–µ—Å—Ç—ã
        db.check_quest_completion(interaction.user.id, 'daily_streak', streak)
        
        embed = discord.Embed(
            title=f"{EMOJIS['daily']} –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞",
            description=f"–ù–∞–≥—Ä–∞–¥–∞: {reward} {EMOJIS['coin']}\n–°–µ—Ä–∏—è: {streak} –¥–Ω–µ–π\n–ë–æ–Ω—É—Å –∑–∞ —Å–µ—Ä–∏—é: +{streak_bonus} {EMOJIS['coin']}",
            color=0x00ff00
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã
        try:
            new_achievements = db.check_achievements(interaction.user.id)
            if new_achievements:
                achievements_text = "\n".join([f"üéâ {ACHIEVEMENTS[ach_id]['name']} (+{ACHIEVEMENTS[ach_id]['reward']} {EMOJIS['coin']})" for ach_id in new_achievements])
                embed.add_field(name="–ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è!", value=achievements_text, inline=False)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {e}")
        
        await interaction.response.send_message(embed=embed)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ daily: {e}")
        error_embed = discord.Embed(
            title="‚ùå –û—à–∏–±–∫–∞",
            description="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            color=0xff0000
        )
        await interaction.response.send_message(embed=error_embed, ephemeral=True)

# –î–û–ë–ê–í–õ–Ø–ï–ú –ü–†–û–í–ï–†–ö–£ –ö–í–ï–°–¢–û–í –í –î–£–≠–õ–ò
@bot.tree.command(name="duel", description="–í—ã–∑–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –¥—É—ç–ª—å")
@app_commands.describe(user="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –¥—É—ç–ª–∏", bet="–°—Ç–∞–≤–∫–∞ –≤ –º–æ–Ω–µ—Ç–∞—Ö")
async def duel(interaction: discord.Interaction, user: discord.Member, bet: int):
    if user.id == interaction.user.id:
        await interaction.response.send_message("–ù–µ–ª—å–∑—è –≤—ã–∑–≤–∞—Ç—å –Ω–∞ –¥—É—ç–ª—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!", ephemeral=True)
        return
    
    if bet <= 0:
        await interaction.response.send_message("–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!", ephemeral=True)
        return
    
    user_data = db.get_user(interaction.user.id)
    user_safe = get_user_data_safe(user_data)
    
    if user_safe['balance'] < bet:
        await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –¥—É—ç–ª–∏!", ephemeral=True)
        return
    
    target_data = db.get_user(user.id)
    target_safe = get_user_data_safe(target_data)
    
    if target_safe['balance'] < bet:
        await interaction.response.send_message(f"–£ {user.mention} –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –¥—É—ç–ª–∏!", ephemeral=True)
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –¥—É—ç–ª–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    embed = discord.Embed(
        title=f"{EMOJIS['duel']} –í—ã–∑–æ–≤ –Ω–∞ –¥—É—ç–ª—å!",
        description=f"{interaction.user.mention} –≤—ã–∑—ã–≤–∞–µ—Ç {user.mention} –Ω–∞ –¥—É—ç–ª—å!",
        color=0xff0000
    )
    embed.add_field(name="–°—Ç–∞–≤–∫–∞", value=f"{bet} {EMOJIS['coin']}", inline=True)
    embed.add_field(name="–í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç", value="30 —Å–µ–∫—É–Ω–¥", inline=True)
    embed.set_footer(text="–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –∑–∞–±–∏—Ä–∞–µ—Ç –≤—Å—é —Å—Ç–∞–≤–∫—É!")
    
    # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥—É—ç–ª–µ–π
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∏–º, —á—Ç–æ –¥—É—ç–ª—å –Ω–∞—á–∞—Ç–∞
    await interaction.response.send_message(
        f"‚öîÔ∏è –î—É—ç–ª—å –º–µ–∂–¥—É {interaction.user.mention} –∏ {user.mention} –Ω–∞—á–∞—Ç–∞!\n"
        f"–°—Ç–∞–≤–∫–∞: {bet} {EMOJIS['coin']}\n\n"
        f"*–í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥—É—ç–ª–µ–π*"
    )
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥—É—ç–ª–∏ (50/50 —à–∞–Ω—Å)
    await asyncio.sleep(2)
    
    winner = interaction.user if random.random() > 0.5 else user
    loser = user if winner == interaction.user else interaction.user
    
    # –í—ã–¥–∞–µ–º –≤—ã–∏–≥—Ä—ã—à
    winnings = bet * 2
    winnings = db.apply_buff_to_amount(winner.id, winnings, 'game_bonus')
    winnings = db.apply_buff_to_amount(winner.id, winnings, 'multiplier')
    winnings = db.apply_buff_to_amount(winner.id, winnings, 'all_bonus')
    
    db.update_balance(winner.id, winnings - bet)  # –ß–∏—Å—Ç—ã–π –≤—ã–∏–≥—Ä—ã—à
    db.update_balance(loser.id, -bet)
    
    db.log_transaction(winner.id, 'duel_win', winnings - bet, loser.id, "–ü–æ–±–µ–¥–∞ –≤ –¥—É—ç–ª–∏")
    db.log_transaction(loser.id, 'duel_loss', -bet, winner.id, "–ü—Ä–æ–∏–≥—Ä—ã—à –≤ –¥—É—ç–ª–∏")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    db.update_user_stat(winner.id, 'duels_won')
    db.update_consecutive_wins(winner.id, True)
    db.update_consecutive_wins(loser.id, False)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–≤–µ—Å—Ç—ã
    cursor = db.conn.cursor()
    cursor.execute('SELECT duels_won FROM user_stats WHERE user_id = %s', (winner.id,))
    duels_won = cursor.fetchone()
    if duels_won:
        db.check_quest_completion(winner.id, 'duels_won', duels_won[0])
    
    result_embed = discord.Embed(
        title=f"{EMOJIS['duel']} –†–µ–∑—É–ª—å—Ç–∞—Ç –¥—É—ç–ª–∏",
        description=f"**–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:** {winner.mention}\n**–ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π:** {loser.mention}",
        color=0x00ff00
    )
    result_embed.add_field(name="–í—ã–∏–≥—Ä—ã—à", value=f"{winnings - bet} {EMOJIS['coin']}", inline=True)
    
    await interaction.followup.send(embed=result_embed)

@bot.tree.command(name="admin_update_cases", description="[ADMIN] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫–µ–π—Å—ã")
@is_admin()
async def admin_update_cases(interaction: discord.Interaction):
    try:
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∫–µ–π—Å–æ–≤ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–Ω–æ–≤–æ
        cursor = db.conn.cursor()
        cursor.execute('DELETE FROM cases')
        db.conn.commit()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        db._initialize_default_data()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        cases = db.get_cases()
        
        embed = discord.Embed(title="üîÑ –ö–µ–π—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã", color=0x00ff00)
        embed.add_field(name="–î–æ–±–∞–≤–ª–µ–Ω–æ –∫–µ–π—Å–æ–≤", value=len(cases), inline=False)
        
        await interaction.response.send_message(embed=embed, ephemeral=True)
        
    except Exception as e:
        await interaction.response.send_message(f"‚ùå –û—à–∏–±–∫–∞: {e}", ephemeral=True)

@bot.tree.command(name="debug_database", description="–ì–ª—É–±–æ–∫–∞—è –æ—Ç–ª–∞–¥–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
async def debug_database(interaction: discord.Interaction):
    try:
        cursor = db.conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã cases
        cursor.execute("""
            SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_name = 'cases'
            );
        """)
        table_exists = cursor.fetchone()[0]
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–µ
        cursor.execute("""
            SELECT column_name, data_type 
            FROM information_schema.columns 
            WHERE table_name = 'cases'
        """)
        columns = cursor.fetchall()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–µ–π—Å—ã
        cases = db.get_cases()
        
        embed = discord.Embed(title="üîß –û—Ç–ª–∞–¥–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", color=0xff9900)
        embed.add_field(name="–¢–∞–±–ª–∏—Ü–∞ cases —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", value="‚úÖ –î–∞" if table_exists else "‚ùå –ù–µ—Ç", inline=False)
        embed.add_field(name="–ö–æ–ª–æ–Ω–∫–∏ —Ç–∞–±–ª–∏—Ü—ã", value="\n".join([f"{col[0]}: {col[1]}" for col in columns]), inline=False)
        embed.add_field(name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–µ–π—Å–æ–≤", value=len(cases), inline=False)
        
        await interaction.response.send_message(embed=embed, ephemeral=True)
        
    except Exception as e:
        await interaction.response.send_message(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏: {e}", ephemeral=True)

# –ó–ê–ü–£–°–ö –ë–û–¢–ê
if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ –±–æ—Ç–∞...")
    print(f"üîë –¢–æ–∫–µ–Ω: {'‚úÖ –ù–∞–π–¥–µ–Ω' if BOT_TOKEN else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
    print(f"üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞' if DATABASE_URL else '‚ùå –û—à–∏–±–∫–∞'}")
    print(f"üëë –ê–¥–º–∏–Ω—ã: {len(ADMIN_IDS)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("=" * 50)
    
    try:
        bot.run(BOT_TOKEN)
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        traceback.print_exc()





