import os
import discord
from discord import app_commands
from discord.ext import commands, tasks
from discord.ui import Button, View, Select
import json
import random
import asyncio
import datetime
import traceback
import asyncio
import time
from discord import HTTPException

class CustomBot(commands.Bot):
    async def setup_hook(self):
        # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã
        await asyncio.sleep(5)
        
    async def on_ready(self):
        print(f'‚úÖ –ë–æ—Ç {self.user.name} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!')
        print(f'üîó ID –±–æ—Ç–∞: {self.user.id}')
        
        # –ú–µ–¥–ª–µ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
        try:
            await asyncio.sleep(2)
            synced = await self.tree.sync()
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(synced)} –∫–æ–º–∞–Ω–¥")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")

# –ò–º–ø–æ—Ä—Ç PostgreSQL
try:
    import psycopg2
    from psycopg2.extras import RealDictCursor
    print("‚úÖ psycopg2 –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
except ImportError:
    print("‚ùå psycopg2 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...")
    import subprocess
    subprocess.check_call(["pip", "install", "psycopg2-binary"])
    import psycopg2
    from psycopg2.extras import RealDictCursor

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
def get_database_url():
    """–ü–æ–ª—É—á–∞–µ–º DATABASE_URL —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏"""
    database_url = os.environ.get('DATABASE_URL')
    if database_url:
        print("‚úÖ DATABASE_URL –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return database_url
    
    alternative_names = ['POSTGRES_URL', 'POSTGRESQL_URL', 'RAILWAY_DATABASE_URL']
    for name in alternative_names:
        database_url = os.environ.get(name)
        if database_url:
            print(f"‚úÖ DATABASE_URL –Ω–∞–π–¥–µ–Ω –∫–∞–∫ {name}")
            return database_url
    
    db_user = os.environ.get('PGUSER')
    db_password = os.environ.get('PGPASSWORD')
    db_host = os.environ.get('PGHOST')
    db_port = os.environ.get('PGPORT')
    db_name = os.environ.get('PGDATABASE')
    
    if all([db_user, db_password, db_host, db_port, db_name]):
        database_url = f"postgresql://{db_user}:{db_password}@{db_host}:{db_port}/{db_name}"
        print("‚úÖ DATABASE_URL —Å–æ–±—Ä–∞–Ω –∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö")
        return database_url
    
    print("‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    return None

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
DATABASE_URL = get_database_url()
BOT_TOKEN = os.environ.get('DISCORD_BOT_TOKEN')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
if not BOT_TOKEN or BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
    print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
    exit(1)

if not DATABASE_URL:
    print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
intents = discord.Intents.all()
bot = CustomBot(command_prefix='!', intents=intents, help_command=None)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
LOG_CHANNEL_ID = 1423377881047896207
ADMIN_IDS = [766767256742526996, 1195144951546265675, 691904643181314078, 1078693283695448064, 1138140772097597472]
ADMIN_USER_ID = 1188261847850299514

# –≠–º–æ–¥–∑–∏ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
EMOJIS = {
    'coin': 'ü™ô',
    'daily': 'üìÖ',
    'case': 'üéÅ',
    'win': 'üéâ',
    'lose': 'üíÄ',
    'steal': 'ü¶π',
    'market': 'üè™',
    'quest': 'üó∫Ô∏è',
    'dice': 'üé≤',
    'duel': '‚öîÔ∏è',
    'admin': '‚öôÔ∏è',
    'slot': 'üé∞',
    'coinflip': 'ü™ô',
    'blackjack': 'üÉè'
}

# –°–∏—Å—Ç–µ–º–∞ –±–∞—Ñ–æ–≤ –æ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤
ITEM_BUFFS = {
    '–ó–æ–ª–æ—Ç–æ–π –∞–º—É–ª–µ—Ç': {'type': 'daily_bonus', 'value': 1.2, 'description': '+20% –∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥–µ'},
    '–°–µ—Ä–µ–±—Ä—è–Ω—ã–π –∞–º—É–ª–µ—Ç': {'type': 'daily_bonus', 'value': 1.1, 'description': '+10% –∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥–µ'},
    '–ö–æ–ª—å—Ü–æ —É–¥–∞—á–∏': {'type': 'case_bonus', 'value': 1.15, 'description': '+15% –∫ –Ω–∞–≥—Ä–∞–¥–∞–º –∏–∑ –∫–µ–π—Å–æ–≤'},
    '–ë—Ä–∞—Å–ª–µ—Ç –≤–µ–∑–µ–Ω–∏—è': {'type': 'game_bonus', 'value': 1.1, 'description': '+10% –∫ –≤—ã–∏–≥—Ä—ã—à–∞–º –≤ –∏–≥—Ä–∞—Ö'},
    '–ó–∞—â–∏—Ç–Ω—ã–π —Ç–∞–ª–∏—Å–º–∞–Ω': {'type': 'steal_protection', 'value': 0.5, 'description': '-50% –∫ —à–∞–Ω—Å—É –∫—Ä–∞–∂–∏ —É –≤–∞—Å'},
    '–ü–µ—Ä—á–∞—Ç–∫–∞ –≤–æ—Ä–∞': {'type': 'steal_bonus', 'value': 1.2, 'description': '+20% –∫ —à–∞–Ω—Å—É —É—Å–ø–µ—à–Ω–æ–π –∫—Ä–∞–∂–∏'},
    '–ú–∞–≥–∏—á–µ—Å–∫–∏–π —Å–≤–∏—Ç–æ–∫': {'type': 'roulette_bonus', 'value': 1.25, 'description': '+25% –∫ –≤—ã–∏–≥—Ä—ã—à—É –≤ —Ä—É–ª–µ—Ç–∫–µ'},
    '–ö—Ä–∏—Å—Ç–∞–ª–ª –º–∞–Ω—ã': {'type': 'multiplier', 'value': 1.3, 'description': 'x1.3 –∫ –ª—é–±—ã–º –Ω–∞–≥—Ä–∞–¥–∞–º'},
    '–î—Ä–µ–≤–Ω–∏–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç': {'type': 'multiplier', 'value': 1.5, 'description': 'x1.5 –∫ –ª—é–±—ã–º –Ω–∞–≥—Ä–∞–¥–∞–º'},
    '–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π –ø—Ä–µ–¥–º–µ—Ç': {'type': 'multiplier', 'value': 2.0, 'description': 'x2.0 –∫ –ª—é–±—ã–º –Ω–∞–≥—Ä–∞–¥–∞–º'},
    '–°—á–∞—Å—Ç–ª–∏–≤–∞—è –º–æ–Ω–µ—Ç–∞': {'type': 'coinflip_bonus', 'value': 1.2, 'description': '+20% –∫ –≤—ã–∏–≥—Ä—ã—à—É –≤ coinflip'},
    '–ö–∞—Ä—Ç–æ—á–Ω—ã–π —à—É–ª–µ—Ä': {'type': 'blackjack_bonus', 'value': 1.15, 'description': '+15% –∫ –≤—ã–∏–≥—Ä—ã—à—É –≤ –±–ª—ç–∫–¥–∂–µ–∫–µ'},
    '–°–ª–æ—Ç-–º–∞—Å—Ç–µ—Ä': {'type': 'slot_bonus', 'value': 1.25, 'description': '+25% –∫ –≤—ã–∏–≥—Ä—ã—à—É –≤ —Å–ª–æ—Ç–∞—Ö'},
    '–©–∏—Ç –±–æ–≥–∞—Ç—Å—Ç–≤–∞': {'type': 'loss_protection', 'value': 0.8, 'description': '-20% –∫ –ø—Ä–æ–∏–≥—Ä—ã—à–∞–º'},
    '–§–ª–∞–∫–æ–Ω –∑–µ–ª—å—è': {'type': 'quest_bonus', 'value': 1.2, 'description': '+20% –∫ –Ω–∞–≥—Ä–∞–¥–∞–º –∑–∞ –∫–≤–µ—Å—Ç—ã'},
    '–ó–µ–ª—å–µ —É–¥–∞—á–∏': {'type': 'all_bonus', 'value': 1.1, 'description': '+10% –∫–æ –≤—Å–µ–º –Ω–∞–≥—Ä–∞–¥–∞–º'},
    '–†—É–Ω–∞ –±–æ–≥–∞—Ç—Å—Ç–≤–∞': {'type': 'transfer_bonus', 'value': 0.9, 'description': '-10% –∫ –∫–æ–º–∏—Å—Å–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤'},
    '–¢–æ—Ç–µ–º –∑–∞—â–∏—Ç—ã': {'type': 'duel_bonus', 'value': 1.2, 'description': '+20% –∫ —à–∞–Ω—Å—É –ø–æ–±–µ–¥—ã –≤ –¥—É—ç–ª—è—Ö'},
    '–û–∂–µ—Ä–µ–ª—å–µ –º—É–¥—Ä–æ—Å—Ç–∏': {'type': 'xp_bonus', 'value': 1.15, 'description': '+15% –∫ –æ–ø—ã—Ç—É'},
    '–ü–ª–∞—â —Ç–µ–Ω–∏': {'type': 'steal_chance', 'value': 1.15, 'description': '+15% –∫ —à–∞–Ω—Å—É –∫—Ä–∞–∂–∏'}
}

# –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
ACHIEVEMENTS = {
    'first_daily': {'name': '–ü–µ—Ä–≤—ã–π —à–∞–≥', 'description': '–ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä–≤—É—é –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É', 'reward': 100},
    'rich': {'name': '–ë–æ–≥–∞—á', 'description': '–ù–∞–∫–æ–ø–∏—Ç–µ 10,000 –º–æ–Ω–µ—Ç', 'reward': 500},
    'millionaire': {'name': '–ú–∏–ª–ª–∏–æ–Ω–µ—Ä', 'description': '–ù–∞–∫–æ–ø–∏—Ç–µ 100,000 –º–æ–Ω–µ—Ç', 'reward': 5000},
    'gambler': {'name': '–ê–∑–∞—Ä—Ç–Ω—ã–π –∏–≥—Ä–æ–∫', 'description': '–í—ã–∏–≥—Ä–∞–π—Ç–µ –≤ —Ä—É–ª–µ—Ç–∫—É 25 —Ä–∞–∑', 'reward': 1000},
    'thief': {'name': '–í–æ—Ä', 'description': '–£—Å–ø–µ—à–Ω–æ —É–∫—Ä–∞–¥–∏—Ç–µ –º–æ–Ω–µ—Ç—ã 20 —Ä–∞–∑', 'reward': 800},
    'case_opener': {'name': '–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä', 'description': '–û—Ç–∫—Ä–æ–π—Ç–µ 50 –∫–µ–π—Å–æ–≤', 'reward': 1500},
    'case_master': {'name': '–ú–∞—Å—Ç–µ—Ä –∫–µ–π—Å–æ–≤', 'description': '–û—Ç–∫—Ä–æ–π—Ç–µ 200 –∫–µ–π—Å–æ–≤', 'reward': 5000},
    'duel_master': {'name': '–ú–∞—Å—Ç–µ—Ä –¥—É—ç–ª–µ–π', 'description': '–í—ã–∏–≥—Ä–∞–π—Ç–µ 25 –¥—É—ç–ª–µ–π', 'reward': 1200},
    'slot_king': {'name': '–ö–æ—Ä–æ–ª—å —Å–ª–æ—Ç–æ–≤', 'description': '–í—ã–∏–≥—Ä–∞–π—Ç–µ –¥–∂–µ–∫–ø–æ—Ç –≤ —Å–ª–æ—Ç–∞—Ö', 'reward': 3000},
    'blackjack_pro': {'name': '–ü—Ä–æ—Ñ–∏ –≤ –±–ª—ç–∫–¥–∂–µ–∫–µ', 'description': '–í—ã–∏–≥—Ä–∞–π—Ç–µ 10 —Ä–∞–∑ –≤ –±–ª—ç–∫–¥–∂–µ–∫', 'reward': 2000},
    'coinflip_champ': {'name': '–ß–µ–º–ø–∏–æ–Ω –º–æ–Ω–µ—Ç–∫–∏', 'description': '–í—ã–∏–≥—Ä–∞–π—Ç–µ 30 —Ä–∞–∑ –≤ –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã', 'reward': 1500},
    'trader': {'name': '–¢–æ—Ä–≥–æ–≤–µ—Ü', 'description': '–ü—Ä–æ–¥–∞–π—Ç–µ 15 –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ', 'reward': 800},
    'gifter': {'name': '–©–µ–¥—Ä—ã–π', 'description': '–ü–æ–¥–∞—Ä–∏—Ç–µ 10 –∫–µ–π—Å–æ–≤', 'reward': 1000},
    'veteran': {'name': '–í–µ—Ç–µ—Ä–∞–Ω', 'description': '–ü–æ–ª—É—á–∏—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É 30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥', 'reward': 3000},
    'lucky': {'name': '–í–µ–∑—É–Ω—á–∏–∫', 'description': '–í—ã–∏–≥—Ä–∞–π—Ç–µ 3 —Ä–∞–∑–∞ –ø–æ–¥—Ä—è–¥ –≤ –ª—é–±—É—é –∏–≥—Ä—É', 'reward': 2000},
    'item_collector': {'name': '–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä –ø—Ä–µ–¥–º–µ—Ç–æ–≤', 'description': '–°–æ–±–µ—Ä–∏—Ç–µ 10 —Ä–∞–∑–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤', 'reward': 1500},
    'buff_master': {'name': '–ú–∞—Å—Ç–µ—Ä –±–∞—Ñ–æ–≤', 'description': '–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ 5 —Ä–∞–∑–Ω—ã—Ö –±–∞—Ñ–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ', 'reward': 2000}
}

# –°–∏—Å—Ç–µ–º–∞ –∫–≤–µ—Å—Ç–æ–≤
QUESTS = {
    'daily_rich': {'name': '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–≥–∞—á', 'description': '–ü–æ–ª—É—á–∏—Ç–µ 7 –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ –ø–æ–¥—Ä—è–¥', 'reward': 1000},
    'gambling_king': {'name': '–ö–æ—Ä–æ–ª—å –∞–∑–∞—Ä—Ç–∞', 'description': '–í—ã–∏–≥—Ä–∞–π—Ç–µ 10,000 –º–æ–Ω–µ—Ç –≤ –∞–∑–∞—Ä—Ç–Ω—ã—Ö –∏–≥—Ä–∞—Ö', 'reward': 2500},
    'case_hunter': {'name': '–û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ –∫–µ–π—Å–∞–º–∏', 'description': '–û—Ç–∫—Ä–æ–π—Ç–µ 15 –∫–µ–π—Å–æ–≤ –ª—é–±–æ–≥–æ —Ç–∏–ø–∞', 'reward': 1200},
    'market_expert': {'name': '–≠–∫—Å–ø–µ—Ä—Ç —Ä—ã–Ω–∫–∞', 'description': '–ö—É–ø–∏—Ç–µ –∏ –ø—Ä–æ–¥–∞–π—Ç–µ 5 –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ', 'reward': 800},
    'duel_champion': {'name': '–ß–µ–º–ø–∏–æ–Ω –¥—É—ç–ª–µ–π', 'description': '–í—ã–∏–≥—Ä–∞–π—Ç–µ 5 –¥—É—ç–ª–µ–π –ø–æ–¥—Ä—è–¥', 'reward': 1500},
    'item_collector_quest': {'name': '–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä', 'description': '–°–æ–±–µ—Ä–∏—Ç–µ 5 —Ä–∞–∑–Ω—ã—Ö –º–∞–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤', 'reward': 2000}
}

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_data_safe(user_data):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞"""
    return {
        'user_id': user_data[0] if len(user_data) > 0 else 0,
        'balance': user_data[1] if len(user_data) > 1 else 100,
        'daily_streak': user_data[2] if len(user_data) > 2 else 0,
        'last_daily': user_data[3] if len(user_data) > 3 else None,
        'inventory': user_data[4] if len(user_data) > 4 else '{"cases": {}, "items": {}}',
        'created_at': user_data[5] if len(user_data) > 5 else datetime.datetime.now()
    }

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å Database –¥–ª—è PostgreSQL
class Database:
    def __init__(self):
        self.conn = None
        self.connect()
        self.create_tables()
    
    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        max_retries = 3
        for attempt in range(max_retries):
            try:
                self.conn = psycopg2.connect(DATABASE_URL, sslmode='require')
                print("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL!")
                return
            except Exception as e:
                print(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                if attempt < max_retries - 1:
                    print("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
                    import time
                    time.sleep(5)
                else:
                    print("üí• –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫")
                    raise

    def create_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            cursor = self.conn.cursor()
            
            print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
            
            # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id BIGINT PRIMARY KEY,
                    balance INTEGER DEFAULT 100,
                    daily_streak INTEGER DEFAULT 0,
                    last_daily TEXT,
                    inventory TEXT DEFAULT '{}',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS transactions (
                    id SERIAL PRIMARY KEY,
                    user_id BIGINT,
                    type TEXT,
                    amount INTEGER,
                    target_user_id BIGINT,
                    description TEXT,
                    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –∫–µ–π—Å–æ–≤
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS cases (
                    id SERIAL PRIMARY KEY,
                    name TEXT,
                    price INTEGER,
                    rewards TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –º–∞—Ä–∫–µ—Ç–∞
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS market (
                    id SERIAL PRIMARY KEY,
                    seller_id BIGINT,
                    item_name TEXT,
                    price INTEGER,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS achievements (
                    user_id BIGINT,
                    achievement_id TEXT,
                    unlocked_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    PRIMARY KEY (user_id, achievement_id)
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –∫–≤–µ—Å—Ç–æ–≤
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS quests (
                    user_id BIGINT,
                    quest_id TEXT,
                    progress INTEGER DEFAULT 0,
                    completed BOOLEAN DEFAULT FALSE,
                    last_quest TEXT,
                    PRIMARY KEY (user_id, quest_id)
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –¥—É—ç–ª–µ–π
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS duels (
                    id SERIAL PRIMARY KEY,
                    challenger_id BIGINT,
                    target_id BIGINT,
                    bet INTEGER,
                    status TEXT DEFAULT 'pending',
                    winner_id BIGINT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS items (
                    id SERIAL PRIMARY KEY,
                    name TEXT,
                    description TEXT,
                    value INTEGER,
                    rarity TEXT,
                    buff_type TEXT,
                    buff_value REAL,
                    buff_description TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS user_stats (
                    user_id BIGINT PRIMARY KEY,
                    cases_opened INTEGER DEFAULT 0,
                    duels_won INTEGER DEFAULT 0,
                    steals_successful INTEGER DEFAULT 0,
                    steals_failed INTEGER DEFAULT 0,
                    roulette_wins INTEGER DEFAULT 0,
                    slot_wins INTEGER DEFAULT 0,
                    blackjack_wins INTEGER DEFAULT 0,
                    coinflip_wins INTEGER DEFAULT 0,
                    daily_claimed INTEGER DEFAULT 0,
                    total_earned INTEGER DEFAULT 0,
                    market_sales INTEGER DEFAULT 0,
                    gifts_sent INTEGER DEFAULT 0,
                    consecutive_wins INTEGER DEFAULT 0,
                    items_collected INTEGER DEFAULT 0,
                    last_win_time TIMESTAMP
                )
            ''')
            
            self.conn.commit()
            print("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            self.initialize_default_data()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
            self.conn.rollback()
            raise

    def initialize_default_data(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –£–õ–£–ß–®–ï–ù–ù–´–ú–ò –ö–ï–ô–°–ê–ú–ò"""
        try:
            cursor = self.conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–µ–π—Å–æ–≤
            cursor.execute('SELECT COUNT(*) FROM cases')
            current_count = cursor.fetchone()[0]
            print(f"üîç –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–µ–π—Å–æ–≤ –≤ –±–∞–∑–µ: {current_count}")
            
            # –ï—Å–ª–∏ –∫–µ–π—Å–æ–≤ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
            if current_count == 0:
                print("üîÑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –∫–µ–π—Å–æ–≤...")
                
                improved_cases = [
                    ('üì¶ –ù–∞—á–∏–Ω–∞—é—â–∏–π –∫–µ–π—Å', 25, json.dumps([
                        {'type': 'coins', 'amount': [10, 30], 'chance': 0.6, 'description': '–ù–µ–±–æ–ª—å—à–∞—è —Å—É–º–º–∞ –º–æ–Ω–µ—Ç'},
                        {'type': 'coins', 'amount': [31, 80], 'chance': 0.3, 'description': '–°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ –º–æ–Ω–µ—Ç'},
                        {'type': 'coins', 'amount': [81, 150], 'chance': 0.1, 'description': '–•–æ—Ä–æ—à–∞—è —Å—É–º–º–∞ –º–æ–Ω–µ—Ç'}
                    ])),
                    ('üì¶ –ú–∞–ª—ã–π –∫–µ–π—Å', 50, json.dumps([
                        {'type': 'coins', 'amount': [20, 50], 'chance': 0.5, 'description': '–ù–µ–±–æ–ª—å—à–∞—è —Å—É–º–º–∞ –º–æ–Ω–µ—Ç'},
                        {'type': 'coins', 'amount': [51, 120], 'chance': 0.3, 'description': '–°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ –º–æ–Ω–µ—Ç'},
                        {'type': 'coins', 'amount': [121, 250], 'chance': 0.15, 'description': '–•–æ—Ä–æ—à–∞—è —Å—É–º–º–∞ –º–æ–Ω–µ—Ç'},
                        {'type': 'special_item', 'name': '–°–µ—Ä–µ–±—Ä—è–Ω—ã–π –∞–º—É–ª–µ—Ç', 'chance': 0.05, 'description': '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É –Ω–∞ 10%'}
                    ])),
                    ('‚ö° –ë—ã—Å—Ç—Ä—ã–π –∫–µ–π—Å', 75, json.dumps([
                        {'type': 'coins', 'amount': [30, 80], 'chance': 0.7, 'description': '–ë—ã—Å—Ç—Ä—ã–µ –º–æ–Ω–µ—Ç—ã'},
                        {'type': 'coins', 'amount': [81, 180], 'chance': 0.2, 'description': '–ë—ã—Å—Ç—Ä–∞—è —Ö–æ—Ä–æ—à–∞—è —Å—É–º–º–∞'},
                        {'type': 'special_item', 'name': '–ü–µ—Ä—á–∞—Ç–∫–∞ –≤–æ—Ä–∞', 'chance': 0.1, 'description': '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —à–∞–Ω—Å –∫—Ä–∞–∂–∏ –Ω–∞ 20%'}
                    ])),
                    ('üì¶ –°—Ä–µ–¥–Ω–∏–π –∫–µ–π—Å', 150, json.dumps([
                        {'type': 'coins', 'amount': [50, 100], 'chance': 0.4, 'description': '–ù–∞–¥–µ–∂–Ω–∞—è —Å—É–º–º–∞ –º–æ–Ω–µ—Ç'},
                        {'type': 'coins', 'amount': [101, 250], 'chance': 0.3, 'description': '–û—Ç–ª–∏—á–Ω–∞—è —Å—É–º–º–∞ –º–æ–Ω–µ—Ç'},
                        {'type': 'special_item', 'name': '–ó–æ–ª–æ—Ç–æ–π –∞–º—É–ª–µ—Ç', 'chance': 0.15, 'description': '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É –Ω–∞ 20%'},
                        {'type': 'coins', 'amount': [251, 500], 'chance': 0.1, 'description': '–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à'},
                        {'type': 'bonus', 'multiplier': 1.2, 'duration': 12, 'chance': 0.05, 'description': '–í—Ä–µ–º–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å x1.2 –Ω–∞ 12 —á–∞—Å–æ–≤'}
                    ])),
                    ('üíé –ë–æ–ª—å—à–æ–π –∫–µ–π—Å', 500, json.dumps([
                        {'type': 'coins', 'amount': [200, 400], 'chance': 0.6, 'description': '–°–æ–ª–∏–¥–Ω–∞—è —Å—É–º–º–∞'},
                        {'type': 'coins', 'amount': [401, 1000], 'chance': 0.25, 'description': '–û—á–µ–Ω—å —Ö–æ—Ä–æ—à–∞—è —Å—É–º–º–∞'},
                        {'type': 'special_item', 'name': '–ó–æ–ª–æ—Ç–æ–π –∫–ª—é—á', 'chance': 0.08, 'description': '–û—Å–æ–±—ã–π –ø—Ä–µ–¥–º–µ—Ç'},
                        {'type': 'bonus', 'multiplier': 1.5, 'duration': 24, 'chance': 0.07, 'description': '–í—Ä–µ–º–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å x1.5 –Ω–∞ 24 —á–∞—Å–∞'}
                    ])),
                    ('üëë –≠–ª–∏—Ç–Ω—ã–π –∫–µ–π—Å', 1000, json.dumps([
                        {'type': 'coins', 'amount': [500, 1000], 'chance': 0.3, 'description': '–≠–ª–∏—Ç–Ω—ã–µ –º–æ–Ω–µ—Ç—ã'},
                        {'type': 'coins', 'amount': [-300, -100], 'chance': 0.2, 'description': '–ù–µ—É–¥–∞—á–∞ (–ø–æ—Ç–µ—Ä—è –º–æ–Ω–µ—Ç)'},
                        {'type': 'special_item', 'name': '–î—Ä–µ–≤–Ω–∏–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç', 'chance': 0.15, 'description': '–ú–æ—â–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞–≥—Ä–∞–¥'},
                        {'type': 'bonus', 'multiplier': 2.0, 'duration': 48, 'chance': 0.1, 'description': '–í—Ä–µ–º–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å x2.0 –Ω–∞ 48 —á–∞—Å–æ–≤'},
                        {'type': 'coins', 'amount': [1001, 3000], 'chance': 0.15, 'description': '–≠–ª–∏—Ç–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à'},
                        {'type': 'coins', 'amount': [3001, 6000], 'chance': 0.1, 'description': '–≠–ª–∏—Ç–Ω—ã–π –¥–∂–µ–∫–ø–æ—Ç'}
                    ])),
                    ('üîÆ –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–µ–π—Å', 2000, json.dumps([
                        {'type': 'coins', 'amount': [800, 1500], 'chance': 0.3, 'description': '–°–µ–∫—Ä–µ—Ç–Ω—ã–µ –º–æ–Ω–µ—Ç—ã'},
                        {'type': 'coins', 'amount': [-1000, -500], 'chance': 0.15, 'description': '–°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ä–∏—Å–∫'},
                        {'type': 'special_item', 'name': '–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π –ø—Ä–µ–¥–º–µ—Ç', 'chance': 0.15, 'description': '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞–≥—Ä–∞–¥'},
                        {'type': 'bonus', 'multiplier': 3.0, 'duration': 72, 'chance': 0.1, 'description': '–í—Ä–µ–º–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å x3.0 –Ω–∞ 72 —á–∞—Å–∞'},
                        {'type': 'coins', 'amount': [1501, 3000], 'chance': 0.15, 'description': '–°–µ–∫—Ä–µ—Ç–Ω–∞—è —É–¥–∞—á–∞'},
                        {'type': 'coins', 'amount': [4001, 7000], 'chance': 0.15, 'description': '–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª–∞–¥'}
                    ]))
                ]
                
                for case in improved_cases:
                    cursor.execute('INSERT INTO cases (name, price, rewards) VALUES (%s, %s, %s)', case)
                
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(improved_cases)} —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –∫–µ–π—Å–æ–≤!")
            else:
                print(f"‚úÖ –í –±–∞–∑–µ —É–∂–µ –µ—Å—Ç—å {current_count} –∫–µ–π—Å–æ–≤, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            cursor.execute('SELECT COUNT(*) FROM items')
            items_count = cursor.fetchone()[0]
            
            if items_count == 0:
                print("üîÑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤...")
                
                default_items = [
                    ('–ó–æ–ª–æ—Ç–æ–π –∞–º—É–ª–µ—Ç', '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É', 500, 'rare', 'daily_bonus', 1.2, '+20% –∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥–µ'),
                    ('–°–µ—Ä–µ–±—Ä—è–Ω—ã–π –∞–º—É–ª–µ—Ç', '–ù–µ–±–æ–ª—å—à–æ–π –±–æ–Ω—É—Å –∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥–µ', 250, 'common', 'daily_bonus', 1.1, '+10% –∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥–µ'),
                    ('–ö–æ–ª—å—Ü–æ —É–¥–∞—á–∏', '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã –∏–∑ –∫–µ–π—Å–æ–≤', 600, 'rare', 'case_bonus', 1.15, '+15% –∫ –Ω–∞–≥—Ä–∞–¥–∞–º –∏–∑ –∫–µ–π—Å–æ–≤'),
                    ('–ë—Ä–∞—Å–ª–µ—Ç –≤–µ–∑–µ–Ω–∏—è', '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –≤—ã–∏–≥—Ä—ã—à–∏ –≤ –∏–≥—Ä–∞—Ö', 450, 'uncommon', 'game_bonus', 1.1, '+10% –∫ –≤—ã–∏–≥—Ä—ã—à–∞–º –≤ –∏–≥—Ä–∞—Ö'),
                    ('–ó–∞—â–∏—Ç–Ω—ã–π —Ç–∞–ª–∏—Å–º–∞–Ω', '–ó–∞—â–∏—â–∞–µ—Ç –æ—Ç –∫—Ä–∞–∂', 800, 'epic', 'steal_protection', 0.5, '-50% –∫ —à–∞–Ω—Å—É –∫—Ä–∞–∂–∏ —É –≤–∞—Å'),
                    ('–ü–µ—Ä—á–∞—Ç–∫–∞ –≤–æ—Ä–∞', '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —à–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ–π –∫—Ä–∞–∂–∏', 700, 'rare', 'steal_bonus', 1.2, '+20% –∫ —à–∞–Ω—Å—É —É—Å–ø–µ—à–Ω–æ–π –∫—Ä–∞–∂–∏'),
                    ('–ú–∞–≥–∏—á–µ—Å–∫–∏–π —Å–≤–∏—Ç–æ–∫', '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –≤—ã–∏–≥—Ä—ã—à –≤ —Ä—É–ª–µ—Ç–∫–µ', 550, 'rare', 'roulette_bonus', 1.25, '+25% –∫ –≤—ã–∏–≥—Ä—ã—à—É –≤ —Ä—É–ª–µ—Ç–∫–µ'),
                    ('–ö—Ä–∏—Å—Ç–∞–ª–ª –º–∞–Ω—ã', '–£–º–Ω–æ–∂–∞–µ—Ç –≤—Å–µ –Ω–∞–≥—Ä–∞–¥—ã', 1000, 'epic', 'multiplier', 1.3, 'x1.3 –∫ –ª—é–±—ã–º –Ω–∞–≥—Ä–∞–¥–∞–º'),
                    ('–î—Ä–µ–≤–Ω–∏–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç', '–ú–æ—â–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞–≥—Ä–∞–¥', 2000, 'legendary', 'multiplier', 1.5, 'x1.5 –∫ –ª—é–±—ã–º –Ω–∞–≥—Ä–∞–¥–∞–º'),
                    ('–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π –ø—Ä–µ–¥–º–µ—Ç', '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞–≥—Ä–∞–¥', 5000, 'mythic', 'multiplier', 2.0, 'x2.0 –∫ –ª—é–±—ã–º –Ω–∞–≥—Ä–∞–¥–∞–º'),
                ]
                
                for item in default_items:
                    cursor.execute('INSERT INTO items (name, description, value, rarity, buff_type, buff_value, buff_description) VALUES (%s, %s, %s, %s, %s, %s, %s)', item)
                
                print("‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
            
            self.conn.commit()
            print("‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            self.conn.rollback()

    def get_user(self, user_id):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            cursor = self.conn.cursor()
            cursor.execute('SELECT * FROM users WHERE user_id = %s', (user_id,))
            user = cursor.fetchone()
            
            if not user:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cursor.execute('''
                    INSERT INTO users (user_id, balance, inventory) 
                    VALUES (%s, %s, %s)
                ''', (user_id, 100, json.dumps({"cases": {}, "items": {}})))
                self.conn.commit()
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cursor.execute('SELECT * FROM users WHERE user_id = %s', (user_id,))
                user = cursor.fetchone()
            
            return user
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_user –¥–ª—è {user_id}: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ—Ä—Ç–µ–∂ —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            return (user_id, 100, 0, None, json.dumps({"cases": {}, "items": {}}), datetime.datetime.now())

    def get_user_safe(self, user_id):
        """–ê–ª–∏–∞—Å –¥–ª—è get_user –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        return self.get_user(user_id)
    
    def update_balance(self, user_id, amount):
        cursor = self.conn.cursor()
        cursor.execute('UPDATE users SET balance = balance + %s WHERE user_id = %s', (amount, user_id))
        self.conn.commit()
    
    def log_transaction(self, user_id, transaction_type, amount, target_user_id=None, description=""):
        cursor = self.conn.cursor()
        cursor.execute('''
            INSERT INTO transactions (user_id, type, amount, target_user_id, description)
            VALUES (%s, %s, %s, %s, %s)
        ''', (user_id, transaction_type, amount, target_user_id, description))
        self.conn.commit()
    
    def get_cases(self):
        cursor = self.conn.cursor()
        cursor.execute('SELECT * FROM cases ORDER BY price ASC')
        return cursor.fetchall()
    
    def get_case(self, case_id):
        cursor = self.conn.cursor()
        cursor.execute('SELECT * FROM cases WHERE id = %s', (case_id,))
        return cursor.fetchone()
    
    def get_items(self):
        cursor = self.conn.cursor()
        cursor.execute('SELECT * FROM items')
        return cursor.fetchall()
    
    def get_item(self, item_id):
        cursor = self.conn.cursor()
        cursor.execute('SELECT * FROM items WHERE id = %s', (item_id,))
        return cursor.fetchone()
    
    def get_item_by_name(self, item_name):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ –∏–º–µ–Ω–∏"""
        try:
            cursor = self.conn.cursor()
            cursor.execute('SELECT * FROM items WHERE name = %s', (item_name,))
            item = cursor.fetchone()
            return item
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_item_by_name –¥–ª—è {item_name}: {e}")
            return None
    
    def add_item_to_inventory(self, user_id, item_name):
        cursor = self.conn.cursor()
        
        cursor.execute('SELECT id FROM items WHERE name = %s', (item_name,))
        item_result = cursor.fetchone()
        
        if not item_result:
            # –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ –±–µ–∑ –±–∞—Ñ–∞
            cursor.execute('INSERT INTO items (name, description, value, rarity) VALUES (%s, %s, %s, %s) RETURNING id', 
                          (item_name, '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç', 100, 'common'))
            item_id = cursor.fetchone()[0]
        else:
            item_id = item_result[0]
        
        cursor.execute('SELECT inventory FROM users WHERE user_id = %s', (user_id,))
        result = cursor.fetchone()
        
        if result and result[0]:
            inventory_data = json.loads(result[0])
        else:
            inventory_data = {"cases": {}, "items": {}}
            
        if "items" not in inventory_data:
            inventory_data["items"] = {}
            
        item_key = str(item_id)
        if item_key in inventory_data["items"]:
            inventory_data["items"][item_key] += 1
        else:
            inventory_data["items"][item_key] = 1
        
        cursor.execute('UPDATE users SET inventory = %s WHERE user_id = %s', 
                      (json.dumps(inventory_data), user_id))
        self.conn.commit()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        self.update_user_stat(user_id, 'items_collected')
    
    def remove_item_from_inventory(self, user_id, item_name):
        cursor = self.conn.cursor()
        
        cursor.execute('SELECT id FROM items WHERE name = %s', (item_name,))
        item_result = cursor.fetchone()
        
        if not item_result:
            return False
            
        item_id = str(item_result[0])
        
        cursor.execute('SELECT inventory FROM users WHERE user_id = %s', (user_id,))
        result = cursor.fetchone()
        
        if not result or not result[0]:
            return False
            
        inventory_data = json.loads(result[0])
        
        if item_id in inventory_data.get("items", {}):
            if inventory_data["items"][item_id] > 1:
                inventory_data["items"][item_id] -= 1
            else:
                del inventory_data["items"][item_id]
            
            cursor.execute('UPDATE users SET inventory = %s WHERE user_id = %s', 
                          (json.dumps(inventory_data), user_id))
            self.conn.commit()
            return True
        return False

    def add_case_to_inventory(self, user_id, case_id, case_name, source="gifted"):
        cursor = self.conn.cursor()
        cursor.execute('SELECT inventory FROM users WHERE user_id = %s', (user_id,))
        result = cursor.fetchone()
        
        if result and result[0]:
            inventory = json.loads(result[0])
        else:
            inventory = {"cases": {}, "items": {}}
        
        if "cases" not in inventory:
            inventory["cases"] = {}
        
        case_key = f"case_{case_id}"
        if case_key in inventory["cases"]:
            inventory["cases"][case_key]["count"] += 1
        else:
            inventory["cases"][case_key] = {
                "name": case_name,
                "count": 1,
                "source": source
            }
        
        cursor.execute('UPDATE users SET inventory = %s WHERE user_id = %s', (json.dumps(inventory), user_id))
        self.conn.commit()
    
    def get_user_inventory(self, user_id):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            cursor = self.conn.cursor()
            cursor.execute('SELECT inventory FROM users WHERE user_id = %s', (user_id,))
            result = cursor.fetchone()
            
            if result and result[0]:
                try:
                    return json.loads(result[0])
                except json.JSONDecodeError:
                    return {"cases": {}, "items": {}}
            return {"cases": {}, "items": {}}
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_user_inventory –¥–ª—è {user_id}: {e}")
            return {"cases": {}, "items": {}}

    def get_user_inventory_safe(self, user_id):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            cursor = self.conn.cursor()
            cursor.execute('SELECT inventory FROM users WHERE user_id = %s', (user_id,))
            result = cursor.fetchone()
            
            if result and result[0]:
                try:
                    inventory_data = json.loads(result[0])
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
                    if not isinstance(inventory_data, dict):
                        inventory_data = {"cases": {}, "items": {}}
                    if "cases" not in inventory_data:
                        inventory_data["cases"] = {}
                    if "items" not in inventory_data:
                        inventory_data["items"] = {}
                    return inventory_data
                except json.JSONDecodeError:
                    return {"cases": {}, "items": {}}
            return {"cases": {}, "items": {}}
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_user_inventory_safe: {e}")
            return {"cases": {}, "items": {}}
    
    def get_all_items_safe(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
        try:
            cursor = self.conn.cursor()
            cursor.execute('SELECT * FROM items')
            return cursor.fetchall()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_all_items_safe: {e}")
            return []
    
    def remove_case_from_inventory(self, user_id, case_id):
        cursor = self.conn.cursor()
        cursor.execute('SELECT inventory FROM users WHERE user_id = %s', (user_id,))
        result = cursor.fetchone()
        
        if not result or not result[0]:
            return False
            
        inventory = json.loads(result[0])
        
        case_key = f"case_{case_id}"
        if case_key in inventory.get("cases", {}):
            if inventory["cases"][case_key]["count"] > 1:
                inventory["cases"][case_key]["count"] -= 1
            else:
                del inventory["cases"][case_key]
            
            cursor.execute('UPDATE users SET inventory = %s WHERE user_id = %s', (json.dumps(inventory), user_id))
            self.conn.commit()
            return True
        return False

    def update_user_stat(self, user_id, stat_name, increment=1):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
        try:
            cursor = self.conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            cursor.execute('SELECT 1 FROM user_stats WHERE user_id = %s', (user_id,))
            if not cursor.fetchone():
                cursor.execute('INSERT INTO user_stats (user_id) VALUES (%s)', (user_id,))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            cursor.execute(f'''
                UPDATE user_stats SET {stat_name} = {stat_name} + %s 
                WHERE user_id = %s
            ''', (increment, user_id))
            
            self.conn.commit()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            return self.check_achievements(user_id)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ update_user_stat: {e}")
            return []
    
    def check_achievements(self, user_id):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –≤—ã–¥–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            cursor = self.conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute('SELECT * FROM user_stats WHERE user_id = %s', (user_id,))
            stats = cursor.fetchone()
            
            if not stats:
                return []
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = self.get_user(user_id)
            balance = user_data[1] if len(user_data) > 1 else 0
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            inventory = self.get_user_inventory(user_id)
            unique_items = len(inventory.get("items", {}))
            
            # –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            cursor.execute('SELECT achievement_id FROM achievements WHERE user_id = %s', (user_id,))
            user_achievements = [row[0] for row in cursor.fetchall()]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
            achievements_to_add = []
            
            # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –±–∞–ª–∞–Ω—Å—É
            if 'rich' not in user_achievements and balance >= 10000:
                achievements_to_add.append('rich')
            if 'millionaire' not in user_achievements and balance >= 100000:
                achievements_to_add.append('millionaire')
            
            # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –∫–µ–π—Å–∞–º
            if 'case_opener' not in user_achievements and stats[1] >= 50:  # cases_opened
                achievements_to_add.append('case_opener')
            if 'case_master' not in user_achievements and stats[1] >= 200:
                achievements_to_add.append('case_master')
            
            # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –∏–≥—Ä–∞–º
            if 'gambler' not in user_achievements and stats[5] >= 25:  # roulette_wins
                achievements_to_add.append('gambler')
            if 'thief' not in user_achievements and stats[3] >= 20:  # steals_successful
                achievements_to_add.append('thief')
            if 'duel_master' not in user_achievements and stats[2] >= 25:  # duels_won
                achievements_to_add.append('duel_master')
            if 'slot_king' not in user_achievements and stats[6] >= 1:  # slot_wins (–¥–∂–µ–∫–ø–æ—Ç)
                achievements_to_add.append('slot_king')
            if 'blackjack_pro' not in user_achievements and stats[7] >= 10:  # blackjack_wins
                achievements_to_add.append('blackjack_pro')
            if 'coinflip_champ' not in user_achievements and stats[8] >= 30:  # coinflip_wins
                achievements_to_add.append('coinflip_champ')
            
            # –î—Ä—É–≥–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            if 'trader' not in user_achievements and stats[11] >= 15:  # market_sales
                achievements_to_add.append('trader')
            if 'gifter' not in user_achievements and stats[12] >= 10:  # gifts_sent
                achievements_to_add.append('gifter')
            if 'veteran' not in user_achievements and stats[9] >= 30:  # daily_claimed
                achievements_to_add.append('veteran')
            if 'lucky' not in user_achievements and stats[13] >= 3:  # consecutive_wins
                achievements_to_add.append('lucky')
            if 'item_collector' not in user_achievements and unique_items >= 10:
                achievements_to_add.append('item_collector')
            if 'buff_master' not in user_achievements and self.get_active_buffs_count(user_id) >= 5:
                achievements_to_add.append('buff_master')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –≤—ã–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã
            for achievement_id in achievements_to_add:
                cursor.execute('INSERT INTO achievements (user_id, achievement_id) VALUES (%s, %s)', 
                              (user_id, achievement_id))
                
                # –í—ã–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
                reward = ACHIEVEMENTS[achievement_id]['reward']
                self.update_balance(user_id, reward)
                self.log_transaction(user_id, 'achievement_reward', reward, description=f"–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: {ACHIEVEMENTS[achievement_id]['name']}")
            
            self.conn.commit()
            
            return achievements_to_add
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ check_achievements: {e}")
            return []

    def get_item_name_by_id(self, item_id):
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ ID"""
        try:
            if not item_id or not str(item_id).isdigit():
                return f"–ü—Ä–µ–¥–º–µ—Ç ID:{item_id}"
                
            item_data = self.get_item(int(item_id))
            if item_data and len(item_data) > 1 and item_data[1]:
                return item_data[1]  # –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
            return f"–ü—Ä–µ–¥–º–µ—Ç ID:{item_id}"
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ {item_id}: {e}")
            return f"–ü—Ä–µ–¥–º–µ—Ç ID:{item_id}"

    def update_consecutive_wins(self, user_id, win=True):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–±–µ–¥"""
        cursor = self.conn.cursor()
        
        if win:
            cursor.execute('''
                UPDATE user_stats 
                SET consecutive_wins = consecutive_wins + 1, last_win_time = CURRENT_TIMESTAMP
                WHERE user_id = %s
            ''', (user_id,))
        else:
            cursor.execute('''
                UPDATE user_stats 
                SET consecutive_wins = 0
                WHERE user_id = %s
            ''', (user_id,))
        
        self.conn.commit()
    
    def get_user_buffs(self, user_id):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –±–∞—Ñ–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            inventory = self.get_user_inventory(user_id)
            buffs = {}
            
            for item_id, count in inventory.get("items", {}).items():
                try:
                    if not item_id.isdigit():
                        continue
                        
                    item_data = self.get_item(int(item_id))
                    if item_data and len(item_data) > 6 and item_data[5]:  # buff_type
                        buff_type = item_data[5]
                        buff_value = item_data[6] if len(item_data) > 6 else 1.0
                        
                        # –ë–µ—Ä–µ–º —Å–∞–º—ã–π —Å–∏–ª—å–Ω—ã–π –±–∞—Ñ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
                        if buff_type not in buffs or buff_value > buffs[buff_type]['value']:
                            buffs[buff_type] = {
                                'value': buff_value,
                                'description': item_data[7] if len(item_data) > 7 else "–ë–æ–Ω—É—Å",
                                'item_name': item_data[1] if len(item_data) > 1 else "–ü—Ä–µ–¥–º–µ—Ç"
                            }
                except (ValueError, IndexError) as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ {item_id}: {e}")
                    continue
            
            return buffs
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_user_buffs –¥–ª—è {user_id}: {e}")
            return {}
    
    def get_active_buffs_count(self, user_id):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±–∞—Ñ–æ–≤"""
        buffs = self.get_user_buffs(user_id)
        return len(buffs)
    
    def apply_buff_to_amount(self, user_id, base_amount, buff_type):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –±–∞—Ñ –∫ —Å—É–º–º–µ, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        buffs = self.get_user_buffs(user_id)
        if buff_type in buffs:
            return int(base_amount * buffs[buff_type]['value'])
        return base_amount
    
    def apply_buff_to_chance(self, user_id, base_chance, buff_type):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –±–∞—Ñ –∫ —à–∞–Ω—Å—É, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        buffs = self.get_user_buffs(user_id)
        if buff_type in buffs:
            return base_chance * buffs[buff_type]['value']
        return base_chance
    
    def get_all_users(self):
        cursor = self.conn.cursor()
        cursor.execute('SELECT * FROM users ORDER BY balance DESC')
        return cursor.fetchall()
    
    def get_all_transactions(self, limit=50):
        cursor = self.conn.cursor()
        cursor.execute('SELECT * FROM transactions ORDER BY timestamp DESC LIMIT %s', (limit,))
        return cursor.fetchall()
    
    def get_all_items(self):
        cursor = self.conn.cursor()
        cursor.execute('SELECT * FROM items')
        return cursor.fetchall()

    def get_user_quests(self, user_id):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–≤–µ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            cursor = self.conn.cursor()
            cursor.execute('SELECT quest_id, progress, completed FROM quests WHERE user_id = %s', (user_id,))
            return cursor.fetchall()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_user_quests: {e}")
            return []
    
    def add_user_quest(self, user_id, quest_id):
        """–î–æ–±–∞–≤–∏—Ç—å –∫–≤–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            cursor = self.conn.cursor()
            cursor.execute('''
                INSERT INTO quests (user_id, quest_id, progress, completed) 
                VALUES (%s, %s, %s, %s)
                ON CONFLICT (user_id, quest_id) DO NOTHING
            ''', (user_id, quest_id, 0, False))
            self.conn.commit()
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ add_user_quest: {e}")
            return False
    
    def update_quest_progress(self, user_id, quest_id, progress, completed=False):
        """–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–≤–µ—Å—Ç–∞"""
        try:
            cursor = self.conn.cursor()
            cursor.execute('''
                UPDATE quests SET progress = %s, completed = %s 
                WHERE user_id = %s AND quest_id = %s
            ''', (progress, completed, user_id, quest_id))
            self.conn.commit()
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ update_quest_progress: {e}")
            return False

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞–≥—Ä–∞–¥–∞–º–∏
def get_reward(case):
    rand = random.random()
    cumulative = 0
    for reward in case['rewards']:
        cumulative += reward['chance']
        if rand <= cumulative:
            return reward
    return case['rewards'][-1]

async def create_custom_role_webhook(user):
    try:
        channel = bot.get_channel(LOG_CHANNEL_ID)
        if channel:
            webhook = await channel.create_webhook(name=f"Role-{user.name}")
            message = f"üéâ <@{user.id}> –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤–∞–º –≤—ã–ø–∞–ª–∞ –∫–∞—Å—Ç–æ–º —Ä–æ–ª—å –Ω–∞ 2 –¥–Ω—è, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä <@{ADMIN_USER_ID}> —Å–∫–æ—Ä–æ –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç –∏ –≤—ã –≤—ã–±–µ—Ä–µ—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å"
            await webhook.send(
                content=message,
                username="Case System",
                avatar_url=bot.user.avatar.url if bot.user.avatar else None
            )
            await webhook.delete()
            return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ–±—Ö—É–∫–∞ –¥–ª—è —Ä–æ–ª–∏: {e}")
    return False

async def process_reward(user, reward, case):
    if reward['type'] == 'coins':
        amount = random.randint(reward['amount'][0], reward['amount'][1])
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–∞—Ñ—ã –∫ –Ω–∞–≥—Ä–∞–¥–µ –∏–∑ –∫–µ–π—Å–∞
        amount = db.apply_buff_to_amount(user.id, amount, 'case_bonus')
        amount = db.apply_buff_to_amount(user.id, amount, 'multiplier')
        amount = db.apply_buff_to_amount(user.id, amount, 'all_bonus')
        
        db.update_balance(user.id, amount)
        db.log_transaction(user.id, 'case_reward', amount, description=f"–ù–∞–≥—Ä–∞–¥–∞ –∏–∑ {case['name']}")
        return f"üí∞ {amount} {EMOJIS['coin']} - {reward.get('description', '–ú–æ–Ω–µ—Ç—ã')}"
    
    elif reward['type'] == 'custom_role':
        await create_custom_role_webhook(user)
        return "üé≠ –ö–∞—Å—Ç–æ–º–Ω–∞—è —Ä–æ–ª—å! (–°–æ–∑–¥–∞–Ω –∑–∞–ø—Ä–æ—Å –≤ –∫–∞–Ω–∞–ª–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏)"
    
    elif reward['type'] == 'special_item':
        db.add_item_to_inventory(user.id, reward['name'])
        return f"üì¶ {reward['name']} - {reward.get('description', '–û—Å–æ–±—ã–π –ø—Ä–µ–¥–º–µ—Ç')}"
    
    elif reward['type'] == 'bonus':
        return f"üöÄ –ë–æ–Ω—É—Å x{reward['multiplier']} –Ω–∞ {reward['duration']}—á - {reward.get('description', '–í—Ä–µ–º–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å')}"
    
    elif reward['type'] == 'role':
        return f"üëë –†–æ–ª—å: {reward['name']} –Ω–∞ {reward['duration']}—á"
    
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞"

# –ö–õ–ê–°–°–´ –î–õ–Ø –ú–ò–ù–ò-–ò–ì–† (–∏–∑ –≤—Ç–æ—Ä–æ–≥–æ –∫–æ–¥–∞)

class CaseView(View):
    def __init__(self, case_id, user_id):
        super().__init__(timeout=60)
        self.case_id = case_id
        self.user_id = user_id
        self.opened = False
    
    @discord.ui.button(label='–û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å', style=discord.ButtonStyle.primary, emoji='üéÅ')
    async def open_case(self, interaction: discord.Interaction, button: Button):
        if self.opened:
            return
        
        if interaction.user.id != self.user_id:
            await interaction.response.send_message("–≠—Ç–æ—Ç –∫–µ–π—Å –Ω–µ –¥–ª—è –≤–∞—Å!", ephemeral=True)
            return
        
        self.opened = True
        case_data = db.get_case(self.case_id)
        if not case_data:
            await interaction.response.send_message("–ö–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!", ephemeral=True)
            return
        
        case = {
            'name': case_data[1],
            'price': case_data[2],
            'rewards': json.loads(case_data[3])
        }
        
        user_data = db.get_user(self.user_id)
        user_safe = get_user_data_safe(user_data)
        
        if user_safe['balance'] < case['price']:
            await interaction.response.send_message("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!", ephemeral=True)
            return
        
        # –°–ø–∏–Ω –∞–Ω–∏–º–∞—Ü–∏—è
        embed = discord.Embed(title="üé∞ –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–∞...", color=0xffd700)
        await interaction.response.send_message(embed=embed)
        
        for i in range(3):
            await asyncio.sleep(1)
            embed.description = "üéÅ" * (i + 1)
            await interaction.edit_original_response(embed=embed)
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã
        reward = get_reward(case)
        db.update_balance(self.user_id, -case['price'])
        db.log_transaction(self.user_id, 'case_purchase', -case['price'], description=f"–ö–µ–π—Å: {case['name']}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–æ–≤
        db.update_user_stat(self.user_id, 'cases_opened')
        
        # –í—ã–¥–∞—á–∞ –Ω–∞–≥—Ä–∞–¥—ã
        reward_text = await process_reward(interaction.user, reward, case)
        
        embed = discord.Embed(
            title=f"üéâ {case['name']} –æ—Ç–∫—Ä—ã—Ç!",
            description=reward_text,
            color=0x00ff00
        )
        embed.set_footer(text=f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {case['price']} {EMOJIS['coin']}")
        
        await interaction.edit_original_response(embed=embed)

class CoinFlipView(View):
    def __init__(self, user_id, bet):
        super().__init__(timeout=30)
        self.user_id = user_id
        self.bet = bet
        self.choice_made = False
    
    @discord.ui.button(label='ü¶Ö –û—Ä—ë–ª', style=discord.ButtonStyle.primary)
    async def heads(self, interaction: discord.Interaction, button: Button):
        await self.process_choice(interaction, 'heads')
    
    @discord.ui.button(label='üí∞ –†–µ—à–∫–∞', style=discord.ButtonStyle.primary)
    async def tails(self, interaction: discord.Interaction, button: Button):
        await self.process_choice(interaction, 'tails')
    
    async def process_choice(self, interaction: discord.Interaction, choice):
        if self.choice_made:
            return
        
        if interaction.user.id != self.user_id:
            await interaction.response.send_message("–≠—Ç–∞ –∏–≥—Ä–∞ –Ω–µ –¥–ª—è –≤–∞—Å!", ephemeral=True)
            return
        
        self.choice_made = True
        
        # –ü–æ–¥–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç—É
        result = random.choice(['heads', 'tails'])
        win = choice == result
        
        # –ê–Ω–∏–º–∞—Ü–∏—è
        embed = discord.Embed(title="ü™ô –ú–æ–Ω–µ—Ç–∞ –≤ –≤–æ–∑–¥—É—Ö–µ...", color=0xffd700)
        await interaction.response.edit_message(embed=embed, view=None)
        
        for i in range(3):
            await asyncio.sleep(0.5)
            embed.description = "üåÄ" * (i + 1)
            await interaction.edit_original_response(embed=embed)
        
        await asyncio.sleep(1)
        
        if win:
            base_winnings = int(self.bet * 1.8)  # 80% –ø—Ä–∏–±—ã–ª—å
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–∞—Ñ—ã –∫ –≤—ã–∏–≥—Ä—ã—à—É
            winnings = db.apply_buff_to_amount(self.user_id, base_winnings, 'coinflip_bonus')
            winnings = db.apply_buff_to_amount(self.user_id, winnings, 'game_bonus')
            winnings = db.apply_buff_to_amount(self.user_id, winnings, 'multiplier')
            winnings = db.apply_buff_to_amount(self.user_id, winnings, 'all_bonus')
            
            db.update_balance(self.user_id, winnings)
            db.log_transaction(self.user_id, 'coinflip_win', winnings, description="–ü–æ–±–µ–¥–∞ –≤ coinflip")
            db.update_user_stat(self.user_id, 'coinflip_wins')
            db.update_consecutive_wins(self.user_id, True)
            
            result_text = f"–ü–û–ë–ï–î–ê! –í—ã–ø–∞–ª–æ: {'ü¶Ö –û—Ä—ë–ª' if result == 'heads' else 'üí∞ –†–µ—à–∫–∞'}\n–í—ã–∏–≥—Ä—ã—à: {winnings} {EMOJIS['coin']}"
            color = 0x00ff00
        else:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–∞—Ñ –∑–∞—â–∏—Ç—ã –æ—Ç –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π
            loss = db.apply_buff_to_amount(self.user_id, self.bet, 'loss_protection')
            db.update_balance(self.user_id, -loss)
            db.log_transaction(self.user_id, 'coinflip_loss', -loss, description="–ü—Ä–æ–∏–≥—Ä—ã—à –≤ coinflip")
            db.update_consecutive_wins(self.user_id, False)
            
            result_text = f"–ü–†–û–ò–ì–†–´–®! –í—ã–ø–∞–ª–æ: {'ü¶Ö –û—Ä—ë–ª' if result == 'heads' else 'üí∞ –†–µ—à–∫–∞'}\n–ü–æ—Ç–µ—Ä—è–Ω–æ: {loss} {EMOJIS['coin']}"
            color = 0xff0000
        
        embed = discord.Embed(
            title=f"ü™ô –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–Ω–∏—è –º–æ–Ω–µ—Ç—ã",
            description=f"–í–∞—à –≤—ã–±–æ—Ä: {'ü¶Ö –û—Ä—ë–ª' if choice == 'heads' else 'üí∞ –†–µ—à–∫–∞'}\n{result_text}",
            color=color
        )
        embed.add_field(name="–°—Ç–∞–≤–∫–∞", value=f"{self.bet} {EMOJIS['coin']}")
        
        await interaction.edit_original_response(embed=embed)

class BlackjackView(View):
    def __init__(self, user_id, bet):
        super().__init__(timeout=60)
        self.user_id = user_id
        self.bet = bet
        self.user_cards = []
        self.dealer_cards = []
        self.game_over = False
        
        # –ù–∞—á–∞–ª—å–Ω–∞—è —Ä–∞–∑–¥–∞—á–∞
        self.user_cards = [self.draw_card(), self.draw_card()]
        self.dealer_cards = [self.draw_card(), self.draw_card()]
    
    def draw_card(self):
        return random.randint(1, 11)  # 11 - —ç—Ç–æ —Ç—É–∑
    
    def calculate_score(self, cards):
        score = sum(cards)
        aces = cards.count(11)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—É–∑–æ–≤
        while score > 21 and aces > 0:
            score -= 10
            aces -= 1
        
        return score
    
    def create_embed(self):
        user_score = self.calculate_score(self.user_cards)
        dealer_score = self.calculate_score([self.dealer_cards[0]])  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∫–∞—Ä—Ç—É –¥–∏–ª–µ—Ä–∞
        
        embed = discord.Embed(title="üÉè –ë–ª—ç–∫–¥–∂–µ–∫", color=0x2ecc71)
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_cards_display = ' '.join([f'`{card}`' for card in self.user_cards])
        embed.add_field(
            name="–í–∞—à–∏ –∫–∞—Ä—Ç—ã",
            value=f"{user_cards_display} (–û—á–∫–∏: {user_score})",
            inline=False
        )
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é –≤–∏–¥–Ω–∞)
        dealer_cards_display = f'`{self.dealer_cards[0]}` ' + ' '.join(['`?`' for _ in range(len(self.dealer_cards)-1)])
        embed.add_field(
            name="–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞", 
            value=f"{dealer_cards_display} (–û—á–∫–∏: {dealer_score}+)",
            inline=False
        )
        
        embed.add_field(name="–°—Ç–∞–≤–∫–∞", value=f"{self.bet} {EMOJIS['coin']}", inline=True)
        
        return embed
    
    @discord.ui.button(label='–í–∑—è—Ç—å –∫–∞—Ä—Ç—É', style=discord.ButtonStyle.primary)
    async def hit(self, interaction: discord.Interaction, button: Button):
        if self.game_over:
            await interaction.response.send_message("–ò–≥—Ä–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", ephemeral=True)
            return
        
        if interaction.user.id != self.user_id:
            await interaction.response.send_message("–≠—Ç–∞ –∏–≥—Ä–∞ –Ω–µ –¥–ª—è –≤–∞—Å!", ephemeral=True)
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É
        self.user_cards.append(self.draw_card())
        user_score = self.calculate_score(self.user_cards)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–±–æ—Ä
        if user_score > 21:
            # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –∏–≥—Ä—ã
            for item in self.children:
                item.disabled = True
            
            embed = self.create_embed()
            embed.add_field(name="–†–µ–∑—É–ª—å—Ç–∞—Ç", value="–ü–µ—Ä–µ–±–æ—Ä! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.", inline=False)
            embed.color = 0xff0000
            
            await interaction.response.edit_message(embed=embed, view=self)
            await self.end_game(interaction, "–ø–µ—Ä–µ–±–æ—Ä")
        else:
            # –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –∫–∞—Ä—Ç–∞–º–∏
            embed = self.create_embed()
            await interaction.response.edit_message(embed=embed, view=self)
    
    @discord.ui.button(label='–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è', style=discord.ButtonStyle.secondary)
    async def stand(self, interaction: discord.Interaction, button: Button):
        if self.game_over:
            await interaction.response.send_message("–ò–≥—Ä–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", ephemeral=True)
            return
        
        if interaction.user.id != self.user_id:
            await interaction.response.send_message("–≠—Ç–∞ –∏–≥—Ä–∞ –Ω–µ –¥–ª—è –≤–∞—Å!", ephemeral=True)
            return
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏
        for item in self.children:
            item.disabled = True
        
        # –î–∏–ª–µ—Ä –±–µ—Ä–µ—Ç –∫–∞—Ä—Ç—ã –ø–æ–∫–∞ –Ω–µ –Ω–∞–±–µ—Ä–µ—Ç 17 –∏–ª–∏ –±–æ–ª—å—à–µ
        dealer_turn_embed = self.create_embed()
        dealer_turn_embed.add_field(name="–î–µ–π—Å—Ç–≤–∏–µ", value="–î–∏–ª–µ—Ä –±–µ—Ä–µ—Ç –∫–∞—Ä—Ç—ã...", inline=False)
        await interaction.response.edit_message(embed=dealer_turn_embed, view=self)
        
        # –î–∞–µ–º –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        await asyncio.sleep(1)
        
        while self.calculate_score(self.dealer_cards) < 17:
            self.dealer_cards.append(self.draw_card())
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞
            dealer_turn_embed = self.create_embed()
            dealer_turn_embed.add_field(name="–î–µ–π—Å—Ç–≤–∏–µ", value="–î–∏–ª–µ—Ä –±–µ—Ä–µ—Ç –∫–∞—Ä—Ç—ã...", inline=False)
            await interaction.edit_original_response(embed=dealer_turn_embed)
            await asyncio.sleep(1)
        
        await self.end_game(interaction, "stand")
    
    async def end_game(self, interaction: discord.Interaction, reason):
        self.game_over = True
        user_score = self.calculate_score(self.user_cards)
        dealer_score = self.calculate_score(self.dealer_cards)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        if reason == "–ø–µ—Ä–µ–±–æ—Ä":
            result = "lose"
            result_text = "–ü–µ—Ä–µ–±–æ—Ä! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏."
        elif user_score > dealer_score or dealer_score > 21:
            result = "win"
            result_text = "–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!"
        elif user_score == dealer_score:
            result = "push"
            result_text = "–ù–∏—á—å—è!"
        else:
            result = "lose"
            result_text = "–î–∏–ª–µ—Ä –≤—ã–∏–≥—Ä–∞–ª."
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–∏–≥—Ä—ã—à–∞
        if result == "win":
            base_winnings = int(self.bet * 2)
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–∞—Ñ—ã –∫ –≤—ã–∏–≥—Ä—ã—à—É
            winnings = db.apply_buff_to_amount(self.user_id, base_winnings, 'blackjack_bonus')
            winnings = db.apply_buff_to_amount(self.user_id, winnings, 'game_bonus')
            winnings = db.apply_buff_to_amount(self.user_id, winnings, 'multiplier')
            winnings = db.apply_buff_to_amount(self.user_id, winnings, 'all_bonus')
            
            db.update_balance(self.user_id, winnings)
            db.log_transaction(self.user_id, 'blackjack_win', winnings, description="–ü–æ–±–µ–¥–∞ –≤ –±–ª—ç–∫–¥–∂–µ–∫–µ")
            db.update_user_stat(self.user_id, 'blackjack_wins')
            db.update_consecutive_wins(self.user_id, True)
            color = 0x00ff00
        elif result == "push":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–≤–∫—É –ø—Ä–∏ –Ω–∏—á—å–µ
            db.update_balance(self.user_id, self.bet)
            color = 0xffff00
        else:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–∞—Ñ –∑–∞—â–∏—Ç—ã –æ—Ç –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π
            loss = db.apply_buff_to_amount(self.user_id, self.bet, 'loss_protection')
            db.update_balance(self.user_id, -loss)
            db.log_transaction(self.user_id, 'blackjack_loss', -loss, description="–ü—Ä–æ–∏–≥—Ä—ã—à –≤ –±–ª—ç–∫–¥–∂–µ–∫–µ")
            db.update_consecutive_wins(self.user_id, False)
            color = 0xff0000
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ embed
        embed = discord.Embed(title="üÉè –†–µ–∑—É–ª—å—Ç–∞—Ç –±–ª—ç–∫–¥–∂–µ–∫–∞", color=color)
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_cards_display = ' '.join([f'`{card}`' for card in self.user_cards])
        embed.add_field(
            name="–í–∞—à–∏ –∫–∞—Ä—Ç—ã",
            value=f"{user_cards_display} (–û—á–∫–∏: {user_score})",
            inline=False
        )
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞
        dealer_cards_display = ' '.join([f'`{card}`' for card in self.dealer_cards])
        embed.add_field(
            name="–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞",
            value=f"{dealer_cards_display} (–û—á–∫–∏: {dealer_score})",
            inline=False
        )
        
        embed.add_field(name="–†–µ–∑—É–ª—å—Ç–∞—Ç", value=result_text, inline=False)
        
        if result == "win":
            embed.add_field(name="–í—ã–∏–≥—Ä—ã—à", value=f"{winnings} {EMOJIS['coin']}", inline=True)
        elif result == "push":
            embed.add_field(name="–†–µ–∑—É–ª—å—Ç–∞—Ç", value="–°—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞", inline=True)
        else:
            embed.add_field(name="–ü–æ—Ç–µ—Ä—è–Ω–æ", value=f"{loss} {EMOJIS['coin']}", inline=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        await interaction.edit_original_response(embed=embed, view=None)

class DuelView(View):
    def __init__(self, challenger_id, target_id, bet):
        super().__init__(timeout=30)
        self.challenger_id = challenger_id
        self.target_id = target_id
        self.bet = bet
        self.accepted = False
    
    @discord.ui.button(label='–ü—Ä–∏–Ω—è—Ç—å –¥—É—ç–ª—å', style=discord.ButtonStyle.success, emoji='‚öîÔ∏è')
    async def accept_duel(self, interaction: discord.Interaction, button: Button):
        if interaction.user.id != self.target_id:
            await interaction.response.send_message("–≠—Ç–∞ –¥—É—ç–ª—å –Ω–µ –¥–ª—è –≤–∞—Å!", ephemeral=True)
            return
        
        if self.accepted:
            await interaction.response.send_message("–î—É—ç–ª—å —É–∂–µ –ø—Ä–∏–Ω—è—Ç–∞!", ephemeral=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        target_data = db.get_user(self.target_id)
        if target_data[1] < self.bet:
            await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –¥—É—ç–ª–∏!", ephemeral=True)
            return
        
        self.accepted = True
        
        # –°–Ω–∏–º–∞–µ–º —Å—Ç–∞–≤–∫–∏
        db.update_balance(self.challenger_id, -self.bet)
        db.update_balance(self.target_id, -self.bet)
        
        # –ê–Ω–∏–º–∞—Ü–∏—è –¥—É—ç–ª–∏
        embed = discord.Embed(
            title=f"{EMOJIS['duel']} –î—É—ç–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!",
            description="‚öîÔ∏è –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫–∏ –≥–æ—Ç–æ–≤—è—Ç—Å—è –∫ –±–æ—é...",
            color=0xff0000
        )
        await interaction.response.edit_message(embed=embed, view=None)
        
        # –ê–Ω–∏–º–∞—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
        for i in range(3, 0, -1):
            await asyncio.sleep(1)
            embed.description = f"‚öîÔ∏è –î—É—ç–ª—å –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ {i}..."
            await interaction.edit_original_response(embed=embed)
        
        await asyncio.sleep(1)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º –±–∞—Ñ–æ–≤
        base_challenger_chance = 0.5
        base_target_chance = 0.5
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–∞—Ñ—ã –∫ —à–∞–Ω—Å–∞–º
        challenger_buff = db.apply_buff_to_chance(self.challenger_id, 1.0, 'duel_bonus')
        target_buff = db.apply_buff_to_chance(self.target_id, 1.0, 'duel_bonus')
        
        challenger_chance = base_challenger_chance * challenger_buff
        target_chance = base_target_chance * target_buff
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —à–∞–Ω—Å—ã
        total = challenger_chance + target_chance
        challenger_chance /= total
        target_chance /= total
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        winner_id = random.choices([self.challenger_id, self.target_id], 
                                 weights=[challenger_chance, target_chance])[0]
        loser_id = self.target_id if winner_id == self.challenger_id else self.challenger_id
        
        # –í—ã–¥–∞–µ–º –≤—ã–∏–≥—Ä—ã—à —Å —É—á–µ—Ç–æ–º –±–∞—Ñ–æ–≤
        base_winnings = self.bet * 2
        winnings = db.apply_buff_to_amount(winner_id, base_winnings, 'game_bonus')
        winnings = db.apply_buff_to_amount(winner_id, winnings, 'multiplier')
        winnings = db.apply_buff_to_amount(winner_id, winnings, 'all_bonus')
        
        db.update_balance(winner_id, winnings)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        db.log_transaction(winner_id, 'duel_win', winnings, loser_id, "–ü–æ–±–µ–¥–∞ –≤ –¥—É—ç–ª–∏")
        db.log_transaction(loser_id, 'duel_loss', -self.bet, winner_id, "–ü—Ä–æ–∏–≥—Ä—ã—à –≤ –¥—É—ç–ª–∏")
        db.update_user_stat(winner_id, 'duels_won')
        db.update_consecutive_wins(winner_id, True)
        db.update_consecutive_wins(loser_id, False)
        
        winner = bot.get_user(winner_id)
        loser = bot.get_user(loser_id)
        
        embed = discord.Embed(
            title=f"{EMOJIS['duel']} –†–µ–∑—É–ª—å—Ç–∞—Ç –¥—É—ç–ª–∏",
            description=f"**–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:** {winner.mention}\n**–ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π:** {loser.mention}",
            color=0x00ff00
        )
        embed.add_field(name="–í—ã–∏–≥—Ä—ã—à", value=f"{winnings} {EMOJIS['coin']}")
        embed.add_field(name="–®–∞–Ω—Å –ø–æ–±–µ–¥—ã", value=f"{challenger_chance*100:.1f}% / {target_chance*100:.1f}%")
        
        await interaction.edit_original_response(embed=embed)

# –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ü–ê–ì–ò–ù–ê–¶–ò–Ø –î–õ–Ø –ö–ï–ô–°–û–í
class ImprovedCasesView(View):
    def __init__(self, pages, author_id):
        super().__init__(timeout=120)
        self.pages = pages
        self.current_page = 0
        self.total_pages = len(pages)
        self.author_id = author_id
        self.update_buttons()

    def update_buttons(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫"""
        self.previous_button.disabled = (self.current_page == 0)
        self.next_button.disabled = (self.current_page >= self.total_pages - 1)

    @discord.ui.button(label='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', style=discord.ButtonStyle.secondary)
    async def previous_button(self, interaction: discord.Interaction, button: Button):
        if interaction.user.id != self.author_id:
            await interaction.response.send_message("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏—è!", ephemeral=True)
            return
        
        if self.current_page > 0:
            self.current_page -= 1
            self.update_buttons()
            embed = self.create_embed()
            await interaction.response.edit_message(embed=embed, view=self)

    @discord.ui.button(label='‚û°Ô∏è –í–ø–µ—Ä–µ–¥', style=discord.ButtonStyle.secondary)
    async def next_button(self, interaction: discord.Interaction, button: Button):
        if interaction.user.id != self.author_id:
            await interaction.response.send_message("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏—è!", ephemeral=True)
            return
        
        if self.current_page < self.total_pages - 1:
            self.current_page += 1
            self.update_buttons()
            embed = self.create_embed()
            await interaction.response.edit_message(embed=embed, view=self)

    def create_embed(self):
        page_cases = self.pages[self.current_page]
        embed = discord.Embed(
            title=f"üéÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–µ–π—Å—ã (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {self.current_page + 1}/{self.total_pages})", 
            color=0xff69b4
        )
        
        for case in page_cases:
            try:
                rewards = json.loads(case[3])
                
                # –ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥
                rewards_desc = ""
                for reward in rewards:
                    chance_percent = reward['chance'] * 100
                    if reward['type'] == 'coins':
                        if reward['amount'][0] < 0:
                            rewards_desc += f"‚Ä¢ üíÄ –ü–æ—Ç–µ—Ä—è: {abs(reward['amount'][0])}-{abs(reward['amount'][1])} –º–æ–Ω–µ—Ç ({chance_percent:.1f}%)\n"
                        else:
                            rewards_desc += f"‚Ä¢ üí∞ –ú–æ–Ω–µ—Ç—ã: {reward['amount'][0]}-{reward['amount'][1]} ({chance_percent:.1f}%)\n"
                    elif reward['type'] == 'special_item':
                        rewards_desc += f"‚Ä¢ üéÅ {reward['name']} ({chance_percent:.1f}%)\n"
                    elif reward['type'] == 'bonus':
                        rewards_desc += f"‚Ä¢ ‚≠ê –ë–æ–Ω—É—Å x{reward['multiplier']} ({chance_percent:.1f}%)\n"
                    elif reward['type'] == 'custom_role':
                        rewards_desc += f"‚Ä¢ üëë –ö–∞—Å—Ç–æ–º–Ω–∞—è —Ä–æ–ª—å ({chance_percent:.1f}%)\n"
                
                embed.add_field(
                    name=f"{case[1]} - {case[2]} {EMOJIS['coin']} (ID: {case[0]})",
                    value=rewards_desc,
                    inline=False
                )
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–µ–π—Å–∞ {case[0]}: {e}")
                continue
        
        return embed

# –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin():
    async def predicate(interaction: discord.Interaction) -> bool:
        is_admin = interaction.user.id in ADMIN_IDS
        if not is_admin:
            await interaction.response.send_message(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!",
                ephemeral=True
            )
        return is_admin
    return app_commands.check(predicate)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥
@bot.tree.error
async def on_app_command_error(interaction: discord.Interaction, error: app_commands.AppCommandError):
    if isinstance(error, app_commands.CheckFailure):
        return
    elif isinstance(error, app_commands.CommandNotFound):
        await interaction.response.send_message("‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", ephemeral=True)
    elif isinstance(error, app_commands.MissingPermissions):
        await interaction.response.send_message("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!", ephemeral=True)
    elif isinstance(error, IndexError):
        print(f"üî¥ IndexError –≤ –∫–æ–º–∞–Ω–¥–µ: {error}")
        error_embed = discord.Embed(
            title="‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö",
            description="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω.",
            color=0xff0000
        )
        try:
            await interaction.response.send_message(embed=error_embed, ephemeral=True)
        except:
            await interaction.followup.send(embed=error_embed, ephemeral=True)
    else:
        print(f"üî¥ –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {error}")
        try:
            await interaction.response.send_message(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã!",
                ephemeral=True
            )
        except:
            try:
                await interaction.followup.send(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã!",
                    ephemeral=True
                )
            except:
                pass

# –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê

@bot.event
async def on_ready():
    print(f'‚úÖ –ë–æ—Ç {bot.user.name} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!')
    print(f'üîó ID –±–æ—Ç–∞: {bot.user.id}')
    print(f'üë• –ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ {len(bot.guilds)} —Å–µ—Ä–≤–µ—Ä–∞—Ö')
    
    try:
        synced = await bot.tree.sync()
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(synced)} –∫–æ–º–∞–Ω–¥")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥: {e}")

# –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
@bot.tree.command(name="balance", description="–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à –±–∞–ª–∞–Ω—Å")
@app_commands.describe(user="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —á–µ–π –±–∞–ª–∞–Ω—Å –ø–æ–∫–∞–∑–∞—Ç—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
async def balance(interaction: discord.Interaction, user: discord.Member = None):
    try:
        user = user or interaction.user
        user_data = db.get_user(user.id)
        user_safe = get_user_data_safe(user_data)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        cursor = db.conn.cursor()
        cursor.execute('SELECT COUNT(*) FROM achievements WHERE user_id = %s', (user.id,))
        achievements_result = cursor.fetchone()
        achievements_count = achievements_result[0] if achievements_result else 0
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –±–∞—Ñ—ã
        buffs = {}
        try:
            buffs = db.get_user_buffs(user.id)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞—Ñ–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
        
        embed = discord.Embed(
            title=f"{EMOJIS['coin']} –ë–∞–ª–∞–Ω—Å {user.display_name}",
            color=0xffd700
        )
        embed.add_field(name="–ë–∞–ª–∞–Ω—Å", value=f"{user_safe['balance']} {EMOJIS['coin']}", inline=True)
        embed.add_field(name="–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–µ—Ä–∏—è", value=f"{user_safe['daily_streak']} –¥–Ω–µ–π", inline=True)
        embed.add_field(name="–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", value=f"{achievements_count}/{len(ACHIEVEMENTS)}", inline=True)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –±–∞—Ñ—ã
        if buffs:
            buffs_text = "\n".join([f"‚Ä¢ {buff['item_name']}: {buff['description']}" for buff in buffs.values()])
            embed.add_field(name="üéØ –ê–∫—Ç–∏–≤–Ω—ã–µ –±–∞—Ñ—ã", value=buffs_text, inline=False)
        
        if user.avatar:
            embed.set_thumbnail(url=user.avatar.url)
        
        await interaction.response.send_message(embed=embed)
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ balance: {e}")
        error_embed = discord.Embed(
            title="‚ùå –û—à–∏–±–∫–∞",
            description="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            color=0xff0000
        )
        await interaction.response.send_message(embed=error_embed, ephemeral=True)

@bot.tree.command(name="daily", description="–ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É")
async def daily(interaction: discord.Interaction):
    try:
        user_data = db.get_user_safe(interaction.user.id)
        user_safe = get_user_data_safe(user_data)
        
        last_daily_str = user_safe['last_daily']
        daily_streak = user_safe['daily_streak']
        
        last_daily = None
        if last_daily_str:
            try:
                last_daily = datetime.datetime.fromisoformat(last_daily_str)
            except (ValueError, TypeError):
                last_daily = None
        
        now = datetime.datetime.now()
        
        if last_daily and (now - last_daily).days < 1:
            await interaction.response.send_message("–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É —Å–µ–≥–æ–¥–Ω—è!", ephemeral=True)
            return
        
        streak = daily_streak + 1 if last_daily and (now - last_daily).days == 1 else 1
        base_reward = 100
        streak_bonus = streak * 10
        reward = base_reward + streak_bonus
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–∞—Ñ—ã –∫ –Ω–∞–≥—Ä–∞–¥–µ
        reward = db.apply_buff_to_amount(interaction.user.id, reward, 'daily_bonus')
        reward = db.apply_buff_to_amount(interaction.user.id, reward, 'multiplier')
        reward = db.apply_buff_to_amount(interaction.user.id, reward, 'all_bonus')
        
        db.update_balance(interaction.user.id, reward)
        cursor = db.conn.cursor()
        cursor.execute('UPDATE users SET daily_streak = %s, last_daily = %s WHERE user_id = %s', 
                       (streak, now.isoformat(), interaction.user.id))
        db.conn.commit()
        db.log_transaction(interaction.user.id, 'daily', reward)
        db.update_user_stat(interaction.user.id, 'daily_claimed')
        
        embed = discord.Embed(
            title=f"{EMOJIS['daily']} –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞",
            description=f"–ù–∞–≥—Ä–∞–¥–∞: {reward} {EMOJIS['coin']}\n–°–µ—Ä–∏—è: {streak} –¥–Ω–µ–π\n–ë–æ–Ω—É—Å –∑–∞ —Å–µ—Ä–∏—é: +{streak_bonus} {EMOJIS['coin']}",
            color=0x00ff00
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã
        try:
            new_achievements = db.check_achievements(interaction.user.id)
            if new_achievements:
                achievements_text = "\n".join([f"üéâ {ACHIEVEMENTS[ach_id]['name']} (+{ACHIEVEMENTS[ach_id]['reward']} {EMOJIS['coin']})" for ach_id in new_achievements])
                embed.add_field(name="–ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è!", value=achievements_text, inline=False)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {e}")
        
        await interaction.response.send_message(embed=embed)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ daily: {e}")
        error_embed = discord.Embed(
            title="‚ùå –û—à–∏–±–∫–∞",
            description="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            color=0xff0000
        )
        await interaction.response.send_message(embed=error_embed, ephemeral=True)

# –ö–æ–º–∞–Ω–¥—ã –∫–µ–π—Å–æ–≤
@bot.tree.command(name="cases", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–µ–π—Å–æ–≤")
async def cases_list(interaction: discord.Interaction):
    try:
        cases = db.get_cases()
        
        if not cases:
            await interaction.response.send_message("–ö–µ–π—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!", ephemeral=True)
            return
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ 3 –∫–µ–π—Å–∞ (–∏–∑-–∑–∞ –ø–æ–ª–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è)
        pages = []
        current_page = []
        
        for i, case in enumerate(cases):
            if i > 0 and i % 3 == 0:
                pages.append(current_page)
                current_page = []
            current_page.append(case)
        
        if current_page:
            pages.append(current_page)
        
        view = ImprovedCasesView(pages, interaction.user.id)
        embed = view.create_embed()
        await interaction.response.send_message(embed=embed, view=view)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ cases: {e}")
        await interaction.response.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–µ–π—Å–æ–≤!", ephemeral=True)

@bot.tree.command(name="open_case", description="–û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å")
@app_commands.describe(case_id="ID –∫–µ–π—Å–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è")
async def open_case(interaction: discord.Interaction, case_id: int):
    try:
        case_data = db.get_case(case_id)
        if not case_data:
            await interaction.response.send_message("‚ùå –ö–µ–π—Å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω!", ephemeral=True)
            return
        
        user_data = db.get_user(interaction.user.id)
        user_safe = get_user_data_safe(user_data)
        
        case_price = case_data[2]
        if user_safe['balance'] < case_price:
            await interaction.response.send_message("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —ç—Ç–æ–≥–æ –∫–µ–π—Å–∞!", ephemeral=True)
            return
        
        view = CaseView(case_id, interaction.user.id)
        embed = discord.Embed(
            title=f"üéÅ {case_data[1]}",
            description=f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {case_price} {EMOJIS['coin']}\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å!",
            color=0xff69b4
        )
        
        await interaction.response.send_message(embed=embed, view=view)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ open_case: {e}")
        await interaction.response.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–µ–π—Å–∞!", ephemeral=True)

@bot.tree.command(name="admin_replace_cases", description="–ó–∞–º–µ–Ω–∏—Ç—å –≤—Å–µ –∫–µ–π—Å—ã –Ω–∞ –Ω–æ–≤—ã–µ (–∞–¥–º–∏–Ω)")
@is_admin()
async def admin_replace_cases(interaction: discord.Interaction):
    try:
        cursor = db.conn.cursor()
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–µ–π—Å—ã
        cursor.execute('DELETE FROM cases')
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∫–µ–π—Å—ã —Å ID –æ—Ç 1 –¥–æ 15
        new_cases = [
            # ID 1
            ('üì¶ –ú–∞–ª—ã–π –∫–µ–π—Å', 50, json.dumps([
                {'type': 'coins', 'amount': [10, 40], 'chance': 0.8, 'description': '–ù–µ–±–æ–ª—å—à–∞—è —Å—É–º–º–∞ –º–æ–Ω–µ—Ç'},
                {'type': 'coins', 'amount': [41, 100], 'chance': 0.15, 'description': '–°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ –º–æ–Ω–µ—Ç'},
                {'type': 'coins', 'amount': [101, 300], 'chance': 0.05, 'description': '–•–æ—Ä–æ—à–∞—è —Å—É–º–º–∞ –º–æ–Ω–µ—Ç'}
            ])),
            # ID 2
            ('üì¶ –°—Ä–µ–¥–Ω–∏–π –∫–µ–π—Å', 150, json.dumps([
                {'type': 'coins', 'amount': [50, 120], 'chance': 0.7, 'description': '–ù–∞–¥–µ–∂–Ω–∞—è —Å—É–º–º–∞ –º–æ–Ω–µ—Ç'},
                {'type': 'coins', 'amount': [121, 300], 'chance': 0.2, 'description': '–û—Ç–ª–∏—á–Ω–∞—è —Å—É–º–º–∞ –º–æ–Ω–µ—Ç'},
                {'type': 'special_item', 'name': '–ú–∞–≥–∏—á–µ—Å–∫–∏–π —Å–≤–∏—Ç–æ–∫', 'chance': 0.05, 'description': '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –≤—ã–∏–≥—Ä—ã—à –≤ —Ä—É–ª–µ—Ç–∫–µ –Ω–∞ 25%'},
                {'type': 'coins', 'amount': [301, 800], 'chance': 0.05, 'description': '–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à'}
            ])),
            # ID 3
            ('üíé –ë–æ–ª—å—à–æ–π –∫–µ–π—Å', 500, json.dumps([
                {'type': 'coins', 'amount': [200, 400], 'chance': 0.6, 'description': '–°–æ–ª–∏–¥–Ω–∞—è —Å—É–º–º–∞'},
                {'type': 'coins', 'amount': [401, 1000], 'chance': 0.25, 'description': '–û—á–µ–Ω—å —Ö–æ—Ä–æ—à–∞—è —Å—É–º–º–∞'},
                {'type': 'special_item', 'name': '–ó–æ–ª–æ—Ç–æ–π –∞–º—É–ª–µ—Ç', 'chance': 0.08, 'description': '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É –Ω–∞ 20%'},
                {'type': 'bonus', 'multiplier': 1.5, 'duration': 24, 'chance': 0.07, 'description': '–í—Ä–µ–º–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å x1.5 –Ω–∞ 24 —á–∞—Å–∞'}
            ])),
            # ID 4
            ('üëë –≠–ª–∏—Ç–Ω—ã–π –∫–µ–π—Å', 1000, json.dumps([
                {'type': 'coins', 'amount': [500, 1000], 'chance': 0.3, 'description': '–≠–ª–∏—Ç–Ω—ã–µ –º–æ–Ω–µ—Ç—ã'},
                {'type': 'coins', 'amount': [-300, -100], 'chance': 0.2, 'description': '–ù–µ—É–¥–∞—á–∞ (–ø–æ—Ç–µ—Ä—è –º–æ–Ω–µ—Ç)'},
                {'type': 'special_item', 'name': '–î—Ä–µ–≤–Ω–∏–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç', 'chance': 0.15, 'description': '–ú–æ—â–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞–≥—Ä–∞–¥ x1.5'},
                {'type': 'bonus', 'multiplier': 2.0, 'duration': 48, 'chance': 0.1, 'description': '–í—Ä–µ–º–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å x2.0 –Ω–∞ 48 —á–∞—Å–æ–≤'},
                {'type': 'coins', 'amount': [1001, 3000], 'chance': 0.15, 'description': '–≠–ª–∏—Ç–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à'},
                {'type': 'coins', 'amount': [3001, 6000], 'chance': 0.1, 'description': '–≠–ª–∏—Ç–Ω—ã–π –¥–∂–µ–∫–ø–æ—Ç'}
            ])),
            # ID 5
            ('üîÆ –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–µ–π—Å', 2000, json.dumps([
                {'type': 'coins', 'amount': [800, 1500], 'chance': 0.3, 'description': '–°–µ–∫—Ä–µ—Ç–Ω—ã–µ –º–æ–Ω–µ—Ç—ã'},
                {'type': 'coins', 'amount': [-1000, -500], 'chance': 0.15, 'description': '–°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ä–∏—Å–∫'},
                {'type': 'special_item', 'name': '–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π –ø—Ä–µ–¥–º–µ—Ç', 'chance': 0.15, 'description': '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞–≥—Ä–∞–¥ x2.0'},
                {'type': 'bonus', 'multiplier': 3.0, 'duration': 72, 'chance': 0.1, 'description': '–í—Ä–µ–º–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å x3.0 –Ω–∞ 72 —á–∞—Å–∞'},
                {'type': 'coins', 'amount': [1501, 3000], 'chance': 0.15, 'description': '–°–µ–∫—Ä–µ—Ç–Ω–∞—è —É–¥–∞—á–∞'},
                {'type': 'coins', 'amount': [4001, 7000], 'chance': 0.15, 'description': '–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª–∞–¥'}
            ])),
            # ID 6
            ('‚öîÔ∏è –ë–æ–µ–≤–æ–π –∫–µ–π—Å', 3500, json.dumps([
                {'type': 'coins', 'amount': [1000, 3000], 'chance': 0.4, 'description': '–ë–æ–µ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞'},
                {'type': 'coins', 'amount': [-1000, -500], 'chance': 0.1, 'description': '–ë–æ–µ–≤—ã–µ –ø–æ—Ç–µ—Ä–∏'},
                {'type': 'special_item', 'name': '–ü–µ—Ä—á–∞—Ç–∫–∞ –≤–æ—Ä–∞', 'chance': 0.15, 'description': '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —à–∞–Ω—Å –∫—Ä–∞–∂–∏ –Ω–∞ 20%'},
                {'type': 'bonus', 'multiplier': 2.5, 'duration': 48, 'chance': 0.1, 'description': '–í—Ä–µ–º–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å x2.5 –Ω–∞ 48 —á–∞—Å–æ–≤'},
                {'type': 'coins', 'amount': [3001, 6000], 'chance': 0.15, 'description': '–ë–æ–µ–≤–æ–π —Ç—Ä–æ—Ñ–µ–π'},
                {'type': 'special_item', 'name': '–¢–æ—Ç–µ–º –∑–∞—â–∏—Ç—ã', 'chance': 0.1, 'description': '+20% –∫ —à–∞–Ω—Å—É –ø–æ–±–µ–¥—ã –≤ –¥—É—ç–ª—è—Ö'}
            ])),
            # ID 7
            ('üíé –ü—Ä–µ–º–∏—É–º –∫–µ–π—Å', 5000, json.dumps([
                {'type': 'coins', 'amount': [2000, 4000], 'chance': 0.4, 'description': '–ü—Ä–µ–º–∏—É–º –º–æ–Ω–µ—Ç—ã'},
                {'type': 'special_item', 'name': '–ó–æ–ª–æ—Ç–æ–π –∞–º—É–ª–µ—Ç', 'chance': 0.2, 'description': '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É –Ω–∞ 20%'},
                {'type': 'bonus', 'multiplier': 3.0, 'duration': 72, 'chance': 0.1, 'description': '–í—Ä–µ–º–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å x3.0 –Ω–∞ 72 —á–∞—Å–∞'},
                {'type': 'coins', 'amount': [-2000, -1000], 'chance': 0.1, 'description': '–ü—Ä–µ–º–∏—É–º —Ä–∏—Å–∫'},
                {'type': 'coins', 'amount': [5001, 8000], 'chance': 0.1, 'description': '–ü—Ä–µ–º–∏—É–º –≤—ã–∏–≥—Ä—ã—à'},
                {'type': 'special_item', 'name': '–ö—Ä–∏—Å—Ç–∞–ª–ª –º–∞–Ω—ã', 'chance': 0.1, 'description': '–£–º–Ω–æ–∂–∞–µ—Ç –≤—Å–µ –Ω–∞–≥—Ä–∞–¥—ã x1.3'}
            ])),
            # ID 8
            ('üî• –ê–¥—Å–∫–∏–π –∫–µ–π—Å', 7500, json.dumps([
                {'type': 'coins', 'amount': [3000, 6000], 'chance': 0.35, 'description': '–ê–¥—Å–∫–æ–µ –±–æ–≥–∞—Ç—Å—Ç–≤–æ'},
                {'type': 'coins', 'amount': [-3000, -2000], 'chance': 0.15, 'description': '–ê–¥—Å–∫–∏–µ –ø–æ—Ç–µ—Ä–∏'},
                {'type': 'special_item', 'name': '–ü–ª–∞—â —Ç–µ–Ω–∏', 'chance': 0.2, 'description': '+15% –∫ —à–∞–Ω—Å—É –∫—Ä–∞–∂–∏'},
                {'type': 'bonus', 'multiplier': 3.5, 'duration': 96, 'chance': 0.1, 'description': '–í—Ä–µ–º–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å x3.5 –Ω–∞ 96 —á–∞—Å–æ–≤'},
                {'type': 'coins', 'amount': [6001, 10000], 'chance': 0.1, 'description': '–ê–¥—Å–∫–∏–π –∫—É—à'},
                {'type': 'special_item', 'name': '–î—Ä–µ–≤–Ω–∏–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç', 'chance': 0.1, 'description': '–ú–æ—â–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞–≥—Ä–∞–¥ x1.5'}
            ])),
            # ID 9
            ('‚ö° –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –∫–µ–π—Å', 10000, json.dumps([
                {'type': 'coins', 'amount': [5000, 8000], 'chance': 0.3, 'description': '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ –º–æ–Ω–µ—Ç—ã'},
                {'type': 'special_item', 'name': '–ö–æ–ª—å—Ü–æ —É–¥–∞—á–∏', 'chance': 0.2, 'description': '+15% –∫ –Ω–∞–≥—Ä–∞–¥–∞–º –∏–∑ –∫–µ–π—Å–æ–≤'},
                {'type': 'bonus', 'multiplier': 4.0, 'duration': 120, 'chance': 0.1, 'description': '–í—Ä–µ–º–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å x4.0 –Ω–∞ 120 —á–∞—Å–æ–≤'},
                {'type': 'coins', 'amount': [-4000, -2000], 'chance': 0.1, 'description': '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π —Ä–∏—Å–∫'},
                {'type': 'coins', 'amount': [8001, 15000], 'chance': 0.15, 'description': '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à'},
                {'type': 'special_item', 'name': '–ö–∞—Ä—Ç–æ—á–Ω—ã–π —à—É–ª–µ—Ä', 'chance': 0.15, 'description': '+15% –∫ –≤—ã–∏–≥—Ä—ã—à—É –≤ –±–ª—ç–∫–¥–∂–µ–∫–µ'}
            ])),
            # ID 10
            ('üåå –ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–µ–π—Å', 15000, json.dumps([
                {'type': 'coins', 'amount': [8000, 15000], 'chance': 0.3, 'description': '–ö–æ—Å–º–∏—á–µ—Å–∫–æ–µ –±–æ–≥–∞—Ç—Å—Ç–≤–æ'},
                {'type': 'special_item', 'name': '–û–∂–µ—Ä–µ–ª—å–µ –º—É–¥—Ä–æ—Å—Ç–∏', 'chance': 0.2, 'description': '+15% –∫ –æ–ø—ã—Ç—É'},
                {'type': 'bonus', 'multiplier': 4.5, 'duration': 144, 'chance': 0.1, 'description': '–í—Ä–µ–º–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å x4.5 –Ω–∞ 144 —á–∞—Å–∞'},
                {'type': 'coins', 'amount': [-6000, -4000], 'chance': 0.1, 'description': '–ö–æ—Å–º–∏—á–µ—Å–∫–∏–µ –ø–æ—Ç–µ—Ä–∏'},
                {'type': 'coins', 'amount': [15001, 25000], 'chance': 0.15, 'description': '–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫—É—à'},
                {'type': 'special_item', 'name': '–†—É–Ω–∞ –±–æ–≥–∞—Ç—Å—Ç–≤–∞', 'chance': 0.15, 'description': '-10% –∫ –∫–æ–º–∏—Å—Å–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤'}
            ])),
            # ID 11
            ('üí† –ö—Ä–∏—Å—Ç–∞–ª—å–Ω—ã–π –∫–µ–π—Å', 20000, json.dumps([
                {'type': 'coins', 'amount': [10000, 20000], 'chance': 0.3, 'description': '–ö—Ä–∏—Å—Ç–∞–ª—å–Ω—ã–µ –º–æ–Ω–µ—Ç—ã'},
                {'type': 'special_item', 'name': '–ö—Ä–∏—Å—Ç–∞–ª–ª –º–∞–Ω—ã', 'chance': 0.15, 'description': '–£–º–Ω–æ–∂–∞–µ—Ç –≤—Å–µ –Ω–∞–≥—Ä–∞–¥—ã x1.3'},
                {'type': 'bonus', 'multiplier': 5.0, 'duration': 168, 'chance': 0.1, 'description': '–í—Ä–µ–º–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å x5.0 –Ω–∞ 168 —á–∞—Å–æ–≤'},
                {'type': 'coins', 'amount': [-8000, -5000], 'chance': 0.1, 'description': '–ö—Ä–∏—Å—Ç–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫'},
                {'type': 'coins', 'amount': [20001, 30000], 'chance': 0.15, 'description': '–ö—Ä–∏—Å—Ç–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à'},
                {'type': 'special_item', 'name': '–ó–µ–ª—å–µ —É–¥–∞—á–∏', 'chance': 0.2, 'description': '+10% –∫–æ –≤—Å–µ–º –Ω–∞–≥—Ä–∞–¥–∞–º'}
            ])),
            # ID 12
            ('üëÅÔ∏è –¢–µ–Ω–µ–≤–æ–π –∫–µ–π—Å', 25000, json.dumps([
                {'type': 'coins', 'amount': [12000, 22000], 'chance': 0.3, 'description': '–¢–µ–Ω–µ–≤—ã–µ –º–æ–Ω–µ—Ç—ã'},
                {'type': 'special_item', 'name': '–ü–ª–∞—â —Ç–µ–Ω–∏', 'chance': 0.15, 'description': '+15% –∫ —à–∞–Ω—Å—É –∫—Ä–∞–∂–∏'},
                {'type': 'bonus', 'multiplier': 5.5, 'duration': 192, 'chance': 0.1, 'description': '–í—Ä–µ–º–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å x5.5 –Ω–∞ 192 —á–∞—Å–∞'},
                {'type': 'coins', 'amount': [-10000, -6000], 'chance': 0.1, 'description': '–¢–µ–Ω–µ–≤—ã–µ –ø–æ—Ç–µ—Ä–∏'},
                {'type': 'coins', 'amount': [22001, 35000], 'chance': 0.15, 'description': '–¢–µ–Ω–µ–≤–æ–π –∫—É—à'},
                {'type': 'special_item', 'name': '–ó–∞—â–∏—Ç–Ω—ã–π —Ç–∞–ª–∏—Å–º–∞–Ω', 'chance': 0.2, 'description': '-50% –∫ —à–∞–Ω—Å—É –∫—Ä–∞–∂–∏ —É –≤–∞—Å'}
            ])),
            # ID 13
            ('üåà –†–∞–¥—É–∂–Ω—ã–π –∫–µ–π—Å', 30000, json.dumps([
                {'type': 'coins', 'amount': [15000, 25000], 'chance': 0.25, 'description': '–†–∞–¥—É–∂–Ω—ã–µ –º–æ–Ω–µ—Ç—ã'},
                {'type': 'special_item', 'name': '–°–ª–æ—Ç-–º–∞—Å—Ç–µ—Ä', 'chance': 0.2, 'description': '+25% –∫ –≤—ã–∏–≥—Ä—ã—à—É –≤ —Å–ª–æ—Ç–∞—Ö'},
                {'type': 'bonus', 'multiplier': 6.0, 'duration': 216, 'chance': 0.1, 'description': '–í—Ä–µ–º–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å x6.0 –Ω–∞ 216 —á–∞—Å–æ–≤'},
                {'type': 'coins', 'amount': [-12000, -8000], 'chance': 0.1, 'description': '–†–∞–¥—É–∂–Ω—ã–π —Ä–∏—Å–∫'},
                {'type': 'coins', 'amount': [25001, 40000], 'chance': 0.15, 'description': '–†–∞–¥—É–∂–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à'},
                {'type': 'special_item', 'name': '–°—á–∞—Å—Ç–ª–∏–≤–∞—è –º–æ–Ω–µ—Ç–∞', 'chance': 0.2, 'description': '+20% –∫ –≤—ã–∏–≥—Ä—ã—à—É –≤ coinflip'}
            ])),
            # ID 14
            ('ü©∏ –ö—Ä–æ–≤–∞–≤—ã–π –∫–µ–π—Å', 40000, json.dumps([
                {'type': 'coins', 'amount': [18000, 30000], 'chance': 0.25, 'description': '–ö—Ä–æ–≤–∞–≤—ã–µ –º–æ–Ω–µ—Ç—ã'},
                {'type': 'special_item', 'name': '–§–ª–∞–∫–æ–Ω –∑–µ–ª—å—è', 'chance': 0.2, 'description': '+20% –∫ –Ω–∞–≥—Ä–∞–¥–∞–º –∑–∞ –∫–≤–µ—Å—Ç—ã'},
                {'type': 'bonus', 'multiplier': 7.0, 'duration': 240, 'chance': 0.1, 'description': '–í—Ä–µ–º–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å x7.0 –Ω–∞ 240 —á–∞—Å–æ–≤'},
                {'type': 'coins', 'amount': [-15000, -10000], 'chance': 0.1, 'description': '–ö—Ä–æ–≤–∞–≤—ã–µ –ø–æ—Ç–µ—Ä–∏'},
                {'type': 'coins', 'amount': [30001, 45000], 'chance': 0.15, 'description': '–ö—Ä–æ–≤–∞–≤—ã–π –∫—É—à'},
                {'type': 'special_item', 'name': '–©–∏—Ç –±–æ–≥–∞—Ç—Å—Ç–≤–∞', 'chance': 0.2, 'description': '-20% –∫ –ø—Ä–æ–∏–≥—Ä—ã—à–∞–º'}
            ])),
            # ID 15
            ('üåü –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–µ–π—Å', 50000, json.dumps([
                {'type': 'coins', 'amount': [25000, 50000], 'chance': 0.2, 'description': '–ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã'},
                {'type': 'special_item', 'name': '–ó–µ–ª—å–µ —É–¥–∞—á–∏', 'chance': 0.2, 'description': '+10% –∫–æ –≤—Å–µ–º –Ω–∞–≥—Ä–∞–¥–∞–º'},
                {'type': 'bonus', 'multiplier': 8.0, 'duration': 288, 'chance': 0.1, 'description': '–í—Ä–µ–º–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å x8.0 –Ω–∞ 288 —á–∞—Å–æ–≤'},
                {'type': 'coins', 'amount': [-20000, -12000], 'chance': 0.1, 'description': '–ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏'},
                {'type': 'coins', 'amount': [50001, 80000], 'chance': 0.15, 'description': '–ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫—É—à'},
                {'type': 'special_item', 'name': '–î—Ä–µ–≤–Ω–∏–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç', 'chance': 0.25, 'description': '–ú–æ—â–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞–≥—Ä–∞–¥ x1.5'}
            ]))
        ]
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–µ–π—Å—ã
        for case in new_cases:
            cursor.execute('INSERT INTO cases (name, price, rewards) VALUES (%s, %s, %s)', case)
        
        db.conn.commit()
        
        embed = discord.Embed(
            title="‚úÖ –í—Å–µ –∫–µ–π—Å—ã –∑–∞–º–µ–Ω–µ–Ω—ã!",
            description="–î–æ–±–∞–≤–ª–µ–Ω–æ 15 –Ω–æ–≤—ã—Ö –∫–µ–π—Å–æ–≤ —Å ID –æ—Ç 1 –¥–æ 15",
            color=0x00ff00
        )
        
        await interaction.response.send_message(embed=embed)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–º–µ–Ω–µ –∫–µ–π—Å–æ–≤: {e}")
        error_embed = discord.Embed(
            title="‚ùå –û—à–∏–±–∫–∞",
            description=f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–º–µ–Ω–∏—Ç—å –∫–µ–π—Å—ã: {str(e)}",
            color=0xff0000
        )
        await interaction.response.send_message(embed=error_embed, ephemeral=True)

# –ú–ò–ù–ò-–ò–ì–†–´ (–∏–∑ –≤—Ç–æ—Ä–æ–≥–æ –∫–æ–¥–∞)

@bot.tree.command(name="coinflip", description="–ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç—É –Ω–∞ —Å—Ç–∞–≤–∫—É (50/50 —à–∞–Ω—Å)")
@app_commands.describe(bet="–°—Ç–∞–≤–∫–∞ –≤ –º–æ–Ω–µ—Ç–∞—Ö")
async def coinflip(interaction: discord.Interaction, bet: int):
    user_data = db.get_user(interaction.user.id)
    user_safe = get_user_data_safe(user_data)
    
    if user_safe['balance'] < bet:
        await interaction.response.send_message("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!", ephemeral=True)
        return
    
    embed = discord.Embed(
        title=f"ü™ô –ü–æ–¥–±—Ä–∞—Å—ã–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã",
        description=f"–°—Ç–∞–≤–∫–∞: {bet} {EMOJIS['coin']}\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ—Ä–æ–Ω—É –º–æ–Ω–µ—Ç—ã:",
        color=0xffd700
    )
    
    view = CoinFlipView(interaction.user.id, bet)
    await interaction.response.send_message(embed=embed, view=view)

@bot.tree.command(name="blackjack", description="–°—ã–≥—Ä–∞—Ç—å –≤ –±–ª—ç–∫–¥–∂–µ–∫")
@app_commands.describe(bet="–°—Ç–∞–≤–∫–∞ –≤ –º–æ–Ω–µ—Ç–∞—Ö")
async def blackjack(interaction: discord.Interaction, bet: int):
    user_data = db.get_user(interaction.user.id)
    user_safe = get_user_data_safe(user_data)
    
    if user_safe['balance'] < bet:
        await interaction.response.send_message("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!", ephemeral=True)
        return
    
    if bet <= 0:
        await interaction.response.send_message("–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!", ephemeral=True)
        return
    
    view = BlackjackView(interaction.user.id, bet)
    embed = view.create_embed()
    
    await interaction.response.send_message(embed=embed, view=view)

@bot.tree.command(name="slots", description="–ò–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä–æ–≤—ã–µ –∞–≤—Ç–æ–º–∞—Ç—ã")
@app_commands.describe(bet="–°—Ç–∞–≤–∫–∞ –≤ –º–æ–Ω–µ—Ç–∞—Ö")
async def slots(interaction: discord.Interaction, bet: int):
    try:
        user_data = db.get_user(interaction.user.id)
        user_safe = get_user_data_safe(user_data)
        
        if user_safe['balance'] < bet:
            await interaction.response.send_message("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!", ephemeral=True)
            return
    
        # –°–∏–º–≤–æ–ª—ã –¥–ª—è —Å–ª–æ—Ç–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —à–∞–Ω—Å–∞–º–∏
        symbols = ['üçí', 'üçã', 'üçä', 'üçá', 'üîî', 'üíé', '7Ô∏è‚É£']
        
        # –ê–Ω–∏–º–∞—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è
        embed = discord.Embed(title="üé∞ –ò–≥—Ä–æ–≤—ã–µ –∞–≤—Ç–æ–º–∞—Ç—ã", description="–í—Ä–∞—â–µ–Ω–∏–µ...", color=0xff69b4)
        await interaction.response.send_message(embed=embed)
        
        for i in range(3):
            await asyncio.sleep(0.5)
            slot_result = [random.choice(symbols) for _ in range(3)]
            embed.description = f"üé∞ | {' | '.join(slot_result)} | üé∞"
            await interaction.edit_original_response(embed=embed)
        
        await asyncio.sleep(1)
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —à–∞–Ω—Å–∞–º–∏
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∞–Ω—Å—ã –Ω–∞ –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
        final_result = []
        if random.random() < 0.4:  # 40% —à–∞–Ω—Å –Ω–∞ –≤—ã–∏–≥—Ä—ã—à–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é
            # –°–æ–∑–¥–∞–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é
            winning_symbol = random.choice(symbols)
            if random.random() < 0.1:  # 10% —à–∞–Ω—Å –Ω–∞ –¥–∂–µ–∫–ø–æ—Ç
                final_result = [winning_symbol, winning_symbol, winning_symbol]
            else:  # 30% —à–∞–Ω—Å –Ω–∞ –¥–≤–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö
                final_result = [winning_symbol, winning_symbol, random.choice(symbols)]
                # –°–ª—É—á–∞–π–Ω–æ –º–µ–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫
                random.shuffle(final_result)
        else:
            # –°–ª—É—á–∞–π–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è
            final_result = [random.choice(symbols) for _ in range(3)]
        
        embed.description = f"üé∞ | {' | '.join(final_result)} | üé∞"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∏–≥—Ä—ã—à–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —à–∞–Ω—Å–∞–º–∏
        if final_result[0] == final_result[1] == final_result[2]:
            if final_result[0] == 'üíé':
                # –î–∂–µ–∫–ø–æ—Ç
                multiplier = 50  # –£–º–µ–Ω—å—à–µ–Ω –º–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–æ —É–≤–µ–ª–∏—á–µ–Ω —à–∞–Ω—Å
                db.update_user_stat(interaction.user.id, 'slot_wins')
            elif final_result[0] == '7Ô∏è‚É£':
                multiplier = 25
            elif final_result[0] == 'üîî':
                multiplier = 15
            else:
                multiplier = 8  # –£–≤–µ–ª–∏—á–µ–Ω –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            
            base_winnings = bet * multiplier
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–∞—Ñ—ã –∫ –≤—ã–∏–≥—Ä—ã—à—É
            winnings = db.apply_buff_to_amount(interaction.user.id, base_winnings, 'slot_bonus')
            winnings = db.apply_buff_to_amount(interaction.user.id, winnings, 'game_bonus')
            winnings = db.apply_buff_to_amount(interaction.user.id, winnings, 'multiplier')
            winnings = db.apply_buff_to_amount(interaction.user.id, winnings, 'all_bonus')
            
            db.update_balance(interaction.user.id, winnings)
            db.log_transaction(interaction.user.id, 'slots_win', winnings, description=f"–î–ñ–ï–ö–ü–û–¢ –≤ —Å–ª–æ—Ç–∞—Ö x{multiplier}")
            db.update_consecutive_wins(interaction.user.id, True)
            
            result_text = f"üéâ –î–ñ–ï–ö–ü–û–¢! x{multiplier}\n–í—ã–∏–≥—Ä—ã—à: {winnings} {EMOJIS['coin']}"
            color = 0x00ff00
        elif final_result[0] == final_result[1] or final_result[1] == final_result[2]:
            # –î–≤–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞ - —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
            multiplier = 3  # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 2 –¥–æ 3
            base_winnings = bet * multiplier
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–∞—Ñ—ã –∫ –≤—ã–∏–≥—Ä—ã—à—É
            winnings = db.apply_buff_to_amount(interaction.user.id, base_winnings, 'slot_bonus')
            winnings = db.apply_buff_to_amount(interaction.user.id, winnings, 'game_bonus')
            winnings = db.apply_buff_to_amount(interaction.user.id, winnings, 'multiplier')
            winnings = db.apply_buff_to_amount(interaction.user.id, winnings, 'all_bonus')
            
            db.update_balance(interaction.user.id, winnings)
            db.log_transaction(interaction.user.id, 'slots_win', winnings, description=f"–ü–æ–±–µ–¥–∞ –≤ —Å–ª–æ—Ç–∞—Ö x{multiplier}")
            db.update_consecutive_wins(interaction.user.id, True)
            
            result_text = f"‚úÖ –î–≤–∞ –≤ —Ä—è–¥! x{multiplier}\n–í—ã–∏–≥—Ä—ã—à: {winnings} {EMOJIS['coin']}"
            color = 0x00ff00
        else:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–∞—Ñ –∑–∞—â–∏—Ç—ã –æ—Ç –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π
            loss = db.apply_buff_to_amount(interaction.user.id, bet, 'loss_protection')
            db.update_balance(interaction.user.id, -loss)
            db.log_transaction(interaction.user.id, 'slots_loss', -loss, description="–ü—Ä–æ–∏–≥—Ä—ã—à –≤ —Å–ª–æ—Ç–∞—Ö")
            db.update_consecutive_wins(interaction.user.id, False)
            
            result_text = f"‚ùå –ü–æ–≤–µ–∑–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!\n–ü–æ—Ç–µ—Ä—è–Ω–æ: {loss} {EMOJIS['coin']}"
            color = 0xff0000
        
        embed.add_field(name="–†–µ–∑—É–ª—å—Ç–∞—Ç", value=result_text, inline=False)
        embed.add_field(name="–°—Ç–∞–≤–∫–∞", value=f"{bet} {EMOJIS['coin']}", inline=True)
        embed.color = color
        
        await interaction.edit_original_response(embed=embed)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ slots: {e}")
        await interaction.response.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Å–ª–æ—Ç–∞—Ö!", ephemeral=True)

@bot.tree.command(name="roulette", description="–°—ã–≥—Ä–∞—Ç—å –≤ —Ä—É–ª–µ—Ç–∫—É")
@app_commands.describe(bet="–°—Ç–∞–≤–∫–∞ –≤ –º–æ–Ω–µ—Ç–∞—Ö")
async def roulette(interaction: discord.Interaction, bet: int):
    try:
        user_data = db.get_user(interaction.user.id)
        user_safe = get_user_data_safe(user_data)
        
        if user_safe['balance'] < bet:
            await interaction.response.send_message("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!", ephemeral=True)
            return
        
        winning_number = random.randint(0, 36)
        user_number = random.randint(0, 36)
        
        # –ê–Ω–∏–º–∞—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è
        embed = discord.Embed(title="üé∞ –†—É–ª–µ—Ç–∫–∞ –≤—Ä–∞—â–∞–µ—Ç—Å—è...", color=0xffd700)
        await interaction.response.send_message(embed=embed)
        
        for i in range(3):
            await asyncio.sleep(1)
            embed.description = "‚è≥" * (i + 1)
            await interaction.edit_original_response(embed=embed)
        
        await asyncio.sleep(1)
        
        if user_number == winning_number:
            multiplier = 35
            base_winnings = bet * multiplier
            winnings = db.apply_buff_to_amount(interaction.user.id, base_winnings, 'roulette_bonus')
            winnings = db.apply_buff_to_amount(interaction.user.id, winnings, 'game_bonus')
            winnings = db.apply_buff_to_amount(interaction.user.id, winnings, 'multiplier')
            winnings = db.apply_buff_to_amount(interaction.user.id, winnings, 'all_bonus')
            
            db.update_balance(interaction.user.id, winnings)
            db.log_transaction(interaction.user.id, 'roulette_win', winnings, description="–ü–æ–±–µ–¥–∞ –≤ —Ä—É–ª–µ—Ç–∫–µ")
            db.update_user_stat(interaction.user.id, 'roulette_wins')
            db.update_consecutive_wins(interaction.user.id, True)
            
            result_text = f"üéâ –î–ñ–ï–ö–ü–û–¢! –í–∞—à–µ —á–∏—Å–ª–æ: {user_number}\n–í—ã–ø–∞–ª–æ: {winning_number}\n–í—ã–∏–≥—Ä—ã—à: {winnings} {EMOJIS['coin']} (x{multiplier})"
            color = 0x00ff00
        else:
            loss = db.apply_buff_to_amount(interaction.user.id, bet, 'loss_protection')
            db.update_balance(interaction.user.id, -loss)
            db.log_transaction(interaction.user.id, 'roulette_loss', -loss, description="–ü—Ä–æ–∏–≥—Ä—ã—à –≤ —Ä—É–ª–µ—Ç–∫–µ")
            db.update_consecutive_wins(interaction.user.id, False)
            
            result_text = f"üíÄ –ü—Ä–æ–∏–≥—Ä—ã—à! –í–∞—à–µ —á–∏—Å–ª–æ: {user_number}\n–í—ã–ø–∞–ª–æ: {winning_number}\n–ü–æ—Ç–µ—Ä—è–Ω–æ: {loss} {EMOJIS['coin']}"
            color = 0xff0000
        
        embed = discord.Embed(
            title=f"üé∞ –†—É–ª–µ—Ç–∫–∞ - –°—Ç–∞–≤–∫–∞: {bet} {EMOJIS['coin']}",
            description=result_text,
            color=color
        )
        await interaction.edit_original_response(embed=embed)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ roulette: {e}")
        await interaction.response.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ä—É–ª–µ—Ç–∫–µ!", ephemeral=True)

# –î–£–≠–õ–¨ –° –£–ß–ï–¢–û–ú –ë–ê–§–û–í
@bot.tree.command(name="duel", description="–í—ã–∑–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –¥—É—ç–ª—å")
@app_commands.describe(user="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –¥—É—ç–ª–∏", bet="–°—Ç–∞–≤–∫–∞ –≤ –º–æ–Ω–µ—Ç–∞—Ö")
async def duel(interaction: discord.Interaction, user: discord.Member, bet: int):
    if user.id == interaction.user.id:
        await interaction.response.send_message("–ù–µ–ª—å–∑—è –≤—ã–∑–≤–∞—Ç—å –Ω–∞ –¥—É—ç–ª—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!", ephemeral=True)
        return
    
    if bet <= 0:
        await interaction.response.send_message("–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!", ephemeral=True)
        return
    
    user_data = db.get_user(interaction.user.id)
    user_safe = get_user_data_safe(user_data)
    
    if user_safe['balance'] < bet:
        await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –¥—É—ç–ª–∏!", ephemeral=True)
        return
    
    target_data = db.get_user(user.id)
    target_safe = get_user_data_safe(target_data)
    
    if target_safe['balance'] < bet:
        await interaction.response.send_message(f"–£ {user.mention} –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –¥—É—ç–ª–∏!", ephemeral=True)
        return
    
    embed = discord.Embed(
        title=f"{EMOJIS['duel']} –í—ã–∑–æ–≤ –Ω–∞ –¥—É—ç–ª—å!",
        description=f"{interaction.user.mention} –≤—ã–∑—ã–≤–∞–µ—Ç {user.mention} –Ω–∞ –¥—É—ç–ª—å!",
        color=0xff0000
    )
    embed.add_field(name="–°—Ç–∞–≤–∫–∞", value=f"{bet} {EMOJIS['coin']}", inline=True)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞—Ñ—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    challenger_buffs = db.get_user_buffs(interaction.user.id)
    target_buffs = db.get_user_buffs(user.id)
    
    if challenger_buffs or target_buffs:
        buffs_text = ""
        if challenger_buffs:
            buffs_text += f"**{interaction.user.display_name}**: " + ", ".join([f"{buff['item_name']}" for buff in challenger_buffs.values()]) + "\n"
        if target_buffs:
            buffs_text += f"**{user.display_name}**: " + ", ".join([f"{buff['item_name']}" for buff in target_buffs.values()])
        embed.add_field(name="üéØ –ê–∫—Ç–∏–≤–Ω—ã–µ –±–∞—Ñ—ã", value=buffs_text, inline=False)
    
    embed.add_field(name="–í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç", value="30 —Å–µ–∫—É–Ω–¥", inline=True)
    embed.set_footer(text="–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –∑–∞–±–∏—Ä–∞–µ—Ç –≤—Å—é —Å—Ç–∞–≤–∫—É!")
    
    view = DuelView(interaction.user.id, user.id, bet)
    await interaction.response.send_message(embed=embed, view=view)

# –ö–†–ê–ñ–ê –° –£–ß–ï–¢–û–ú –ë–ê–§–û–í
@bot.tree.command(name="steal", description="–ü–æ–ø—ã—Ç–∞—Ç—å—Å—è —É–∫—Ä–∞—Å—Ç—å –º–æ–Ω–µ—Ç—ã —É –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ö–î 30 –º–∏–Ω)")
@app_commands.describe(user="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –∫—Ä–∞–¥–µ–º")
@app_commands.checks.cooldown(1, 1800.0, key=lambda i: (i.guild_id, i.user.id))
async def steal(interaction: discord.Interaction, user: discord.Member):
    if user.id == interaction.user.id:
        await interaction.response.send_message("–ù–µ–ª—å–∑—è –∫—Ä–∞—Å—Ç—å —É —Å–µ–±—è!", ephemeral=True)
        return
    
    thief_data = db.get_user(interaction.user.id)
    thief_safe = get_user_data_safe(thief_data)
    target_data = db.get_user(user.id)
    target_safe = get_user_data_safe(target_data)
    
    if thief_safe['balance'] < 10:
        await interaction.response.send_message("–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 10 –º–æ–Ω–µ—Ç –¥–ª—è –∫—Ä–∞–∂–∏!", ephemeral=True)
        return
    
    if target_safe['balance'] < 10:
        await interaction.response.send_message("–£ —Ü–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –∫—Ä–∞–∂–∏!", ephemeral=True)
        return
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Å—É–º–º—É –¥–ª—è –∫—Ä–∞–∂–∏ (–æ—Ç 5% –¥–æ 20% –æ—Ç –±–∞–ª–∞–Ω—Å–∞ —Ü–µ–ª–∏, –Ω–æ –Ω–µ –±–æ–ª–µ–µ 1000)
    max_steal = min(int(target_safe['balance'] * 0.2), 1000)
    min_steal = max(int(target_safe['balance'] * 0.05), 10)
    
    if max_steal < min_steal:
        amount = min_steal
    else:
        amount = random.randint(min_steal, max_steal)
    
    base_success_chance = 0.3
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–∞—Ñ—ã –∫ —à–∞–Ω—Å—É –∫—Ä–∞–∂–∏
    success_chance = db.apply_buff_to_chance(interaction.user.id, base_success_chance, 'steal_chance')
    success_chance = db.apply_buff_to_chance(interaction.user.id, success_chance, 'steal_bonus')
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–∞—Ñ –∑–∞—â–∏—Ç—ã —Ü–µ–ª–∏
    target_protection = db.apply_buff_to_chance(user.id, 1.0, 'steal_protection')
    success_chance = success_chance * (1 - target_protection)
    
    if random.random() <= success_chance:
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–∞—Ñ—ã –∫ —É–∫—Ä–∞–¥–µ–Ω–Ω–æ–π —Å—É–º–º–µ
        stolen_amount = db.apply_buff_to_amount(interaction.user.id, amount, 'multiplier')
        stolen_amount = db.apply_buff_to_amount(interaction.user.id, stolen_amount, 'all_bonus')
        
        db.update_balance(interaction.user.id, stolen_amount)
        db.update_balance(user.id, -amount)  # –¶–µ–ª—å —Ç–µ—Ä—è–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—É–º–º—É
        db.log_transaction(interaction.user.id, 'steal', stolen_amount, user.id, "–£—Å–ø–µ—à–Ω–∞—è –∫—Ä–∞–∂–∞")
        db.update_user_stat(interaction.user.id, 'steals_successful')
        db.update_consecutive_wins(interaction.user.id, True)
        
        embed = discord.Embed(
            title=f"{EMOJIS['steal']} –£—Å–ø–µ—à–Ω–∞—è –∫—Ä–∞–∂–∞!",
            description=f"{interaction.user.mention} —É–∫—Ä–∞–ª {stolen_amount} {EMOJIS['coin']} —É {user.mention}!",
            color=0x00ff00
        )
        embed.add_field(name="–®–∞–Ω—Å —É—Å–ø–µ—Ö–∞", value=f"{success_chance*100:.1f}%")
    else:
        penalty = min(amount // 2, 100)
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–∞—Ñ –∑–∞—â–∏—Ç—ã –æ—Ç –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π –∫ —à—Ç—Ä–∞—Ñ—É
        actual_penalty = db.apply_buff_to_amount(interaction.user.id, penalty, 'loss_protection')
        
        db.update_balance(interaction.user.id, -actual_penalty)
        db.log_transaction(interaction.user.id, 'steal_fail', -actual_penalty, user.id, "–ù–µ—É–¥–∞—á–Ω–∞—è –∫—Ä–∞–∂–∞")
        db.update_user_stat(interaction.user.id, 'steals_failed')
        db.update_consecutive_wins(interaction.user.id, False)
        
        embed = discord.Embed(
            title=f"{EMOJIS['lose']} –ö—Ä–∞–∂–∞ –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å!",
            description=f"{interaction.user.mention} –æ—à—Ç—Ä–∞—Ñ–æ–≤–∞–Ω –Ω–∞ {actual_penalty} {EMOJIS['coin']}!",
            color=0xff0000
        )
        embed.add_field(name="–®–∞–Ω—Å —É—Å–ø–µ—Ö–∞", value=f"{success_chance*100:.1f}%")
    
    await interaction.response.send_message(embed=embed)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–¥ –¥–ª—è /steal
@steal.error
async def steal_error(interaction: discord.Interaction, error: app_commands.AppCommandError):
    if isinstance(error, app_commands.CommandOnCooldown):
        minutes = int(error.retry_after // 60)
        seconds = int(error.retry_after % 60)
        
        await interaction.response.send_message(
            f"‚ùå –°–ª–µ–¥—É—é—â—É—é –∫—Ä–∞–∂—É –º–æ–∂–Ω–æ —Å–æ–≤–µ—Ä—à–∏—Ç—å —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç {seconds:02d} —Å–µ–∫—É–Ω–¥",
            ephemeral=True
        )
    else:
        raise error

# –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ö–û–ú–ê–ù–î–´ –ò–ó –í–¢–û–†–û–ì–û –ö–û–î–ê

@bot.tree.command(name="items", description="–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã")
async def items_list(interaction: discord.Interaction):
    try:
        items = db.get_all_items_safe()
        
        embed = discord.Embed(title="üì¶ –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã", color=0x3498db)
        
        for item in items:
            try:
                rarity_emoji = {
                    'common': '‚ö™',
                    'uncommon': 'üü¢', 
                    'rare': 'üîµ',
                    'epic': 'üü£',
                    'legendary': 'üü†',
                    'mythic': 'üü°'
                }.get(item[4] if len(item) > 4 else 'common', '‚ö™')
                
                buff_info = f"**–ë–∞—Ñ:** {item[7]}\n" if len(item) > 7 and item[7] else ""
                embed.add_field(
                    name=f"{rarity_emoji} {item[1]}",
                    value=f"{item[2]}\n{buff_info}**–¶–µ–Ω–∞:** {item[3]} {EMOJIS['coin']}",
                    inline=False
                )
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ {item}: {e}")
                continue
        
        await interaction.response.send_message(embed=embed)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ items: {e}")
        await interaction.response.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤!", ephemeral=True)

@bot.tree.command(name="myitems", description="–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –ø—Ä–µ–¥–º–µ—Ç—ã")
async def my_items(interaction: discord.Interaction):
    try:
        inventory = db.get_user_inventory_safe(interaction.user.id)
        
        embed = discord.Embed(title=f"üì¶ –ü—Ä–µ–¥–º–µ—Ç—ã {interaction.user.display_name}", color=0x3498db)
        
        items = inventory.get("items", {})
        if not items:
            embed.description = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤. –û—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –∫–µ–π—Å—ã –∏–ª–∏ –ø–æ–∫—É–ø–∞–π—Ç–µ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ!"
            await interaction.response.send_message(embed=embed)
            return
        
        for item_id, count in items.items():
            try:
                if item_id.isdigit():
                    item_data = db.get_item(int(item_id))
                    if item_data:
                        rarity_emoji = {
                            'common': '‚ö™',
                            'uncommon': 'üü¢', 
                            'rare': 'üîµ',
                            'epic': 'üü£',
                            'legendary': 'üü†',
                            'mythic': 'üü°'
                        }.get(item_data[4] if len(item_data) > 4 else 'common', '‚ö™')
                        
                        buff_info = f"\n**–≠—Ñ—Ñ–µ–∫—Ç:** {item_data[7]}" if len(item_data) > 7 and item_data[7] else ""
                        embed.add_field(
                            name=f"{rarity_emoji} {item_data[1]} √ó{count}",
                            value=f"{item_data[2]}{buff_info}",
                            inline=True
                        )
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ {item_id}: {e}")
                continue
        
        await interaction.response.send_message(embed=embed)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ myitems: {e}")
        await interaction.response.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤!", ephemeral=True)

@bot.tree.command(name="pay", description="–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –º–æ–Ω–µ—Ç—ã –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
@app_commands.describe(user="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–º—É –ø–µ—Ä–µ–≤–æ–¥–∏–º", amount="–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞")
async def pay(interaction: discord.Interaction, user: discord.Member, amount: int):
    if amount <= 0:
        await interaction.response.send_message("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!", ephemeral=True)
        return
    
    if user.id == interaction.user.id:
        await interaction.response.send_message("–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µ!", ephemeral=True)
        return
    
    sender_data = db.get_user(interaction.user.id)
    sender_safe = get_user_data_safe(sender_data)
    
    if sender_safe['balance'] < amount:
        await interaction.response.send_message("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!", ephemeral=True)
        return
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–∞—Ñ –∫ –∫–æ–º–∏—Å—Å–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    transfer_amount = db.apply_buff_to_amount(interaction.user.id, amount, 'transfer_bonus')
    
    db.update_balance(interaction.user.id, -transfer_amount)
    db.update_balance(user.id, amount)  # –ü–æ–ª—É—á–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å—É–º–º—É
    db.log_transaction(interaction.user.id, 'transfer', -transfer_amount, user.id, f"–ü–µ—Ä–µ–≤–æ–¥ {user.name}")
    db.log_transaction(user.id, 'transfer', amount, interaction.user.id, f"–ü–æ–ª—É—á–µ–Ω–æ –æ—Ç {interaction.user.name}")
    
    embed = discord.Embed(
        title=f"{EMOJIS['coin']} –ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤",
        description=f"{interaction.user.mention} ‚Üí {user.mention}",
        color=0x00ff00
    )
    embed.add_field(name="–°—É–º–º–∞", value=f"{amount} {EMOJIS['coin']}")
    if transfer_amount < amount:
        embed.add_field(name="–ö–æ–º–∏—Å—Å–∏—è", value=f"-{amount - transfer_amount} {EMOJIS['coin']} (–±–∞—Ñ)")
    
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="giftcase", description="–ü–æ–¥–∞—Ä–∏—Ç—å –∫–µ–π—Å –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
@app_commands.describe(user="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–º—É –¥–∞—Ä–∏–º –∫–µ–π—Å", case_id="ID –∫–µ–π—Å–∞")
async def giftcase(interaction: discord.Interaction, user: discord.Member, case_id: int):
    if user.id == interaction.user.id:
        await interaction.response.send_message("–ù–µ–ª—å–∑—è –¥–∞—Ä–∏—Ç—å –∫–µ–π—Å —Å–∞–º–æ–º—É —Å–µ–±–µ!", ephemeral=True)
        return
    
    case_data = db.get_case(case_id)
    if not case_data:
        await interaction.response.send_message("–ö–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!", ephemeral=True)
        return
    
    user_data = db.get_user(interaction.user.id)
    user_safe = get_user_data_safe(user_data)
    
    if user_safe['balance'] < case_data[2]:
        await interaction.response.send_message("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!", ephemeral=True)
        return
    
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ
    db.get_user(user.id)
    
    # –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–µ–π—Å–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    db.update_balance(interaction.user.id, -case_data[2])
    db.add_case_to_inventory(user.id, case_id, case_data[1], "gifted")
    db.log_transaction(interaction.user.id, 'gift_case', -case_data[2], user.id, f"–ü–æ–¥–∞—Ä–æ–∫: {case_data[1]}")
    db.update_user_stat(interaction.user.id, 'gifts_sent')
    
    embed = discord.Embed(
        title="üéÅ –ö–µ–π—Å –≤ –ø–æ–¥–∞—Ä–æ–∫!",
        description=f"{interaction.user.mention} –ø–æ–¥–∞—Ä–∏–ª {case_data[1]} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.mention}!",
        color=0xff69b4
    )
    embed.add_field(name="üíº –ü–æ–ª—É—á–∞—Ç–µ–ª—å", value=f"–ö–µ–π—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å {user.mention}")
    embed.add_field(name="üì¶ –ö–µ–π—Å", value=f"{case_data[1]}")
    embed.add_field(name="üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å", value=f"{case_data[2]} {EMOJIS['coin']}")
    
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="openmycase", description="–û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å –∏–∑ –≤–∞—à–µ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è")
@app_commands.describe(case_id="ID –∫–µ–π—Å–∞ –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è")
async def openmycase(interaction: discord.Interaction, case_id: int):
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    db.get_user(interaction.user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–µ–π—Å –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
    inventory_data = db.get_user_inventory(interaction.user.id)
    case_key = f"case_{case_id}"
    
    if case_key not in inventory_data.get("cases", {}):
        await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –∫–µ–π—Å–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ!", ephemeral=True)
        return
    
    case_data = db.get_case(case_id)
    if not case_data:
        await interaction.response.send_message("–ö–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!", ephemeral=True)
        return
    
    # –£–±–∏—Ä–∞–µ–º –∫–µ–π—Å –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    db.remove_case_from_inventory(interaction.user.id, case_id)
    
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–µ–π—Å
    case = {
        'name': case_data[1],
        'price': case_data[2],
        'rewards': json.loads(case_data[3])
    }
    
    # –°–ø–∏–Ω –∞–Ω–∏–º–∞—Ü–∏—è
    embed = discord.Embed(title="üé∞ –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–∞...", color=0xffd700)
    await interaction.response.send_message(embed=embed)
    
    for i in range(3):
        await asyncio.sleep(1)
        embed.description = "üéÅ" * (i + 1)
        await interaction.edit_original_response(embed=embed)
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã
    reward = get_reward(case)
    reward_text = await process_reward(interaction.user, reward, case)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–æ–≤
    db.update_user_stat(interaction.user.id, 'cases_opened')
    
    embed = discord.Embed(
        title=f"üéâ {case['name']} –æ—Ç–∫—Ä—ã—Ç!",
        description=reward_text,
        color=0x00ff00
    )
    embed.set_footer(text="–ö–µ–π—Å –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è")
    
    await interaction.edit_original_response(embed=embed)

# –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ö–û–ú–ê–ù–î–ê MARKET
@bot.tree.command(name="market", description="–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–º")
@app_commands.describe(action="–î–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ", item_name="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞", price="–¶–µ–Ω–∞")
@app_commands.choices(action=[
    app_commands.Choice(name="üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤", value="list"),
    app_commands.Choice(name="üí∞ –ü—Ä–æ–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç", value="sell"),
    app_commands.Choice(name="üõí –ö—É–ø–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç", value="buy")
])
async def market(interaction: discord.Interaction, action: app_commands.Choice[str], item_name: str = None, price: int = None):
    try:
        if action.value == "list":
            cursor = db.conn.cursor()
            cursor.execute('SELECT id, seller_id, item_name, price FROM market LIMIT 10')
            items = cursor.fetchall()
            
            embed = discord.Embed(title="üè™ –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å", color=0x00ff00)
            
            if not items:
                embed.description = "–ù–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤."
            else:
                for item in items:
                    # –ë–ï–ó–û–ü–ê–°–ù–´–ô –î–û–°–¢–£–ü –ö –î–ê–ù–ù–´–ú
                    item_id = item[0] if len(item) > 0 else "N/A"
                    seller_id = item[1] if len(item) > 1 else None
                    item_name_db = item[2] if len(item) > 2 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç"
                    item_price = item[3] if len(item) > 3 else 0
                    
                    seller = bot.get_user(seller_id) if seller_id else None
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞—Ñ–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ
                    buff_info = ""
                    try:
                        item_data = db.get_item_by_name(item_name_db)
                        if item_data and len(item_data) > 7 and item_data[7]:
                            buff_info = f" - {item_data[7]}"
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–¥–º–µ—Ç–µ {item_name_db}: {e}")
                    
                    embed.add_field(
                        name=f"#{item_id} {item_name_db}{buff_info}",
                        value=f"–¶–µ–Ω–∞: {item_price} {EMOJIS['coin']}\n–ü—Ä–æ–¥–∞–≤–µ—Ü: {seller.name if seller else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}",
                        inline=False
                    )
            
            await interaction.response.send_message(embed=embed)
        
        elif action.value == "sell":
            if not item_name or not price:
                await interaction.response.send_message("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏ —Ü–µ–Ω—É!", ephemeral=True)
                return
            
            if price <= 0:
                await interaction.response.send_message("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!", ephemeral=True)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
            inventory = db.get_user_inventory(interaction.user.id)
            item_found = False
            
            for item_id, count in inventory.get("items", {}).items():
                try:
                    item_data = db.get_item(int(item_id))
                    if item_data and len(item_data) > 1 and item_data[1] == item_name:
                        item_found = True
                        break
                except (ValueError, IndexError) as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ {item_id}: {e}")
                    continue
            
            if not item_found:
                await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ.", ephemeral=True)
                return
            
            cursor = db.conn.cursor()
            cursor.execute('INSERT INTO market (seller_id, item_name, price) VALUES (%s, %s, %s)', 
                          (interaction.user.id, item_name, price))
            db.conn.commit()
            db.update_user_stat(interaction.user.id, 'market_sales')
            
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
            db.remove_item_from_inventory(interaction.user.id, item_name)
            
            embed = discord.Embed(
                title="üè™ –ü—Ä–µ–¥–º–µ—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–¥–∞–∂—É",
                description=f"–ü—Ä–µ–¥–º–µ—Ç: {item_name}\n–¶–µ–Ω–∞: {price} {EMOJIS['coin']}",
                color=0x00ff00
            )
            await interaction.response.send_message(embed=embed)
        
        elif action.value == "buy":
            if not item_name:
                await interaction.response.send_message("–£–∫–∞–∂–∏—Ç–µ ID –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏!", ephemeral=True)
                return
            
            try:
                item_id = int(item_name)
            except ValueError:
                await interaction.response.send_message("ID –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!", ephemeral=True)
                return
            
            cursor = db.conn.cursor()
            cursor.execute('SELECT id, seller_id, item_name, price FROM market WHERE id = %s', (item_id,))
            item = cursor.fetchone()
            
            if not item:
                await interaction.response.send_message("–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!", ephemeral=True)
                return
            
            # –ë–ï–ó–û–ü–ê–°–ù–´–ô –î–û–°–¢–£–ü –ö –î–ê–ù–ù–´–ú –¢–û–í–ê–†–ê
            market_item_id = item[0] if len(item) > 0 else None
            seller_id = item[1] if len(item) > 1 else None
            market_item_name = item[2] if len(item) > 2 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç"
            item_price = item[3] if len(item) > 3 else 0
            
            if not seller_id:
                await interaction.response.send_message("–û—à–∏–±–∫–∞: –ø—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω!", ephemeral=True)
                return
            
            user_data = db.get_user(interaction.user.id)
            user_safe = get_user_data_safe(user_data)
            
            if user_safe['balance'] < item_price:
                await interaction.response.send_message("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!", ephemeral=True)
                return
            
            # –ü–æ–∫—É–ø–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
            db.update_balance(interaction.user.id, -item_price)
            db.update_balance(seller_id, item_price)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
            db.add_item_to_inventory(interaction.user.id, market_item_name)
            
            cursor.execute('DELETE FROM market WHERE id = %s', (market_item_id,))
            db.conn.commit()
            
            db.log_transaction(interaction.user.id, 'market_buy', -item_price, seller_id, f"–ü–æ–∫—É–ø–∫–∞: {market_item_name}")
            db.log_transaction(seller_id, 'market_sell', item_price, interaction.user.id, f"–ü—Ä–æ–¥–∞–∂–∞: {market_item_name}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞—Ñ–µ –∫—É–ø–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
            buff_info = ""
            try:
                item_data = db.get_item_by_name(market_item_name)
                if item_data and len(item_data) > 7 and item_data[7]:
                    buff_info = f"\n**–≠—Ñ—Ñ–µ–∫—Ç:** {item_data[7]}"
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞—Ñ–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ {market_item_name}: {e}")
            
            embed = discord.Embed(
                title="üè™ –ü–æ–∫—É–ø–∫–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞!",
                description=f"–í—ã –∫—É–ø–∏–ª–∏ **{market_item_name}** –∑–∞ {item_price} {EMOJIS['coin']}{buff_info}",
                color=0x00ff00
            )
            await interaction.response.send_message(embed=embed)
    
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ market: {e}")
        error_embed = discord.Embed(
            title="‚ùå –û—à–∏–±–∫–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞",
            description="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            color=0xff0000
        )
        await interaction.response.send_message(embed=error_embed, ephemeral=True)

@bot.tree.command(name="inventory", description="–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å")
async def inventory(interaction: discord.Interaction):
    try:
        inventory_data = db.get_user_inventory_safe(interaction.user.id)
        
        embed = discord.Embed(
            title=f"üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å {interaction.user.display_name}",
            color=0x3498db
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–µ–π—Å—ã
        cases = inventory_data.get("cases", {})
        if cases:
            cases_text = ""
            for case_key, case_info in cases.items():
                try:
                    case_id = case_key.replace("case_", "")
                    cases_text += f"‚Ä¢ {case_info.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–µ–π—Å')} (ID: {case_id}) √ó{case_info.get('count', 1)}\n"
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–µ–π—Å–∞ {case_key}: {e}")
                    continue
            embed.add_field(name="üéÅ –ö–µ–π—Å—ã", value=cases_text, inline=False)
        else:
            embed.add_field(name="üéÅ –ö–µ–π—Å—ã", value="–ü—É—Å—Ç–æ", inline=False)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
        items = inventory_data.get("items", {})
        if items:
            items_text = ""
            for item_id, count in items.items():
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
                    item_name = db.get_item_name_by_id(item_id)
                    items_text += f"‚Ä¢ {item_name} √ó{count}\n"
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ {item_id}: {e}")
                    items_text += f"‚Ä¢ –ü—Ä–µ–¥–º–µ—Ç ID:{item_id} √ó{count}\n"
            
            if items_text:
                embed.add_field(name="üì¶ –ü—Ä–µ–¥–º–µ—Ç—ã", value=items_text, inline=False)
            else:
                embed.add_field(name="üì¶ –ü—Ä–µ–¥–º–µ—Ç—ã", value="–ü—É—Å—Ç–æ", inline=False)
        else:
            embed.add_field(name="üì¶ –ü—Ä–µ–¥–º–µ—Ç—ã", value="–ü—É—Å—Ç–æ", inline=False)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –±–∞—Ñ—ã
        buffs = db.get_user_buffs(interaction.user.id)
        if buffs:
            buffs_text = "\n".join([f"‚Ä¢ **{buff['item_name']}**: {buff['description']}" for buff in buffs.values()])
            embed.add_field(name="üéØ –ê–∫—Ç–∏–≤–Ω—ã–µ –±–∞—Ñ—ã", value=buffs_text, inline=False)
        
        await interaction.response.send_message(embed=embed)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ inventory: {e}")
        await interaction.response.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è!", ephemeral=True)

# –ö–í–ï–°–¢–´ –ò –î–û–°–¢–ò–ñ–ï–ù–ò–Ø
@bot.tree.command(name="quest", description="–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∫–≤–µ—Å—Ç")
@app_commands.checks.cooldown(1, 10800.0)  # 3 —á–∞—Å–∞ –ö–î
async def quest(interaction: discord.Interaction):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∫–≤–µ—Å—Ç
        quest_id, quest_data = random.choice(list(QUESTS.items()))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–≤–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if db.add_user_quest(interaction.user.id, quest_id):
            base_reward = quest_data['reward']
            reward = db.apply_buff_to_amount(interaction.user.id, base_reward, 'quest_bonus')
            reward = db.apply_buff_to_amount(interaction.user.id, reward, 'multiplier')
            reward = db.apply_buff_to_amount(interaction.user.id, reward, 'all_bonus')
            
            embed = discord.Embed(
                title=f"{EMOJIS['quest']} –ù–æ–≤—ã–π –∫–≤–µ—Å—Ç!",
                description=quest_data['description'],
                color=0x00ff00
            )
            embed.add_field(name="–ù–∞–≥—Ä–∞–¥–∞", value=f"{reward} {EMOJIS['coin']}")
            embed.set_footer(text="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /quests —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –∫–≤–µ—Å—Ç—ã")
            
            await interaction.response.send_message(embed=embed)
        else:
            await interaction.response.send_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –∫–≤–µ—Å—Ç!", ephemeral=True)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ quest: {e}")
        await interaction.response.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–≤–µ—Å—Ç–∞!", ephemeral=True)

@bot.tree.command(name="achievements", description="–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è")
async def achievements(interaction: discord.Interaction):
    try:
        cursor = db.conn.cursor()
        cursor.execute('SELECT achievement_id FROM achievements WHERE user_id = %s', (interaction.user.id,))
        user_achievements = [row[0] for row in cursor.fetchall()]
        
        embed = discord.Embed(title="üèÖ –í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è", color=0xffd700)
        
        unlocked_count = 0
        achievements_list = []
        
        for achievement_id, achievement in ACHIEVEMENTS.items():
            status = "‚úÖ" if achievement_id in user_achievements else "‚ùå"
            if achievement_id in user_achievements:
                unlocked_count += 1
                
            achievements_list.append(
                f"{status} **{achievement['name']}**\n{achievement['description']}\n–ù–∞–≥—Ä–∞–¥–∞: {achievement['reward']} {EMOJIS['coin']}\n"
            )
        
        if achievements_list:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –º–Ω–æ–≥–æ
            pages = []
            current_page = ""
            
            for achievement in achievements_list:
                if len(current_page) + len(achievement) > 2000:
                    pages.append(current_page)
                    current_page = achievement
                else:
                    current_page += achievement
            
            if current_page:
                pages.append(current_page)
            
            if len(pages) == 1:
                embed.description = pages[0]
                await interaction.response.send_message(embed=embed)
            else:
                # –°–æ–∑–¥–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
                class AchievementsView(View):
                    def __init__(self, pages, author_id):
                        super().__init__(timeout=120)
                        self.pages = pages
                        self.current_page = 0
                        self.total_pages = len(pages)
                        self.author_id = author_id
                        self.update_buttons()

                    def update_buttons(self):
                        self.previous_button.disabled = (self.current_page == 0)
                        self.next_button.disabled = (self.current_page >= self.total_pages - 1)

                    @discord.ui.button(label='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', style=discord.ButtonStyle.secondary)
                    async def previous_button(self, interaction: discord.Interaction, button: Button):
                        if interaction.user.id != self.author_id:
                            await interaction.response.send_message("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏—è!", ephemeral=True)
                            return
                        
                        if self.current_page > 0:
                            self.current_page -= 1
                            self.update_buttons()
                            embed = self.create_embed()
                            await interaction.response.edit_message(embed=embed, view=self)

                    @discord.ui.button(label='‚û°Ô∏è –í–ø–µ—Ä–µ–¥', style=discord.ButtonStyle.secondary)
                    async def next_button(self, interaction: discord.Interaction, button: Button):
                        if interaction.user.id != self.author_id:
                            await interaction.response.send_message("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏—è!", ephemeral=True)
                            return
                        
                        if self.current_page < self.total_pages - 1:
                            self.current_page += 1
                            self.update_buttons()
                            embed = self.create_embed()
                            await interaction.response.edit_message(embed=embed, view=self)

                    def create_embed(self):
                        embed = discord.Embed(
                            title=f"üèÖ –í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {self.current_page + 1}/{self.total_pages})",
                            description=self.pages[self.current_page],
                            color=0xffd700
                        )
                        embed.set_footer(text=f"–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {unlocked_count}/{len(ACHIEVEMENTS)}")
                        return embed
                
                view = AchievementsView(pages, interaction.user.id)
                embed = view.create_embed()
                await interaction.response.send_message(embed=embed, view=view)
        else:
            embed.description = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–≥—Ä–∞—Ç—å, —á—Ç–æ–±—ã –∏—Ö –ø–æ–ª—É—á–∏—Ç—å!"
            embed.set_footer(text="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π")
            await interaction.response.send_message(embed=embed)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ achievements: {e}")
        await interaction.response.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π!", ephemeral=True)

@bot.tree.command(name="stats", description="–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
async def stats(interaction: discord.Interaction):
    cursor = db.conn.cursor()
    cursor.execute('SELECT * FROM user_stats WHERE user_id = %s', (interaction.user.id,))
    stats_data = cursor.fetchone()
    
    if not stats_data:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        cursor.execute('INSERT INTO user_stats (user_id) VALUES (%s)', (interaction.user.id,))
        db.conn.commit()
        cursor.execute('SELECT * FROM user_stats WHERE user_id = %s', (interaction.user.id,))
        stats_data = cursor.fetchone()
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –±–∞—Ñ—ã
    buffs = db.get_user_buffs(interaction.user.id)
    
    embed = discord.Embed(title="üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", color=0x3498db)
    
    embed.add_field(
        name="üéÆ –ò–≥—Ä–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        value=f"**–ö–µ–π—Å—ã –æ—Ç–∫—Ä—ã—Ç–æ:** {stats_data[1]}\n"
              f"**–î—É—ç–ª–µ–π –≤—ã–∏–≥—Ä–∞–Ω–æ:** {stats_data[2]}\n"
              f"**–£—Å–ø–µ—à–Ω—ã—Ö –∫—Ä–∞–∂:** {stats_data[3]}\n"
              f"**–ù–µ—É–¥–∞—á–Ω—ã—Ö –∫—Ä–∞–∂:** {stats_data[4]}",
        inline=False
    )
    
    embed.add_field(
        name="üé∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä",
        value=f"**–ü–æ–±–µ–¥ –≤ —Ä—É–ª–µ—Ç–∫–µ:** {stats_data[5]}\n"
              f"**–ü–æ–±–µ–¥ –≤ —Å–ª–æ—Ç–∞—Ö:** {stats_data[6]}\n"
              f"**–ü–æ–±–µ–¥ –≤ –±–ª—ç–∫–¥–∂–µ–∫–µ:** {stats_data[7]}\n"
              f"**–ü–æ–±–µ–¥ –≤ coinflip:** {stats_data[8]}",
        inline=False
    )
    
    embed.add_field(
        name="üìà –î—Ä—É–≥–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        value=f"**–ï–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥:** {stats_data[9]}\n"
              f"**–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:** {stats_data[10]} {EMOJIS['coin']}\n"
              f"**–ü—Ä–æ–¥–∞–∂ –Ω–∞ –º–∞—Ä–∫–µ—Ç–µ:** {stats_data[11]}\n"
              f"**–ü–æ–¥–∞—Ä–∫–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:** {stats_data[12]}\n"
              f"**–ü—Ä–µ–¥–º–µ—Ç–æ–≤ —Å–æ–±—Ä–∞–Ω–æ:** {stats_data[14]}",
        inline=False
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –±–∞—Ñ—ã
    if buffs:
        buffs_text = "\n".join([f"‚Ä¢ **{buff['item_name']}**: {buff['description']}" for buff in buffs.values()])
        embed.add_field(name="üéØ –ê–∫—Ç–∏–≤–Ω—ã–µ –±–∞—Ñ—ã", value=buffs_text, inline=False)
    
    await interaction.response.send_message(embed=embed)

# –õ–ò–î–ï–†–ë–û–†–î–´
@bot.tree.command(name="leaderboard", description="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤")
@app_commands.describe(type="–¢–∏–ø –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞")
@app_commands.choices(type=[
    app_commands.Choice(name="üí∞ –ë–∞–ª–∞–Ω—Å", value="balance"),
    app_commands.Choice(name="üèÜ –ü–æ–±–µ–¥—ã", value="wins"),
    app_commands.Choice(name="ü¶π –ö—Ä–∞–∂–∏", value="steals"),
    app_commands.Choice(name="üéÅ –ö–µ–π—Å—ã", value="cases"),
    app_commands.Choice(name="üèÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", value="achievements"),
    app_commands.Choice(name="üì¶ –ü—Ä–µ–¥–º–µ—Ç—ã", value="items")
])
async def leaderboard(interaction: discord.Interaction, type: app_commands.Choice[str]):
    cursor = db.conn.cursor()
    
    if type.value == 'balance':
        cursor.execute('SELECT user_id, balance FROM users ORDER BY balance DESC LIMIT 10')
        title = "üí∞ –õ–∏–¥–µ—Ä—ã –ø–æ –±–∞–ª–∞–Ω—Å—É"
        
        embed = discord.Embed(title=title, color=0xffd700)
        
        for i, (user_id, balance) in enumerate(cursor.fetchall(), 1):
            user = bot.get_user(user_id)
            name = user.display_name if user else f"User#{user_id}"
            embed.add_field(
                name=f"{i}. {name}",
                value=f"{balance} {EMOJIS['coin']}",
                inline=False
            )
    
    elif type.value == 'wins':
        cursor.execute('''
            SELECT user_id, 
                   (COALESCE(roulette_wins, 0) + COALESCE(duels_won, 0) + COALESCE(slot_wins, 0) + 
                    COALESCE(blackjack_wins, 0) + COALESCE(coinflip_wins, 0)) as total_wins 
            FROM user_stats 
            ORDER BY total_wins DESC LIMIT 10
        ''')
        title = "üèÜ –õ–∏–¥–µ—Ä—ã –ø–æ –ø–æ–±–µ–¥–∞–º"
        
        embed = discord.Embed(title=title, color=0xffd700)
        
        for i, (user_id, wins) in enumerate(cursor.fetchall(), 1):
            user = bot.get_user(user_id)
            name = user.display_name if user else f"User#{user_id}"
            embed.add_field(
                name=f"{i}. {name}",
                value=f"{wins} –ø–æ–±–µ–¥",
                inline=False
            )
    
    elif type.value == 'steals':
        cursor.execute('SELECT user_id, steals_successful FROM user_stats ORDER BY steals_successful DESC LIMIT 10')
        title = "ü¶π –õ–∏–¥–µ—Ä—ã –ø–æ –∫—Ä–∞–∂–∞–º"
        
        embed = discord.Embed(title=title, color=0xffd700)
        
        for i, (user_id, steals) in enumerate(cursor.fetchall(), 1):
            user = bot.get_user(user_id)
            name = user.display_name if user else f"User#{user_id}"
            embed.add_field(
                name=f"{i}. {name}",
                value=f"{steals} –∫—Ä–∞–∂",
                inline=False
            )
    
    elif type.value == 'cases':
        cursor.execute('SELECT user_id, cases_opened FROM user_stats ORDER BY cases_opened DESC LIMIT 10')
        title = "üéÅ –õ–∏–¥–µ—Ä—ã –ø–æ –∫–µ–π—Å–∞–º"
        
        embed = discord.Embed(title=title, color=0xffd700)
        
        for i, (user_id, cases) in enumerate(cursor.fetchall(), 1):
            user = bot.get_user(user_id)
            name = user.display_name if user else f"User#{user_id}"
            embed.add_field(
                name=f"{i}. {name}",
                value=f"{cases} –∫–µ–π—Å–æ–≤",
                inline=False
            )
    
    elif type.value == 'achievements':
        cursor.execute('''
            SELECT user_id, COUNT(*) as achievement_count 
            FROM achievements 
            GROUP BY user_id 
            ORDER BY achievement_count DESC LIMIT 10
        ''')
        title = "üèÖ –õ–∏–¥–µ—Ä—ã –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º"
        
        embed = discord.Embed(title=title, color=0xffd700)
        
        for i, (user_id, achievements_count) in enumerate(cursor.fetchall(), 1):
            user = bot.get_user(user_id)
            name = user.display_name if user else f"User#{user_id}"
            embed.add_field(
                name=f"{i}. {name}",
                value=f"{achievements_count} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π",
                inline=False
            )
    
    elif type.value == 'items':
        cursor.execute('SELECT user_id, items_collected FROM user_stats ORDER BY items_collected DESC LIMIT 10')
        title = "üì¶ –õ–∏–¥–µ—Ä—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º"
        
        embed = discord.Embed(title=title, color=0xffd700)
        
        for i, (user_id, items) in enumerate(cursor.fetchall(), 1):
            user = bot.get_user(user_id)
            name = user.display_name if user else f"User#{user_id}"
            embed.add_field(
                name=f"{i}. {name}",
                value=f"{items} –ø—Ä–µ–¥–º–µ—Ç–æ–≤",
                inline=False
            )
    
    await interaction.response.send_message(embed=embed)

# –ê–î–ú–ò–ù-–ö–û–ú–ê–ù–î–´
@bot.tree.command(name="admin_addcoins", description="–î–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–∞–¥–º–∏–Ω)")
@app_commands.describe(user="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", amount="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç")
@is_admin()
async def admin_addcoins(interaction: discord.Interaction, user: discord.Member, amount: int):
    try:
        db.update_balance(user.id, amount)
        db.log_transaction(interaction.user.id, 'admin_add', amount, user.id, f"–ê–¥–º–∏–Ω {interaction.user.name}")
        
        embed = discord.Embed(
            title="‚öôÔ∏è –ê–¥–º–∏–Ω –¥–µ–π—Å—Ç–≤–∏–µ",
            description=f"–í—ã–¥–∞–Ω–æ {amount} {EMOJIS['coin']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.mention}",
            color=0x00ff00
        )
        await interaction.response.send_message(embed=embed)
    except Exception as e:
        await interaction.response.send_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}", ephemeral=True)

@bot.tree.command(name="admin_removecoins", description="–ó–∞–±—Ä–∞—Ç—å –º–æ–Ω–µ—Ç—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–º–∏–Ω)")
@app_commands.describe(user="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", amount="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç")
@is_admin()
async def admin_removecoins(interaction: discord.Interaction, user: discord.Member, amount: int):
    try:
        db.update_balance(user.id, -amount)
        db.log_transaction(interaction.user.id, 'admin_remove', -amount, user.id, f"–ê–¥–º–∏–Ω {interaction.user.name}")
        
        embed = discord.Embed(
            title="‚öôÔ∏è –ê–¥–º–∏–Ω –¥–µ–π—Å—Ç–≤–∏–µ",
            description=f"–ó–∞–±—Ä–∞–Ω–æ {amount} {EMOJIS['coin']} —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.mention}",
            color=0xff0000
        )
        await interaction.response.send_message(embed=embed)
    except Exception as e:
        await interaction.response.send_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}", ephemeral=True)

@bot.tree.command(name="admin_giveitem", description="–í—ã–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–∞–¥–º–∏–Ω)")
@app_commands.describe(user="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", item_name="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞")
@is_admin()
async def admin_giveitem(interaction: discord.Interaction, user: discord.Member, item_name: str):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
        item_data = db.get_item_by_name(item_name)
        if not item_data:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            all_items = db.get_all_items()
            item_list = "\n".join([f"‚Ä¢ {item[1]}" for item in all_items[:10]])
            if len(all_items) > 10:
                item_list += f"\n‚Ä¢ ... –∏ –µ—â—ë {len(all_items) - 10} –ø—Ä–µ–¥–º–µ—Ç–æ–≤"
            
            embed = discord.Embed(
                title="‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                description=f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:\n{item_list}",
                color=0xff0000
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return
        
        db.add_item_to_inventory(user.id, item_name)
        
        embed = discord.Embed(
            title="‚öôÔ∏è –ê–¥–º–∏–Ω –¥–µ–π—Å—Ç–≤–∏–µ",
            description=f"–ü—Ä–µ–¥–º–µ—Ç '{item_name}' –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.mention}",
            color=0x00ff00
        )
        buff_description = item_data[7] if len(item_data) > 7 and item_data[7] else "–ù–µ—Ç –±–∞—Ñ–∞"
        embed.add_field(name="–≠—Ñ—Ñ–µ–∫—Ç", value=buff_description)
        await interaction.response.send_message(embed=embed)
    except Exception as e:
        await interaction.response.send_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}", ephemeral=True)

@bot.tree.command(name="admin_createcase", description="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–µ–π—Å (–∞–¥–º–∏–Ω)")
@app_commands.describe(name="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–µ–π—Å–∞", price="–¶–µ–Ω–∞ –∫–µ–π—Å–∞", rewards_json="–ù–∞–≥—Ä–∞–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON")
@is_admin()
async def admin_createcase(interaction: discord.Interaction, name: str, price: int, rewards_json: str):
    try:
        rewards = json.loads(rewards_json)
        cursor = db.conn.cursor()
        cursor.execute('INSERT INTO cases (name, price, rewards) VALUES (%s, %s, %s) RETURNING id', 
                      (name, price, json.dumps(rewards)))
        case_id = cursor.fetchone()[0]
        db.conn.commit()
        
        embed = discord.Embed(
            title="‚öôÔ∏è –ê–¥–º–∏–Ω –¥–µ–π—Å—Ç–≤–∏–µ",
            description=f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–µ–π—Å: {name}\n–¶–µ–Ω–∞: {price} {EMOJIS['coin']}\nID: {case_id}",
            color=0x00ff00
        )
        await interaction.response.send_message(embed=embed)
    except json.JSONDecodeError:
        await interaction.response.send_message("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –¥–ª—è –Ω–∞–≥—Ä–∞–¥", ephemeral=True)
    except Exception as e:
        await interaction.response.send_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}", ephemeral=True)

@bot.tree.command(name="admin_viewtransactions", description="–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–∞–¥–º–∏–Ω)")
@app_commands.describe(user="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
@is_admin()
async def admin_viewtransactions(interaction: discord.Interaction, user: discord.Member = None):
    try:
        cursor = db.conn.cursor()
        
        if user:
            cursor.execute('SELECT * FROM transactions WHERE user_id = %s OR target_user_id = %s ORDER BY timestamp DESC LIMIT 10', (user.id, user.id))
            title = f"üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.name}"
        else:
            cursor.execute('SELECT * FROM transactions ORDER BY timestamp DESC LIMIT 10')
            title = "üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"
        
        transactions = cursor.fetchall()
        
        embed = discord.Embed(title=title, color=0x3498db)
        
        for trans in transactions:
            trans_user = bot.get_user(trans[1])
            target_user = bot.get_user(trans[4]) if trans[4] else None
            
            embed.add_field(
                name=f"#{trans[0]} {trans[2]}",
                value=f"–°—É–º–º–∞: {trans[3]} {EMOJIS['coin']}\n–û—Ç: {trans_user.name if trans_user else '–°–∏—Å—Ç–µ–º–∞'}\n–ö–æ–º—É: {target_user.name if target_user else '–ù–µ—Ç'}\n–û–ø–∏—Å–∞–Ω–∏–µ: {trans[5]}",
                inline=False
            )
        
        await interaction.response.send_message(embed=embed)
    except Exception as e:
        await interaction.response.send_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}", ephemeral=True)

# –ö–û–ú–ê–ù–î–ê –ü–û–ú–û–©–ò
@bot.tree.command(name="help", description="–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥")
async def help_command(interaction: discord.Interaction):
    embed = discord.Embed(
        title="üéÆ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –ë–æ—Ç - –ü–æ–º–æ—â—å",
        description="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫—É—é –∏–≥—Ä—É! –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–ª–Ω—É—é —Å–∏—Å—Ç–µ–º—É —ç–∫–æ–Ω–æ–º–∏–∫–∏ —Å –∫–µ–π—Å–∞–º–∏, –º–∏–Ω–∏-–∏–≥—Ä–∞–º–∏, –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–º, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏ –∏ —Å–∏—Å—Ç–µ–º–æ–π –±–∞—Ñ–æ–≤.",
        color=0x3498db
    )
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
    embed.add_field(
        name="üìä –û –±–æ—Ç–µ",
        value="‚Ä¢ –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –≤–∞–ª—é—Ç–∞: –º–æ–Ω–µ—Ç—ã ü™ô\n‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã üìÖ\n‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –∫–µ–π—Å–æ–≤ üéÅ\n‚Ä¢ –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å üè™\n‚Ä¢ –ú–∏–Ω–∏-–∏–≥—Ä—ã üé∞\n‚Ä¢ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è üèÖ\n‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –±–∞—Ñ–æ–≤ üéØ",
        inline=False
    )
    
    # –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
    embed.add_field(
        name="üí∞ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã",
        value="""**/balance** [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] - –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–∞—Ñ—ã
**/daily** - –ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É (—É—á–∏—Ç—ã–≤–∞–µ—Ç –±–∞—Ñ—ã)
**/pay** @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É–º–º–∞ - –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –º–æ–Ω–µ—Ç—ã
**/inventory** - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–∞—Ñ—ã
**/stats** - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É""",
        inline=False
    )
    
    # –ö–æ–º–∞–Ω–¥—ã –∫–µ–π—Å–æ–≤
    embed.add_field(
        name="üéÅ –ö–æ–º–∞–Ω–¥—ã –∫–µ–π—Å–æ–≤",
        value="""**/cases** - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–µ–π—Å–æ–≤
**/open_case** ID_–∫–µ–π—Å–∞ - –ö—É–ø–∏—Ç—å –∏ –æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å
**/openmycase** ID_–∫–µ–π—Å–∞ - –û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
**/giftcase** @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID_–∫–µ–π—Å–∞ - –ü–æ–¥–∞—Ä–∏—Ç—å –∫–µ–π—Å""",
        inline=False
    )
    
    # –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å
    embed.add_field(
        name="üè™ –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å",
        value="""**/market** list - –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
**/market** sell –Ω–∞–∑–≤–∞–Ω–∏–µ_–ø—Ä–µ–¥–º–µ—Ç–∞ —Ü–µ–Ω–∞ - –ü—Ä–æ–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç
**/market** buy ID_—Ç–æ–≤–∞—Ä–∞ - –ö—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä (–±–∞—Ñ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è)""",
        inline=False
    )
    
    # –ú–∏–Ω–∏-–∏–≥—Ä—ã
    embed.add_field(
        name="üéÆ –ú–∏–Ω–∏-–∏–≥—Ä—ã",
        value="""**/roulette** —Å—Ç–∞–≤–∫–∞ - –ò–≥—Ä–∞ –≤ —Ä—É–ª–µ—Ç–∫—É (—É—á–∏—Ç—ã–≤–∞–µ—Ç –±–∞—Ñ—ã)
**/slots** —Å—Ç–∞–≤–∫–∞ - –ò–≥—Ä–æ–≤—ã–µ –∞–≤—Ç–æ–º–∞—Ç—ã (—É—á–∏—Ç—ã–≤–∞–µ—Ç –±–∞—Ñ—ã)
**/blackjack** —Å—Ç–∞–≤–∫–∞ - –ò–≥—Ä–∞ –≤ –±–ª—ç–∫–¥–∂–µ–∫ (—É—á–∏—Ç—ã–≤–∞–µ—Ç –±–∞—Ñ—ã)
**/coinflip** —Å—Ç–∞–≤–∫–∞ - –ü–æ–¥–±—Ä–∞—Å—ã–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã (50/50, —É—á–∏—Ç—ã–≤–∞–µ—Ç –±–∞—Ñ—ã)
**/duel** @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞–≤–∫–∞ - –î—É—ç–ª—å —Å –∏–≥—Ä–æ–∫–æ–º (—É—á–∏—Ç—ã–≤–∞–µ—Ç –±–∞—Ñ—ã)
**/quest** - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∫–≤–µ—Å—Ç (–ö–î 3 —á–∞—Å–∞)
**/steal** @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è —É–∫—Ä–∞—Å—Ç—å –º–æ–Ω–µ—Ç—ã (—É—á–∏—Ç—ã–≤–∞–µ—Ç –±–∞—Ñ—ã, –ö–î 30 –º–∏–Ω)""",
        inline=False
    )
    
    # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥—ã
    embed.add_field(
        name="üèÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥—ã",
        value="""**/leaderboard** balance - –õ–∏–¥–µ—Ä—ã –ø–æ –±–∞–ª–∞–Ω—Å—É
**/leaderboard** wins - –õ–∏–¥–µ—Ä—ã –ø–æ –ø–æ–±–µ–¥–∞–º
**/leaderboard** steals - –õ–∏–¥–µ—Ä—ã –ø–æ –∫—Ä–∞–∂–∞–º
**/leaderboard** cases - –õ–∏–¥–µ—Ä—ã –ø–æ –∫–µ–π—Å–∞–º
**/leaderboard** achievements - –õ–∏–¥–µ—Ä—ã –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º
**/leaderboard** items - –õ–∏–¥–µ—Ä—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º
**/achievements** - –í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è""",
        inline=False
    )
    
    # –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    if interaction.user.id in ADMIN_IDS:
        embed.add_field(
            name="‚öôÔ∏è –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã",
            value="""**/admin_addcoins** @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É–º–º–∞ - –î–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–µ—Ç—ã
**/admin_removecoins** @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É–º–º–∞ - –ó–∞–±—Ä–∞—Ç—å –º–æ–Ω–µ—Ç—ã
**/admin_giveitem** @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥–º–µ—Ç - –í—ã–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç
**/admin_createcase** –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–Ω–∞ JSON_–Ω–∞–≥—Ä–∞–¥ - –°–æ–∑–¥–∞—Ç—å –∫–µ–π—Å
**/admin_viewtransactions** [@–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] - –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π""",
            inline=False
        )
    
    embed.set_footer(text="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ / –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥")
    
    await interaction.response.send_message(embed=embed)

# –°–ò–°–¢–ï–ú–ê –ö–í–ï–°–¢–û–í –ò –ü–†–û–ì–†–ï–°–°–ê
@bot.tree.command(name="quests", description="–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã")
async def quests(interaction: discord.Interaction):
    try:
        user_quests = db.get_user_quests(interaction.user.id)
        
        embed = discord.Embed(title=f"{EMOJIS['quest']} –í–∞—à–∏ –∫–≤–µ—Å—Ç—ã", color=0x9b59b6)
        
        if not user_quests:
            embed.description = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/quest` —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π!"
            await interaction.response.send_message(embed=embed)
            return
        
        completed_quests = 0
        for quest_row in user_quests:
            quest_id, progress, completed = quest_row
            if quest_id in QUESTS:
                quest_data = QUESTS[quest_id]
                status = "‚úÖ" if completed else f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}%"
                embed.add_field(
                    name=f"{status} {quest_data['name']}",
                    value=f"{quest_data['description']}\n–ù–∞–≥—Ä–∞–¥–∞: {quest_data['reward']} {EMOJIS['coin']}",
                    inline=False
                )
                if completed:
                    completed_quests += 1
        
        embed.set_footer(text=f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed_quests}/{len(user_quests)}")
        await interaction.response.send_message(embed=embed)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ quests: {e}")
        await interaction.response.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–≤–µ—Å—Ç–æ–≤!", ephemeral=True)

# –ö–û–ú–ê–ù–î–ê –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ò –ë–ê–§–û–í
@bot.tree.command(name="buffs", description="–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–∞—Ñ—ã")
async def buffs(interaction: discord.Interaction):
    buffs = db.get_user_buffs(interaction.user.id)
    
    embed = discord.Embed(title="üéØ –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–∞—Ñ—ã", color=0x00ff00)
    
    if not buffs:
        embed.description = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞—Ñ–æ–≤. –ü—Ä–∏–æ–±—Ä–µ—Ç–∞–π—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ –∫–µ–π—Å–∞—Ö –∏–ª–∏ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ!"
        await interaction.response.send_message(embed=embed)
        return
    
    for buff_type, buff_info in buffs.items():
        embed.add_field(
            name=f"‚ú® {buff_info['item_name']}",
            value=f"**–≠—Ñ—Ñ–µ–∫—Ç:** {buff_info['description']}\n**–ú–Ω–æ–∂–∏—Ç–µ–ª—å:** x{buff_info['value']}",
            inline=False
        )
    
    embed.set_footer(text=f"–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞—Ñ–æ–≤: {len(buffs)}")
    await interaction.response.send_message(embed=embed)

# –ö–û–ú–ê–ù–î–ê –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –ü–ò–ù–ì–ê
@bot.tree.command(name="ping", description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∏–Ω–≥ –±–æ—Ç–∞")
async def ping(interaction: discord.Interaction):
    embed = discord.Embed(
        title="üèì –ü–æ–Ω–≥!",
        description=f"–ó–∞–¥–µ—Ä–∂–∫–∞ –±–æ—Ç–∞: {round(bot.latency * 1000)}–º—Å",
        color=0x00ff00
    )
    await interaction.response.send_message(embed=embed)

# –°–ò–°–¢–ï–ú–ê –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø –î–ê–ù–ù–´–•
@bot.tree.command(name="recover", description="–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã)")
async def recover_data(interaction: discord.Interaction):
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    user_data = db.get_user(interaction.user.id)
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –µ—Å–ª–∏ –æ–Ω –ø–æ–≤—Ä–µ–∂–¥–µ–Ω
    inventory = db.get_user_inventory(interaction.user.id)
    if not isinstance(inventory, dict):
        cursor = db.conn.cursor()
        cursor.execute('UPDATE users SET inventory = %s WHERE user_id = %s', 
                      (json.dumps({"cases": {}, "items": {}}), interaction.user.id))
        db.conn.commit()
    
    embed = discord.Embed(
        title="üîß –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö",
        description="–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏!",
        color=0x00ff00
    )
    embed.add_field(name="–ë–∞–ª–∞–Ω—Å", value=f"{user_data[1]} {EMOJIS['coin']}", inline=True)
    embed.add_field(name="–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–µ—Ä–∏—è", value=f"{user_data[2]} –¥–Ω–µ–π", inline=True)
    
    await interaction.response.send_message(embed=embed)

# AUT–ûCOMPLETE –î–õ–Ø –ü–†–ï–î–ú–ï–¢–û–í –í –ú–ê–†–ö–ï–¢–ï
@market.autocomplete('item_name')
async def market_item_autocomplete(interaction: discord.Interaction, current: str) -> list[app_commands.Choice[str]]:
    try:
        inventory = db.get_user_inventory_safe(interaction.user.id)
        items = inventory.get("items", {})
        item_choices = []
        
        for item_id, count in items.items():
            try:
                item_name = db.get_item_name_by_id(item_id)
                if current.lower() in item_name.lower():
                    item_choices.append(
                        app_commands.Choice(
                            name=f"{item_name} (x{count})",
                            value=item_name
                        )
                    )
            except Exception as e:
                continue
        
        return item_choices[:25]  # Discord –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–æ 25ÈÄâÈ°π
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ autocomplete: {e}")
        return []

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
try:
    db = Database()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–µ–π—Å—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è
    test_cases = db.get_cases()
    print(f"üîç –¢–µ—Å—Ç: –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(test_cases)} –∫–µ–π—Å–æ–≤ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
    
except Exception as e:
    print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    traceback.print_exc()
    exit(1)

# –ó–ê–ü–£–°–ö –ë–û–¢–ê
if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ –±–æ—Ç–∞...")
    print(f"üîë –¢–æ–∫–µ–Ω: {'‚úÖ –ù–∞–π–¥–µ–Ω' if BOT_TOKEN else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
    print(f"üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞' if DATABASE_URL else '‚ùå –û—à–∏–±–∫–∞'}")
    print(f"üëë –ê–¥–º–∏–Ω—ã: {len(ADMIN_IDS)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("=" * 50)
    
    try:
        bot.run(BOT_TOKEN)
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        traceback.print_exc()



