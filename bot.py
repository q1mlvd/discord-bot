import discord
from discord.ext import commands, tasks
import aiosqlite
import asyncio
from datetime import datetime, timedelta
import os
import random
from typing import Optional
from dotenv import load_dotenv
import yt_dlp
import math
import io
import json

# üîß –ö–û–ù–°–¢–ê–ù–¢–´
ADMIN_IDS = [1195144951546265675, 766767256742526996, 1078693283695448064, 1138140772097597472, 691904643181314078]
MODERATION_ROLES = [1167093102868172911, 1360243534946373672, 993043931342319636, 1338611327022923910, 1338609155203661915, 1365798715930968244, 1188261847850299514]
THREADS_CHANNEL_ID = 1422557295811887175
EVENTS_CHANNEL_ID = 1418738569081786459

# üõ°Ô∏è –î–ê–ù–ù–´–ï –î–õ–Ø –°–ò–°–¢–ï–ú
user_warns = {}
mute_data = {}
user_credits = {}
user_investments = {}
user_insurance = {}
user_lottery_tickets = {}
server_tax_pool = 0
user_mining_farms = {}
crypto_prices = {"BITCOIN": 50000, "ETHEREUM": 3000, "DOGECOIN": 0.15}
active_events = {}
user_reports = {}
user_crypto = {}
rob_cooldowns = {}

# üîß –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –ü–ï–†–ï–ú–ï–ù–ù–ê–Ø –î–õ–Ø –≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–ò–• –ë–ê–ù–û–í
economic_bans = {}

# üîß –§–£–ù–ö–¶–ò–ò –ü–†–û–í–ï–†–ö–ò –ü–†–ê–í
def is_admin():
    async def predicate(interaction: discord.Interaction):
        return interaction.user.id in ADMIN_IDS
    return commands.check(predicate)

def is_moderator():
    async def predicate(interaction: discord.Interaction):
        user_roles = [role.id for role in interaction.user.roles]
        return any(role_id in MODERATION_ROLES for role_id in user_roles)
    return commands.check(predicate)

# üîí –§–£–ù–ö–¶–ò–Ø –ü–†–û–í–ï–†–ö–ò –≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–û–ì–û –ë–ê–ù–ê
def check_economic_ban():
    async def predicate(interaction: discord.Interaction):
        ban_key = f"economic_ban_{interaction.user.id}"
        if ban_key in economic_bans:
            ban_info = economic_bans[ban_key]
            if datetime.now() < ban_info['end_time']:
                time_left = ban_info['end_time'] - datetime.now()
                hours_left = int(time_left.total_seconds() // 3600)
                await interaction.response.send_message(
                    f"üö´ –í–∞—à–∞ —ç–∫–æ–Ω–æ–º–∏–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É –∫—Ä–µ–¥–∏—Ç–∞!\n"
                    f"‚è≥ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —á–µ—Ä–µ–∑: {hours_left} —á–∞—Å–æ–≤\n"
                    f"üìã –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã: /—Ä–∞–±–æ—Ç–∞, /–µ–∂–µ–¥–Ω–µ–≤–Ω–æ, /–ø–µ—Ä–µ–¥–∞—Ç—å, /–æ–≥—Ä–∞–±–∏—Ç—å, /—Å–ª–æ—Ç—ã",
                    ephemeral=True
                )
                return False
            else:
                del economic_bans[ban_key]
        return True
    return commands.check(predicate)

load_dotenv()
TOKEN = os.getenv('DISCORD_BOT_TOKEN')

if not TOKEN:
    print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞–π .env —Ñ–∞–π–ª —Å DISCORD_BOT_TOKEN")
    exit(1)

# üé® –î–ò–ó–ê–ô–ù
class Design:
    COLORS = {
        "primary": 0x5865F2, "success": 0x57F287, "warning": 0xFEE75C, 
        "danger": 0xED4245, "economy": 0xF1C40F, "music": 0x9B59B6,
        "moderation": 0xE74C3C, "shop": 0x9B59B6, "casino": 0xE67E22,
        "info": 0x3498DB, "premium": 0xFFD700, "roblox": 0xE74C3C,
        "discord": 0x5865F2, "tds": 0xF1C40F, "crypto": 0x16C60C,
        "event": 0x9B59B6, "credit": 0xE74C3C, "nft": 0x9C27B0,
        "market": 0x4CAF50, "auction": 0xFF9800
    }

    @staticmethod
    def create_embed(title: str, description: str = "", color: str = "primary"):
        return discord.Embed(title=title, description=description, color=Design.COLORS.get(color, Design.COLORS["primary"]))

# üíæ –ë–ê–ó–ê –î–ê–ù–ù–´–•
class Database:
    def __init__(self):
        self.db_path = "data/bot.db"
        os.makedirs("data", exist_ok=True)
    
    async def init_db(self):
        async with aiosqlite.connect(self.db_path) as db:
            await db.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    balance INTEGER DEFAULT 1000,
                    level INTEGER DEFAULT 1,
                    xp INTEGER DEFAULT 0,
                    daily_claimed TEXT,
                    work_cooldown TEXT
                )
            ''')
            
            # NFT —Ç–∞–±–ª–∏—Ü—ã
            await db.execute('''
                CREATE TABLE IF NOT EXISTS nft_items (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT NOT NULL,
                    description TEXT,
                    rarity TEXT NOT NULL,
                    item_type TEXT NOT NULL,
                    image_data TEXT,
                    created_at TEXT,
                    creator_id INTEGER,
                    metadata TEXT
                )
            ''')
            
            await db.execute('''
                CREATE TABLE IF NOT EXISTS user_nft (
                    user_id INTEGER,
                    nft_id INTEGER,
                    acquired_at TEXT,
                    PRIMARY KEY (user_id, nft_id)
                )
            ''')
            
            await db.execute('''
                CREATE TABLE IF NOT EXISTS nft_market (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    nft_id INTEGER,
                    seller_id INTEGER,
                    price INTEGER NOT NULL,
                    listed_at TEXT,
                    status TEXT DEFAULT 'active'
                )
            ''')
            
            await db.commit()
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

# üí∞ –≠–ö–û–ù–û–ú–ò–ö–ê
class EconomySystem:
    def __init__(self, db: Database):
        self.db = db

    async def get_balance(self, user_id: int):
        async with aiosqlite.connect(self.db.db_path) as db:
            async with db.execute('SELECT balance FROM users WHERE user_id = ?', (user_id,)) as cursor:
                result = await cursor.fetchone()
                if result:
                    return result[0]
                else:
                    await db.execute('INSERT INTO users (user_id, balance) VALUES (?, 1000)', (user_id,))
                    await db.commit()
                    return 1000
    
    async def update_balance(self, user_id: int, amount: int):
        async with aiosqlite.connect(self.db.db_path) as db:
            await db.execute('INSERT OR IGNORE INTO users (user_id, balance) VALUES (?, 1000)', (user_id,))
            await db.execute('UPDATE users SET balance = balance + ? WHERE user_id = ?', (amount, user_id))
            await db.commit()
            return await self.get_balance(user_id)

# üé® –ü–†–û–°–¢–ê–Ø –°–ò–°–¢–ï–ú–ê NFT (—Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏")
class NFTSystem:
    def __init__(self, db: Database, economy: EconomySystem):
        self.db = db
        self.economy = economy
        self.rarity_colors = {
            "common": "üü¢",
            "rare": "üîµ", 
            "epic": "üü£",
            "legendary": "üü°"
        }
        self.item_types = ["Art", "Collectible", "Game Item", "Music", "Domain", "Meme"]
        
    async def create_nft(self, name: str, description: str, rarity: str, item_type: str, creator_id: int) -> dict:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π NFT"""
        try:
            async with aiosqlite.connect(self.db.db_path) as db:
                created_at = datetime.now().isoformat()
                
                # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
                image_data = self._generate_text_image(name, rarity, item_type)
                
                metadata = json.dumps({
                    "created": created_at,
                    "attributes": {
                        "rarity": rarity,
                        "type": item_type,
                        "generation": "1.0"
                    }
                })
                
                await db.execute(
                    'INSERT INTO nft_items (name, description, rarity, item_type, image_data, created_at, creator_id, metadata) VALUES (?, ?, ?, ?, ?, ?, ?, ?)',
                    (name, description, rarity, item_type, image_data, created_at, creator_id, metadata)
                )
                
                nft_id = db.last_insert_rowid
                
                # –î–æ–±–∞–≤–ª—è–µ–º NFT —Å–æ–∑–¥–∞—Ç–µ–ª—é
                await db.execute(
                    'INSERT INTO user_nft (user_id, nft_id, acquired_at) VALUES (?, ?, ?)',
                    (creator_id, nft_id, created_at)
                )
                
                await db.commit()
                
                return {
                    "success": True,
                    "nft_id": nft_id,
                    "name": name,
                    "rarity": rarity,
                    "image_data": image_data
                }
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è NFT: {e}")
            return {"success": False, "error": str(e)}
    
    def _generate_text_image(self, name: str, rarity: str, item_type: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ NFT"""
        color = self.rarity_colors.get(rarity, "‚ö™")
        return f"""
{color} {name.upper()} {color}
üìä –†–µ–¥–∫–æ—Å—Ç—å: {rarity.upper()}
üé® –¢–∏–ø: {item_type}
‚ú® –£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –∞–∫—Ç–∏–≤
        """.strip()
    
    async def get_nft(self, nft_id: int) -> Optional[dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ NFT"""
        try:
            async with aiosqlite.connect(self.db.db_path) as db:
                async with db.execute('SELECT * FROM nft_items WHERE id = ?', (nft_id,)) as cursor:
                    result = await cursor.fetchone()
                    if result:
                        return {
                            "id": result[0], "name": result[1], "description": result[2],
                            "rarity": result[3], "item_type": result[4], "image_data": result[5],
                            "created_at": result[6], "creator_id": result[7], "metadata": result[8]
                        }
            return None
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è NFT: {e}")
            return None
    
    async def get_user_nfts(self, user_id: int) -> list:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ NFT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with aiosqlite.connect(self.db.db_path) as db:
                async with db.execute('''
                    SELECT ni.*, un.acquired_at 
                    FROM nft_items ni 
                    JOIN user_nft un ON ni.id = un.nft_id 
                    WHERE un.user_id = ?
                ''', (user_id,)) as cursor:
                    results = await cursor.fetchall()
                    nfts = []
                    for result in results:
                        nfts.append({
                            "id": result[0], "name": result[1], "description": result[2],
                            "rarity": result[3], "item_type": result[4], "image_data": result[5],
                            "created_at": result[6], "creator_id": result[7], "metadata": result[8],
                            "acquired_at": result[9]
                        })
                    return nfts
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è NFT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return []
    
    async def transfer_nft(self, nft_id: int, from_user_id: int, to_user_id: int) -> bool:
        """–ü–µ—Ä–µ–¥–∞–µ—Ç NFT –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            async with aiosqlite.connect(self.db.db_path) as db:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–Ω–∏–µ
                async with db.execute(
                    'SELECT * FROM user_nft WHERE user_id = ? AND nft_id = ?',
                    (from_user_id, nft_id)
                ) as cursor:
                    if not await cursor.fetchone():
                        return False
                
                # –ü–µ—Ä–µ–¥–∞–µ–º NFT
                await db.execute(
                    'DELETE FROM user_nft WHERE user_id = ? AND nft_id = ?',
                    (from_user_id, nft_id)
                )
                
                await db.execute(
                    'INSERT INTO user_nft (user_id, nft_id, acquired_at) VALUES (?, ?, ?)',
                    (to_user_id, nft_id, datetime.now().isoformat())
                )
                
                await db.commit()
                return True
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ NFT: {e}")
            return False

# üõí –°–ò–°–¢–ï–ú–ê –ú–ê–†–ö–ï–¢–ü–õ–ï–ô–°–ê
class MarketplaceSystem:
    def __init__(self, db: Database, economy: EconomySystem, nft_system: NFTSystem):
        self.db = db
        self.economy = economy
        self.nft_system = nft_system
    
    async def list_nft(self, nft_id: int, seller_id: int, price: int) -> bool:
        """–í—ã—Å—Ç–∞–≤–ª—è–µ—Ç NFT –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å"""
        try:
            async with aiosqlite.connect(self.db.db_path) as db:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–Ω–∏–µ
                nfts = await self.nft_system.get_user_nfts(seller_id)
                if not any(nft['id'] == nft_id for nft in nfts):
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ NFT
                async with db.execute(
                    'SELECT * FROM nft_market WHERE nft_id = ? AND status = "active"',
                    (nft_id,)
                ) as cursor:
                    if await cursor.fetchone():
                        return False
                
                # –í—ã—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞ –º–∞—Ä–∫–µ—Ç
                await db.execute(
                    'INSERT INTO nft_market (nft_id, seller_id, price, listed_at) VALUES (?, ?, ?, ?)',
                    (nft_id, seller_id, price, datetime.now().isoformat())
                )
                
                await db.commit()
                return True
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è NFT: {e}")
            return False
    
    async def buy_nft(self, listing_id: int, buyer_id: int) -> bool:
        """–ü–æ–∫—É–ø–∞–µ—Ç NFT —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞"""
        try:
            async with aiosqlite.connect(self.db.db_path) as db:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ listing
                async with db.execute('''
                    SELECT nm.*, ni.name, nm.seller_id as seller_id 
                    FROM nft_market nm 
                    JOIN nft_items ni ON nm.nft_id = ni.id 
                    WHERE nm.id = ? AND nm.status = "active"
                ''', (listing_id,)) as cursor:
                    result = await cursor.fetchone()
                    if not result:
                        return False
                
                price = result[3]
                seller_id = result[2]
                nft_id = result[1]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
                buyer_balance = await self.economy.get_balance(buyer_id)
                if buyer_balance < price:
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ–¥–∞–≤—Ü–æ–º
                if buyer_id == seller_id:
                    return False
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                await self.economy.update_balance(buyer_id, -price)
                await self.economy.update_balance(seller_id, price)
                
                # –ü–µ—Ä–µ–¥–∞–µ–º NFT
                await self.nft_system.transfer_nft(nft_id, seller_id, buyer_id)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å listing
                await db.execute(
                    'UPDATE nft_market SET status = "sold" WHERE id = ?',
                    (listing_id,)
                )
                
                await db.commit()
                return True
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ NFT: {e}")
            return False
    
    async def get_market_listings(self) -> list:
        """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ listings –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞"""
        try:
            async with aiosqlite.connect(self.db.db_path) as db:
                async with db.execute('''
                    SELECT nm.*, ni.name, ni.rarity, ni.item_type, ni.image_data
                    FROM nft_market nm
                    JOIN nft_items ni ON nm.nft_id = ni.id
                    WHERE nm.status = "active"
                    ORDER BY nm.listed_at DESC
                ''') as cursor:
                    results = await cursor.fetchall()
                    listings = []
                    for result in results:
                        listings.append({
                            "id": result[0], "nft_id": result[1], "seller_id": result[2],
                            "price": result[3], "listed_at": result[4], "status": result[5],
                            "name": result[6], "rarity": result[7], "item_type": result[8],
                            "image_data": result[9]
                        })
                    return listings
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è listings: {e}")
            return []

# üèóÔ∏è –ì–õ–ê–í–ù–´–ô –ë–û–¢
class MegaBot(commands.Bot):
    def __init__(self):
        intents = discord.Intents.all()
        super().__init__(command_prefix='!', intents=intents, help_command=None)
        
        self.db = Database()
        self.economy = EconomySystem(self.db)
        
        # NFT —Å–∏—Å—Ç–µ–º—ã
        self.nft_system = NFTSystem(self.db, self.economy)
        self.marketplace_system = MarketplaceSystem(self.db, self.economy, self.nft_system)
        
        self.start_time = datetime.now()
    
    async def setup_hook(self):
        await self.db.init_db()
        try:
            synced = await self.tree.sync()
            print(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(synced)} –∫–æ–º–∞–Ω–¥")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")

bot = MegaBot()

# üé® NFT –ö–û–ú–ê–ù–î–´
@bot.tree.command(name="—Å–æ–∑–¥–∞—Ç—å_nft", description="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π NFT")
async def —Å–æ–∑–¥–∞—Ç—å_nft(interaction: discord.Interaction, –Ω–∞–∑–≤–∞–Ω–∏–µ: str, –æ–ø–∏—Å–∞–Ω–∏–µ: str, —Ä–µ–¥–∫–æ—Å—Ç—å: str, —Ç–∏–ø: str):
    try:
        valid_rarities = ["common", "rare", "epic", "legendary"]
        valid_types = ["Art", "Collectible", "Game Item", "Music", "Domain", "Meme"]
        
        if —Ä–µ–¥–∫–æ—Å—Ç—å.lower() not in valid_rarities:
            await interaction.response.send_message(
                f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ä–µ–¥–∫–æ—Å—Ç—å! –î–æ—Å—Ç—É–ø–Ω–æ: {', '.join(valid_rarities)}", 
                ephemeral=True
            )
            return
        
        if —Ç–∏–ø not in valid_types:
            await interaction.response.send_message(
                f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø! –î–æ—Å—Ç—É–ø–Ω–æ: {', '.join(valid_types)}", 
                ephemeral=True
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º NFT
        result = await bot.nft_system.create_nft(
            –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ, —Ä–µ–¥–∫–æ—Å—Ç—å.lower(), —Ç–∏–ø, interaction.user.id
        )
        
        if result["success"]:
            embed = Design.create_embed(
                "üé® NFT –°–æ–∑–¥–∞–Ω!",
                f"```{result['image_data']}```\n"
                f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {–Ω–∞–∑–≤–∞–Ω–∏–µ}\n"
                f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {–æ–ø–∏—Å–∞–Ω–∏–µ}\n"
                f"**–†–µ–¥–∫–æ—Å—Ç—å:** {—Ä–µ–¥–∫–æ—Å—Ç—å}\n"
                f"**–¢–∏–ø:** {—Ç–∏–ø}\n"
                f"**ID:** #{result['nft_id']}",
                "nft"
            )
            await interaction.response.send_message(embed=embed)
        else:
            await interaction.response.send_message(
                f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è NFT: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}", 
                ephemeral=True
            )
            
    except Exception as e:
        await interaction.response.send_message(
            f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è NFT: {e}", 
            ephemeral=True
        )

@bot.tree.command(name="–º–æ–∏_nft", description="–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ NFT")
async def –º–æ–∏_nft(interaction: discord.Interaction):
    try:
        nfts = await bot.nft_system.get_user_nfts(interaction.user.id)
        
        if not nfts:
            embed = Design.create_embed("üé® –ú–æ–∏ NFT", "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç NFT", "nft")
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return
        
        embed = Design.create_embed(
            f"üé® –ö–æ–ª–ª–µ–∫—Ü–∏—è NFT ({len(nfts)} items)",
            f"**–í–ª–∞–¥–µ–ª–µ—Ü:** {interaction.user.mention}",
            "nft"
        )
        
        for nft in nfts[:5]:
            embed.add_field(
                name=f"#{nft['id']} - {nft['name']}",
                value=f"```{nft['image_data']}```\n**–†–µ–¥–∫–æ—Å—Ç—å:** {nft['rarity']}\n**–¢–∏–ø:** {nft['item_type']}",
                inline=False
            )
        
        if len(nfts) > 5:
            embed.set_footer(text=f"–ò –µ—â–µ {len(nfts) - 5} NFT...")
        
        await interaction.response.send_message(embed=embed)
        
    except Exception as e:
        await interaction.response.send_message(
            f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è NFT: {e}", 
            ephemeral=True
        )

@bot.tree.command(name="–º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å", description="–ü—Ä–æ—Å–º–æ—Ç—Ä –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ NFT")
async def –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å(interaction: discord.Interaction):
    try:
        listings = await bot.marketplace_system.get_market_listings()
        
        if not listings:
            embed = Design.create_embed("üõí –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å NFT", "–ù–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ –ø–æ–∫–∞ –Ω–µ—Ç NFT", "market")
            await interaction.response.send_message(embed=embed)
            return
        
        embed = Design.create_embed(
            "üõí –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å NFT",
            f"**–î–æ—Å—Ç—É–ø–Ω–æ NFT:** {len(listings)}",
            "market"
        )
        
        for listing in listings[:3]:
            embed.add_field(
                name=f"#{listing['nft_id']} - {listing['name']}",
                value=f"```{listing['image_data']}```\n**–¶–µ–Ω–∞:** {listing['price']} –º–æ–Ω–µ—Ç\n**–†–µ–¥–∫–æ—Å—Ç—å:** {listing['rarity']}\n**–¢–∏–ø:** {listing['item_type']}",
                inline=False
            )
        
        await interaction.response.send_message(embed=embed)
        
    except Exception as e:
        await interaction.response.send_message(
            f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞: {e}", 
            ephemeral=True
        )

@bot.tree.command(name="–≤—ã—Å—Ç–∞–≤–∏—Ç—å_–Ω–∞_–º–∞—Ä–∫–µ—Ç", description="–í—ã—Å—Ç–∞–≤–∏—Ç—å NFT –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å")
async def –≤—ã—Å—Ç–∞–≤–∏—Ç—å_–Ω–∞_–º–∞—Ä–∫–µ—Ç(interaction: discord.Interaction, nft_id: int, —Ü–µ–Ω–∞: int):
    try:
        if —Ü–µ–Ω–∞ <= 0:
            await interaction.response.send_message("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!", ephemeral=True)
            return
        
        success = await bot.marketplace_system.list_nft(nft_id, interaction.user.id, —Ü–µ–Ω–∞)
        
        if success:
            embed = Design.create_embed(
                "üõí NFT –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ!",
                f"**NFT ID:** #{nft_id}\n"
                f"**–¶–µ–Ω–∞:** {—Ü–µ–Ω–∞} –º–æ–Ω–µ—Ç\n"
                f"**–ü—Ä–æ–¥–∞–≤–µ—Ü:** {interaction.user.mention}",
                "market"
            )
            await interaction.response.send_message(embed=embed)
        else:
            await interaction.response.send_message(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—Å—Ç–∞–≤–∏—Ç—å NFT. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∏ –≤–ª–∞–¥–µ–Ω–∏–µ.", 
                ephemeral=True
            )
            
    except Exception as e:
        await interaction.response.send_message(
            f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è NFT: {e}", 
            ephemeral=True
        )

@bot.tree.command(name="–∫—É–ø–∏—Ç—å_nft", description="–ö—É–ø–∏—Ç—å NFT —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞")
async def –∫—É–ø–∏—Ç—å_nft(interaction: discord.Interaction, listing_id: int):
    try:
        success = await bot.marketplace_system.buy_nft(listing_id, interaction.user.id)
        
        if success:
            embed = Design.create_embed(
                "‚úÖ NFT –ö—É–ø–ª–µ–Ω!",
                f"**–ü–æ–∫—É–ø–∫–∞:** Listing #{listing_id}\n"
                f"**–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:** {interaction.user.mention}",
                "success"
            )
            await interaction.response.send_message(embed=embed)
        else:
            await interaction.response.send_message(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å NFT. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∏ –±–∞–ª–∞–Ω—Å.", 
                ephemeral=True
            )
            
    except Exception as e:
        await interaction.response.send_message(
            f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ NFT: {e}", 
            ephemeral=True
        )

@bot.tree.command(name="nft_–∏–Ω—Ñ–æ", description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º NFT")
async def nft_–∏–Ω—Ñ–æ(interaction: discord.Interaction, nft_id: int):
    try:
        nft = await bot.nft_system.get_nft(nft_id)
        
        if not nft:
            await interaction.response.send_message("‚ùå NFT –Ω–µ –Ω–∞–π–¥–µ–Ω!", ephemeral=True)
            return
        
        embed = Design.create_embed(
            f"üé® NFT #{nft_id} - {nft['name']}",
            f"```{nft['image_data']}```\n"
            f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {nft['description']}\n"
            f"**–†–µ–¥–∫–æ—Å—Ç—å:** {nft['rarity']}\n"
            f"**–¢–∏–ø:** {nft['item_type']}\n"
            f"**–°–æ–∑–¥–∞–Ω:** {datetime.fromisoformat(nft['created_at']).strftime('%d.%m.%Y')}",
            "nft"
        )
        
        await interaction.response.send_message(embed=embed)
            
    except Exception as e:
        await interaction.response.send_message(
            f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}", 
            ephemeral=True
        )

@bot.event
async def on_ready():
    print(f'‚úÖ –ë–æ—Ç {bot.user} –∑–∞–ø—É—â–µ–Ω!')
    print(f'üåê –°–µ—Ä–≤–µ—Ä–æ–≤: {len(bot.guilds)}')
    
    try:
        synced = await bot.tree.sync()
        print(f'‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(synced)} –∫–æ–º–∞–Ω–¥')
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}')

@bot.event
async def on_message(message):
    if message.author.bot:
        return
    
    if isinstance(message.channel, discord.TextChannel):
        async with aiosqlite.connect(bot.db.db_path) as db:
            await db.execute('INSERT OR IGNORE INTO users (user_id, balance) VALUES (?, 1000)', (message.author.id,))
            await db.commit()
    
    await bot.process_commands(message)

if __name__ == "__main__":
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å NFT –º–∞—Ä–∫–µ—Ç–æ–º...")
        bot.run(TOKEN)
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
