import os
import discord
from discord import app_commands
from discord.ext import commands, tasks
from discord.ui import Button, View, Select
import sqlite3
import json
import random
import asyncio
import datetime
import aiohttp
from typing import Dict, List, Optional

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway
BOT_TOKEN = os.environ.get('DISCORD_BOT_TOKEN')

if not BOT_TOKEN:
    print("–û—à–∏–±–∫–∞: DISCORD_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
intents = discord.Intents.all()
bot = commands.Bot(command_prefix='!', intents=intents, help_command=None)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DATABASE_FILE = 'economy.db'
LOG_CHANNEL_ID = 1422557295811887175

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞)
ADMIN_IDS = [766767256742526996, 1195144951546265675, 691904643181314078, 1078693283695448064, 1138140772097597472]

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
ADMIN_USER_ID = 1188261847850299514

# –≠–º–æ–¥–∑–∏ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
EMOJIS = {
    'coin': 'ü™ô',
    'daily': 'üìÖ',
    'case': 'üéÅ',
    'win': 'üéâ',
    'lose': 'üíÄ',
    'steal': 'ü¶π',
    'market': 'üè™',
    'quest': 'üó∫Ô∏è',
    'dice': 'üé≤',
    'duel': '‚öîÔ∏è',
    'admin': '‚öôÔ∏è'
}

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite
class Database:
    def __init__(self):
        self.conn = sqlite3.connect(DATABASE_FILE, check_same_thread=False)
        self.create_tables()
    
    def create_tables(self):
        cursor = self.conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                balance INTEGER DEFAULT 100,
                daily_streak INTEGER DEFAULT 0,
                last_daily TEXT,
                inventory TEXT DEFAULT '{}',
                created_at TEXT DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS transactions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                type TEXT,
                amount INTEGER,
                target_user_id INTEGER,
                description TEXT,
                timestamp TEXT DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∫–µ–π—Å–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS cases (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT,
                price INTEGER,
                rewards TEXT,
                created_at TEXT DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –º–∞—Ä–∫–µ—Ç–∞
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS market (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                seller_id INTEGER,
                item_name TEXT,
                price INTEGER,
                created_at TEXT DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS achievements (
                user_id INTEGER,
                achievement_id TEXT,
                unlocked_at TEXT DEFAULT CURRENT_TIMESTAMP,
                PRIMARY KEY (user_id, achievement_id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∫–≤–µ—Å—Ç–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS quests (
                user_id INTEGER,
                quest_id TEXT,
                progress INTEGER DEFAULT 0,
                completed INTEGER DEFAULT 0,
                last_quest TEXT,
                PRIMARY KEY (user_id, quest_id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥—É—ç–ª–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS duels (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                challenger_id INTEGER,
                target_id INTEGER,
                bet INTEGER,
                status TEXT DEFAULT 'pending',
                winner_id INTEGER,
                created_at TEXT DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS items (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT,
                description TEXT,
                value INTEGER,
                rarity TEXT,
                created_at TEXT DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        self.conn.commit()
        self.initialize_default_data()
    
    def initialize_default_data(self):
        cursor = self.conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–µ–π—Å—ã
        cursor.execute('SELECT COUNT(*) FROM cases')
        if cursor.fetchone()[0] == 0:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–µ–π—Å—ã –±–µ–∑ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ä–æ–ª–µ–π
            default_cases = [
                ('üì¶ –ú–∞–ª—ã–π –∫–µ–π—Å', 50, json.dumps([
                    {'type': 'coins', 'amount': [10, 40], 'chance': 0.7},
                    {'type': 'coins', 'amount': [41, 100], 'chance': 0.25},
                    {'type': 'coins', 'amount': [101, 300], 'chance': 0.05}
                ])),
                ('üì¶ –°—Ä–µ–¥–Ω–∏–π –∫–µ–π—Å', 150, json.dumps([
                    {'type': 'coins', 'amount': [50, 120], 'chance': 0.6},
                    {'type': 'coins', 'amount': [121, 300], 'chance': 0.3},
                    {'type': 'special_item', 'name': '–ú–∞–≥–∏—á–µ—Å–∫–∏–π —Å–≤–∏—Ç–æ–∫', 'chance': 0.05},
                    {'type': 'coins', 'amount': [301, 800], 'chance': 0.05}
                ])),
                ('üíé –ë–æ–ª—å—à–æ–π –∫–µ–π—Å', 500, json.dumps([
                    {'type': 'coins', 'amount': [200, 400], 'chance': 0.5},
                    {'type': 'coins', 'amount': [401, 1000], 'chance': 0.3},
                    {'type': 'special_item', 'name': '–ó–æ–ª–æ—Ç–æ–π –∫–ª—é—á', 'chance': 0.08},
                    {'type': 'bonus', 'multiplier': 1.5, 'duration': 24, 'chance': 0.07},
                    {'type': 'coins', 'amount': [1001, 2500], 'chance': 0.05}
                ])),
                ('üëë –≠–ª–∏—Ç–Ω—ã–π –∫–µ–π—Å', 1000, json.dumps([
                    {'type': 'coins', 'amount': [500, 1000], 'chance': 0.3},
                    {'type': 'coins', 'amount': [-300, -100], 'chance': 0.2},
                    {'type': 'special_item', 'name': '–î—Ä–µ–≤–Ω–∏–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç', 'chance': 0.15},
                    {'type': 'bonus', 'multiplier': 2.0, 'duration': 48, 'chance': 0.1},
                    {'type': 'coins', 'amount': [1001, 3000], 'chance': 0.15},
                    {'type': 'coins', 'amount': [3001, 6000], 'chance': 0.1}
                ])),
                ('üîÆ –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–µ–π—Å', 2000, json.dumps([
                    {'type': 'coins', 'amount': [800, 1500], 'chance': 0.3},
                    {'type': 'coins', 'amount': [-1000, -500], 'chance': 0.15},
                    {'type': 'special_item', 'name': '–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π –ø—Ä–µ–¥–º–µ—Ç', 'chance': 0.15},
                    {'type': 'bonus', 'multiplier': 3.0, 'duration': 72, 'chance': 0.07},
                    {'type': 'multiple', 'count': 3, 'chance': 0.05},
                    {'type': 'coins', 'amount': [1501, 3000], 'chance': 0.15},
                    {'type': 'coins', 'amount': [4001, 7000], 'chance': 0.13}
                ]))
            ]
            
            for case in default_cases:
                cursor.execute('INSERT INTO cases (name, price, rewards) VALUES (?, ?, ?)', case)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        cursor.execute('SELECT COUNT(*) FROM items')
        if cursor.fetchone()[0] == 0:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
            default_items = [
                ('–ó–æ–ª–æ—Ç–æ–π –∫–ª—é—á', '–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ—Å–æ–±—ã–µ –∫–µ–π—Å—ã', 500, 'rare'),
                ('–î—Ä–µ–≤–Ω–∏–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç', '–ú–æ—â–Ω—ã–π –º–∞–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–µ–¥–º–µ—Ç', 1000, 'epic'),
                ('–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π –ø—Ä–µ–¥–º–µ—Ç', '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç', 2000, 'legendary'),
                ('–ë–∏–ª–µ—Ç VIP', '–î–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ VIP –∑–æ–Ω–µ', 300, 'uncommon'),
                ('–ú–∞–≥–∏—á–µ—Å–∫–∏–π —Å–≤–∏—Ç–æ–∫', '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —É–¥–∞—á—É', 150, 'common'),
                ('–°—É–Ω–¥—É–∫ —Å —Å–æ–∫—Ä–æ–≤–∏—â–∞–º–∏', '–°–æ–¥–µ—Ä–∂–∏—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã', 800, 'rare'),
                ('–ó–∞—á–∞—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–º—É–ª–µ—Ç', '–î–∞–µ—Ç –∑–∞—â–∏—Ç—É –æ—Ç –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π', 600, 'uncommon')
            ]
            
            for item in default_items:
                cursor.execute('INSERT INTO items (name, description, value, rarity) VALUES (?, ?, ?, ?)', item)
        
        self.conn.commit()

    def get_user(self, user_id):
        cursor = self.conn.cursor()
        cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
        user = cursor.fetchone()
        if not user:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º JSON –¥–ª—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
            cursor.execute('INSERT INTO users (user_id, balance, inventory) VALUES (?, ?, ?)', 
                         (user_id, 100, json.dumps({"cases": {}, "items": {}})))
            self.conn.commit()
            return self.get_user(user_id)
        return user
    
    def update_balance(self, user_id, amount):
        cursor = self.conn.cursor()
        cursor.execute('UPDATE users SET balance = balance + ? WHERE user_id = ?', (amount, user_id))
        self.conn.commit()
    
    def log_transaction(self, user_id, transaction_type, amount, target_user_id=None, description=""):
        cursor = self.conn.cursor()
        cursor.execute('''
            INSERT INTO transactions (user_id, type, amount, target_user_id, description)
            VALUES (?, ?, ?, ?, ?)
        ''', (user_id, transaction_type, amount, target_user_id, description))
        self.conn.commit()
    
    def get_cases(self):
        cursor = self.conn.cursor()
        cursor.execute('SELECT * FROM cases')
        return cursor.fetchall()
    
    def get_case(self, case_id):
        cursor = self.conn.cursor()
        cursor.execute('SELECT * FROM cases WHERE id = ?', (case_id,))
        return cursor.fetchone()
    
    def create_case(self, name, price, rewards):
        cursor = self.conn.cursor()
        cursor.execute('INSERT INTO cases (name, price, rewards) VALUES (?, ?, ?)', (name, price, json.dumps(rewards)))
        self.conn.commit()
        return cursor.lastrowid
    
    def update_case(self, case_id, name, price, rewards):
        cursor = self.conn.cursor()
        cursor.execute('UPDATE cases SET name = ?, price = ?, rewards = ? WHERE id = ?', 
                      (name, price, json.dumps(rewards), case_id))
        self.conn.commit()
    
    def delete_case(self, case_id):
        cursor = self.conn.cursor()
        cursor.execute('DELETE FROM cases WHERE id = ?', (case_id,))
        self.conn.commit()
    
    def get_items(self):
        cursor = self.conn.cursor()
        cursor.execute('SELECT * FROM items')
        return cursor.fetchall()
    
    def get_item(self, item_id):
        cursor = self.conn.cursor()
        cursor.execute('SELECT * FROM items WHERE id = ?', (item_id,))
        return cursor.fetchone()
    
    def add_item_to_inventory(self, user_id, item_name):
        cursor = self.conn.cursor()
        cursor.execute('SELECT inventory FROM users WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
        
        if result and result[0]:
            inventory = json.loads(result[0])
        else:
            inventory = {"cases": {}, "items": {}}
            
        if "items" not in inventory:
            inventory["items"] = {}
            
        if item_name in inventory["items"]:
            inventory["items"][item_name] += 1
        else:
            inventory["items"][item_name] = 1
        
        cursor.execute('UPDATE users SET inventory = ? WHERE user_id = ?', (json.dumps(inventory), user_id))
        self.conn.commit()
    
    def remove_item_from_inventory(self, user_id, item_name):
        cursor = self.conn.cursor()
        cursor.execute('SELECT inventory FROM users WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
        
        if not result or not result[0]:
            return False
            
        inventory = json.loads(result[0])
        
        if item_name in inventory.get("items", {}):
            if inventory["items"][item_name] > 1:
                inventory["items"][item_name] -= 1
            else:
                del inventory["items"][item_name]
            
            cursor.execute('UPDATE users SET inventory = ? WHERE user_id = ?', (json.dumps(inventory), user_id))
            self.conn.commit()
            return True
        return False

    def add_case_to_inventory(self, user_id, case_id, case_name, source="gifted"):
        cursor = self.conn.cursor()
        cursor.execute('SELECT inventory FROM users WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
        
        if result and result[0]:
            inventory = json.loads(result[0])
        else:
            inventory = {"cases": {}, "items": {}}
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–µ–π—Å –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        if "cases" not in inventory:
            inventory["cases"] = {}
        
        case_key = f"case_{case_id}"
        if case_key in inventory["cases"]:
            inventory["cases"][case_key]["count"] += 1
        else:
            inventory["cases"][case_key] = {
                "name": case_name,
                "count": 1,
                "source": source
            }
        
        cursor.execute('UPDATE users SET inventory = ? WHERE user_id = ?', (json.dumps(inventory), user_id))
        self.conn.commit()
    
    def get_user_inventory(self, user_id):
        cursor = self.conn.cursor()
        cursor.execute('SELECT inventory FROM users WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
        
        if result and result[0]:
            try:
                return json.loads(result[0])
            except json.JSONDecodeError:
                return {"cases": {}, "items": {}}
        return {"cases": {}, "items": {}}
    
    def remove_case_from_inventory(self, user_id, case_id):
        cursor = self.conn.cursor()
        cursor.execute('SELECT inventory FROM users WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
        
        if not result or not result[0]:
            return False
            
        inventory = json.loads(result[0])
        
        case_key = f"case_{case_id}"
        if case_key in inventory.get("cases", {}):
            if inventory["cases"][case_key]["count"] > 1:
                inventory["cases"][case_key]["count"] -= 1
            else:
                del inventory["cases"][case_key]
            
            cursor.execute('UPDATE users SET inventory = ? WHERE user_id = ?', (json.dumps(inventory), user_id))
            self.conn.commit()
            return True
        return False

db = Database()

# –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
ACHIEVEMENTS = {
    'first_daily': {'name': '–ü–µ—Ä–≤—ã–π —à–∞–≥', 'description': '–ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä–≤—É—é –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É'},
    'rich': {'name': '–ë–æ–≥–∞—á', 'description': '–ù–∞–∫–æ–ø–∏—Ç–µ 1000 –º–æ–Ω–µ—Ç'},
    'gambler': {'name': '–ê–∑–∞—Ä—Ç–Ω—ã–π –∏–≥—Ä–æ–∫', 'description': '–í—ã–∏–≥—Ä–∞–π—Ç–µ –≤ —Ä—É–ª–µ—Ç–∫—É 10 —Ä–∞–∑'},
    'thief': {'name': '–í–æ—Ä', 'description': '–£—Å–ø–µ—à–Ω–æ —É–∫—Ä–∞–¥–∏—Ç–µ –º–æ–Ω–µ—Ç—ã 5 —Ä–∞–∑'},
    'case_opener': {'name': '–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä', 'description': '–û—Ç–∫—Ä–æ–π—Ç–µ 20 –∫–µ–π—Å–æ–≤'},
    'duel_master': {'name': '–ú–∞—Å—Ç–µ—Ä –¥—É—ç–ª–µ–π', 'description': '–í—ã–∏–≥—Ä–∞–π—Ç–µ 10 –¥—É—ç–ª–µ–π'}
}

# –°–∏—Å—Ç–µ–º–∞ –∫–≤–µ—Å—Ç–æ–≤
QUESTS = {
    'daily_rich': {'name': '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–≥–∞—á', 'description': '–ü–æ–ª—É—á–∏—Ç–µ 3 –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –ø–æ–¥—Ä—è–¥', 'reward': 300},
    'gambling_king': {'name': '–ö–æ—Ä–æ–ª—å –∞–∑–∞—Ä—Ç–∞', 'description': '–í—ã–∏–≥—Ä–∞–π—Ç–µ 5000 –º–æ–Ω–µ—Ç –≤ –∞–∑–∞—Ä—Ç–Ω—ã—Ö –∏–≥—Ä–∞—Ö', 'reward': 1000},
    'case_hunter': {'name': '–û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ –∫–µ–π—Å–∞–º–∏', 'description': '–û—Ç–∫—Ä–æ–π—Ç–µ 5 –∫–µ–π—Å–æ–≤ –ª—é–±–æ–≥–æ —Ç–∏–ø–∞', 'reward': 500}
}

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞–≥—Ä–∞–¥–∞–º–∏
def get_reward(case):
    rand = random.random()
    cumulative = 0
    for reward in case['rewards']:
        cumulative += reward['chance']
        if rand <= cumulative:
            return reward
    return case['rewards'][-1]

async def create_custom_role_webhook(user):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–æ–≤
        channel = bot.get_channel(LOG_CHANNEL_ID)
        if channel:
            # –°–æ–∑–¥–∞–µ–º –≤–µ–±—Ö—É–∫
            webhook = await channel.create_webhook(name=f"Role-{user.name}")
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∏–Ω–≥–æ–º
            message = f"üéâ <@{user.id}> –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤–∞–º –≤—ã–ø–∞–ª–∞ –∫–∞—Å—Ç–æ–º —Ä–æ–ª—å –Ω–∞ 2 –¥–Ω—è, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä <@{ADMIN_USER_ID}> —Å–∫–æ—Ä–æ –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç –∏ –≤—ã –≤—ã–±–µ—Ä–µ—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫
            await webhook.send(
                content=message,
                username="Case System",
                avatar_url=bot.user.avatar.url if bot.user.avatar else None
            )
            
            # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            await webhook.delete()
            
            return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ–±—Ö—É–∫–∞ –¥–ª—è —Ä–æ–ª–∏: {e}")
    return False

async def process_reward(user, reward, case):
    if reward['type'] == 'coins':
        amount = random.randint(reward['amount'][0], reward['amount'][1])
        db.update_balance(user.id, amount)
        db.log_transaction(user.id, 'case_reward', amount, description=f"–ù–∞–≥—Ä–∞–¥–∞ –∏–∑ {case['name']}")
        return f"–ú–æ–Ω–µ—Ç—ã: {amount} {EMOJIS['coin']}"
    
    elif reward['type'] == 'custom_role':
        await create_custom_role_webhook(user)
        return "üé≠ –ö–∞—Å—Ç–æ–º–Ω–∞—è —Ä–æ–ª—å! (–°–æ–∑–¥–∞–Ω –∑–∞–ø—Ä–æ—Å –≤ –∫–∞–Ω–∞–ª–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏)"
    
    elif reward['type'] == 'special_item':
        db.add_item_to_inventory(user.id, reward['name'])
        return f"üì¶ –û—Å–æ–±—ã–π –ø—Ä–µ–¥–º–µ—Ç: {reward['name']}"
    
    elif reward['type'] == 'bonus':
        return f"üöÄ –ë–æ–Ω—É—Å x{reward['multiplier']} –Ω–∞ {reward['duration']}—á"
    
    elif reward['type'] == 'multiple':
        rewards = []
        for _ in range(reward['count']):
            sub_reward = get_reward(case)
            rewards.append(await process_reward(user, sub_reward, case))
        return " + ".join(rewards)
    
    elif reward['type'] == 'role':
        return f"üëë –†–æ–ª—å: {reward['name']} –Ω–∞ {reward['duration']}—á"
    
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞"

class CaseView(View):
    def __init__(self, case_id, user_id):
        super().__init__(timeout=60)
        self.case_id = case_id
        self.user_id = user_id
        self.opened = False
    
    @discord.ui.button(label='–û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å', style=discord.ButtonStyle.primary, emoji='üéÅ')
    async def open_case(self, interaction: discord.Interaction, button: Button):
        if self.opened:
            return
        
        if interaction.user.id != self.user_id:
            await interaction.response.send_message("–≠—Ç–æ—Ç –∫–µ–π—Å –Ω–µ –¥–ª—è –≤–∞—Å!", ephemeral=True)
            return
        
        self.opened = True
        case_data = db.get_case(self.case_id)
        if not case_data:
            await interaction.response.send_message("–ö–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!", ephemeral=True)
            return
        
        case = {
            'name': case_data[1],
            'price': case_data[2],
            'rewards': json.loads(case_data[3])
        }
        
        user_data = db.get_user(self.user_id)
        
        if user_data[1] < case['price']:
            await interaction.response.send_message("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!", ephemeral=True)
            return
        
        # –°–ø–∏–Ω –∞–Ω–∏–º–∞—Ü–∏—è
        embed = discord.Embed(title="üé∞ –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–∞...", color=0xffd700)
        await interaction.response.send_message(embed=embed)
        
        for i in range(3):
            await asyncio.sleep(1)
            embed.description = "üéÅ" * (i + 1)
            await interaction.edit_original_response(embed=embed)
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã
        reward = get_reward(case)
        db.update_balance(self.user_id, -case['price'])
        db.log_transaction(self.user_id, 'case_purchase', -case['price'], description=f"–ö–µ–π—Å: {case['name']}")
        
        # –í—ã–¥–∞—á–∞ –Ω–∞–≥—Ä–∞–¥—ã
        reward_text = await process_reward(interaction.user, reward, case)
        
        embed = discord.Embed(
            title=f"üéâ {case['name']} –æ—Ç–∫—Ä—ã—Ç!",
            description=reward_text,
            color=0x00ff00
        )
        embed.set_footer(text=f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {case['price']} {EMOJIS['coin']}")
        
        await interaction.edit_original_response(embed=embed)

# –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ö–õ–ê–°–° –î–£–≠–õ–ò –° 50/50 –®–ê–ù–°–û–ú
class DuelView(View):
    def __init__(self, challenger_id, target_id, bet):
        super().__init__(timeout=30)
        self.challenger_id = challenger_id
        self.target_id = target_id
        self.bet = bet
        self.accepted = False
    
    @discord.ui.button(label='–ü—Ä–∏–Ω—è—Ç—å –¥—É—ç–ª—å', style=discord.ButtonStyle.success, emoji='‚öîÔ∏è')
    async def accept_duel(self, interaction: discord.Interaction, button: Button):
        if interaction.user.id != self.target_id:
            await interaction.response.send_message("–≠—Ç–∞ –¥—É—ç–ª—å –Ω–µ –¥–ª—è –≤–∞—Å!", ephemeral=True)
            return
        
        if self.accepted:
            await interaction.response.send_message("–î—É—ç–ª—å —É–∂–µ –ø—Ä–∏–Ω—è—Ç–∞!", ephemeral=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        target_data = db.get_user(self.target_id)
        if target_data[1] < self.bet:
            await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –¥—É—ç–ª–∏!", ephemeral=True)
            return
        
        self.accepted = True
        
        # –°–Ω–∏–º–∞–µ–º —Å—Ç–∞–≤–∫–∏
        db.update_balance(self.challenger_id, -self.bet)
        db.update_balance(self.target_id, -self.bet)
        
        # –ê–Ω–∏–º–∞—Ü–∏—è –¥—É—ç–ª–∏
        embed = discord.Embed(
            title=f"{EMOJIS['duel']} –î—É—ç–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!",
            description="‚öîÔ∏è –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫–∏ –≥–æ—Ç–æ–≤—è—Ç—Å—è –∫ –±–æ—é...",
            color=0xff0000
        )
        await interaction.response.edit_message(embed=embed, view=None)
        
        # –ê–Ω–∏–º–∞—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
        for i in range(3, 0, -1):
            await asyncio.sleep(1)
            embed.description = f"‚öîÔ∏è –î—É—ç–ª—å –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ {i}..."
            await interaction.edit_original_response(embed=embed)
        
        await asyncio.sleep(1)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è - –Ω–∞—Å—Ç–æ—è—â–∏–π 50/50 —à–∞–Ω—Å
        winner_id = random.choice([self.challenger_id, self.target_id])
        loser_id = self.target_id if winner_id == self.challenger_id else self.challenger_id
        
        # –í—ã–¥–∞–µ–º –≤—ã–∏–≥—Ä—ã—à
        db.update_balance(winner_id, self.bet * 2)
        
        # –õ–æ–≥–∏—Ä—É–µ–º
        db.log_transaction(winner_id, 'duel_win', self.bet * 2, loser_id, "–ü–æ–±–µ–¥–∞ –≤ –¥—É—ç–ª–∏")
        db.log_transaction(loser_id, 'duel_loss', -self.bet, winner_id, "–ü—Ä–æ–∏–≥—Ä—ã—à –≤ –¥—É—ç–ª–∏")
        
        winner = bot.get_user(winner_id)
        loser = bot.get_user(loser_id)
        
        embed = discord.Embed(
            title=f"{EMOJIS['duel']} –†–µ–∑—É–ª—å—Ç–∞—Ç –¥—É—ç–ª–∏",
            description=f"**–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:** {winner.mention}\n**–ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π:** {loser.mention}",
            color=0x00ff00
        )
        embed.add_field(name="–í—ã–∏–≥—Ä—ã—à", value=f"{self.bet * 2} {EMOJIS['coin']}")
        embed.add_field(name="–®–∞–Ω—Å –ø–æ–±–µ–¥—ã", value="50/50")
        
        await interaction.edit_original_response(embed=embed)

# –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin():
    async def predicate(interaction: discord.Interaction) -> bool:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        is_admin = interaction.user.id in ADMIN_IDS
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not is_admin:
            await interaction.response.send_message(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!",
                ephemeral=True
            )
        return is_admin
    return app_commands.check(predicate)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥
@bot.tree.error
async def on_app_command_error(interaction: discord.Interaction, error: app_commands.AppCommandError):
    if isinstance(error, app_commands.CheckFailure):
        # –≠—Ç–∞ –æ—à–∏–±–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ is_admin
        return
    elif isinstance(error, app_commands.CommandNotFound):
        await interaction.response.send_message("‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", ephemeral=True)
    elif isinstance(error, app_commands.MissingPermissions):
        await interaction.response.send_message("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!", ephemeral=True)
    else:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error}")
        try:
            await interaction.response.send_message(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã!",
                ephemeral=True
            )
        except:
            # –ï—Å–ª–∏ —É–∂–µ –±—ã–ª –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º followup
            await interaction.followup.send(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã!",
                ephemeral=True
            )

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞

# –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
@bot.tree.command(name="balance", description="–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à –±–∞–ª–∞–Ω—Å")
@app_commands.describe(user="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —á–µ–π –±–∞–ª–∞–Ω—Å –ø–æ–∫–∞–∑–∞—Ç—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
async def balance(interaction: discord.Interaction, user: discord.Member = None):
    user = user or interaction.user
    user_data = db.get_user(user.id)
    
    embed = discord.Embed(
        title=f"{EMOJIS['coin']} –ë–∞–ª–∞–Ω—Å {user.display_name}",
        color=0xffd700
    )
    embed.add_field(name="–ë–∞–ª–∞–Ω—Å", value=f"{user_data[1]} {EMOJIS['coin']}", inline=True)
    embed.add_field(name="–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–µ—Ä–∏—è", value=f"{user_data[2]} –¥–Ω–µ–π", inline=True)
    
    if user.avatar:
        embed.set_thumbnail(url=user.avatar.url)
    elif user.default_avatar:
        embed.set_thumbnail(url=user.default_avatar.url)
    
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="daily", description="–ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É")
async def daily(interaction: discord.Interaction):
    user_data = db.get_user(interaction.user.id)
    last_daily = datetime.datetime.fromisoformat(user_data[3]) if user_data[3] else None
    now = datetime.datetime.now()
    
    if last_daily and (now - last_daily).days < 1:
        await interaction.response.send_message("–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É —Å–µ–≥–æ–¥–Ω—è!", ephemeral=True)
        return
    
    streak = user_data[2] + 1 if last_daily and (now - last_daily).days == 1 else 1
    reward = 100 + (streak * 10)
    
    db.update_balance(interaction.user.id, reward)
    cursor = db.conn.cursor()
    cursor.execute('UPDATE users SET daily_streak = ?, last_daily = ? WHERE user_id = ?', 
                   (streak, now.isoformat(), interaction.user.id))
    db.conn.commit()
    db.log_transaction(interaction.user.id, 'daily', reward)
    
    embed = discord.Embed(
        title=f"{EMOJIS['daily']} –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞",
        description=f"–ù–∞–≥—Ä–∞–¥–∞: {reward} {EMOJIS['coin']}\n–°–µ—Ä–∏—è: {streak} –¥–Ω–µ–π",
        color=0x00ff00
    )
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="pay", description="–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –º–æ–Ω–µ—Ç—ã –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
@app_commands.describe(user="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–º—É –ø–µ—Ä–µ–≤–æ–¥–∏–º", amount="–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞")
async def pay(interaction: discord.Interaction, user: discord.Member, amount: int):
    if amount <= 0:
        await interaction.response.send_message("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!", ephemeral=True)
        return
    
    if user.id == interaction.user.id:
        await interaction.response.send_message("–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µ!", ephemeral=True)
        return
    
    sender_data = db.get_user(interaction.user.id)
    if sender_data[1] < amount:
        await interaction.response.send_message("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!", ephemeral=True)
        return
    
    db.update_balance(interaction.user.id, -amount)
    db.update_balance(user.id, amount)
    db.log_transaction(interaction.user.id, 'transfer', -amount, user.id, f"–ü–µ—Ä–µ–≤–æ–¥ {user.name}")
    db.log_transaction(user.id, 'transfer', amount, interaction.user.id, f"–ü–æ–ª—É—á–µ–Ω–æ –æ—Ç {interaction.user.name}")
    
    embed = discord.Embed(
        title=f"{EMOJIS['coin']} –ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤",
        description=f"{interaction.user.mention} ‚Üí {user.mention}",
        color=0x00ff00
    )
    embed.add_field(name="–°—É–º–º–∞", value=f"{amount} {EMOJIS['coin']}")
    await interaction.response.send_message(embed=embed)

# –ö–æ–º–∞–Ω–¥—ã –∫–µ–π—Å–æ–≤
@bot.tree.command(name="cases", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–µ–π—Å–æ–≤")
async def cases_list(interaction: discord.Interaction):
    cases = db.get_cases()
    
    embed = discord.Embed(title="üéÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–µ–π—Å—ã", color=0xff69b4)
    
    for case in cases:
        rewards = json.loads(case[3])
        rewards_desc = "\n".join([f"‚Ä¢ {r['type']} ({r['chance']*100:.1f}%)" for r in rewards])
        embed.add_field(
            name=f"{case[1]} - {case[2]} {EMOJIS['coin']} (ID: {case[0]})",
            value=rewards_desc,
            inline=False
        )
    
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="opencase", description="–û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å")
@app_commands.describe(case_id="ID –∫–µ–π—Å–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è")
async def open_case(interaction: discord.Interaction, case_id: int):
    case_data = db.get_case(case_id)
    if not case_data:
        await interaction.response.send_message("–ö–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cases –¥–ª—è —Å–ø–∏—Å–∫–∞.", ephemeral=True)
        return
    
    view = CaseView(case_id, interaction.user.id)
    
    embed = discord.Embed(
        title=f"üéÅ {case_data[1]}",
        description=f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {case_data[2]} {EMOJIS['coin']}",
        color=0xff69b4
    )
    
    await interaction.response.send_message(embed=embed, view=view)

@bot.tree.command(name="giftcase", description="–ü–æ–¥–∞—Ä–∏—Ç—å –∫–µ–π—Å –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
@app_commands.describe(user="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–º—É –¥–∞—Ä–∏–º –∫–µ–π—Å", case_id="ID –∫–µ–π—Å–∞")
async def giftcase(interaction: discord.Interaction, user: discord.Member, case_id: int):
    if user.id == interaction.user.id:
        await interaction.response.send_message("–ù–µ–ª—å–∑—è –¥–∞—Ä–∏—Ç—å –∫–µ–π—Å —Å–∞–º–æ–º—É —Å–µ–±–µ!", ephemeral=True)
        return
    
    case_data = db.get_case(case_id)
    if not case_data:
        await interaction.response.send_message("–ö–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!", ephemeral=True)
        return
    
    user_data = db.get_user(interaction.user.id)
    
    if user_data[1] < case_data[2]:
        await interaction.response.send_message("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!", ephemeral=True)
        return
    
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ
    db.get_user(user.id)
    
    # –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–µ–π—Å–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    db.update_balance(interaction.user.id, -case_data[2])
    db.add_case_to_inventory(user.id, case_id, case_data[1], "gifted")
    db.log_transaction(interaction.user.id, 'gift_case', -case_data[2], user.id, f"–ü–æ–¥–∞—Ä–æ–∫: {case_data[1]}")
    
    embed = discord.Embed(
        title="üéÅ –ö–µ–π—Å –≤ –ø–æ–¥–∞—Ä–æ–∫!",
        description=f"{interaction.user.mention} –ø–æ–¥–∞—Ä–∏–ª {case_data[1]} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.mention}!",
        color=0xff69b4
    )
    embed.add_field(name="üíº –ü–æ–ª—É—á–∞—Ç–µ–ª—å", value=f"–ö–µ–π—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å {user.mention}")
    embed.add_field(name="üì¶ –ö–µ–π—Å", value=f"{case_data[1]}")
    embed.add_field(name="üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å", value=f"{case_data[2]} {EMOJIS['coin']}")
    
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="inventory", description="–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å")
async def inventory(interaction: discord.Interaction):
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    db.get_user(interaction.user.id)
    
    inventory_data = db.get_user_inventory(interaction.user.id)
    
    embed = discord.Embed(
        title=f"üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å {interaction.user.display_name}",
        color=0x3498db
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–µ–π—Å—ã
    cases = inventory_data.get("cases", {})
    if cases:
        cases_text = ""
        for case_key, case_info in cases.items():
            case_id = case_key.replace("case_", "")
            cases_text += f"‚Ä¢ {case_info['name']} (ID: {case_id}) √ó{case_info['count']}\n"
        embed.add_field(name="üéÅ –ö–µ–π—Å—ã", value=cases_text, inline=False)
    else:
        embed.add_field(name="üéÅ –ö–µ–π—Å—ã", value="–ü—É—Å—Ç–æ", inline=False)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã
    items = inventory_data.get("items", {})
    if items:
        items_text = ""
        for item_name, count in items.items():
            items_text += f"‚Ä¢ {item_name} √ó{count}\n"
        embed.add_field(name="üì¶ –ü—Ä–µ–¥–º–µ—Ç—ã", value=items_text, inline=False)
    else:
        embed.add_field(name="üì¶ –ü—Ä–µ–¥–º–µ—Ç—ã", value="–ü—É—Å—Ç–æ", inline=False)
    
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="openmycase", description="–û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å –∏–∑ –≤–∞—à–µ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è")
@app_commands.describe(case_id="ID –∫–µ–π—Å–∞ –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è")
async def openmycase(interaction: discord.Interaction, case_id: int):
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    db.get_user(interaction.user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–µ–π—Å –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
    inventory_data = db.get_user_inventory(interaction.user.id)
    case_key = f"case_{case_id}"
    
    if case_key not in inventory_data.get("cases", {}):
        await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –∫–µ–π—Å–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ!", ephemeral=True)
        return
    
    case_data = db.get_case(case_id)
    if not case_data:
        await interaction.response.send_message("–ö–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!", ephemeral=True)
        return
    
    # –£–±–∏—Ä–∞–µ–º –∫–µ–π—Å –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    db.remove_case_from_inventory(interaction.user.id, case_id)
    
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–µ–π—Å
    case = {
        'name': case_data[1],
        'price': case_data[2],
        'rewards': json.loads(case_data[3])
    }
    
    # –°–ø–∏–Ω –∞–Ω–∏–º–∞—Ü–∏—è
    embed = discord.Embed(title="üé∞ –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–∞...", color=0xffd700)
    await interaction.response.send_message(embed=embed)
    
    for i in range(3):
        await asyncio.sleep(1)
        embed.description = "üéÅ" * (i + 1)
        await interaction.edit_original_response(embed=embed)
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã
    reward = get_reward(case)
    reward_text = await process_reward(interaction.user, reward, case)
    
    embed = discord.Embed(
        title=f"üéâ {case['name']} –æ—Ç–∫—Ä—ã—Ç!",
        description=reward_text,
        color=0x00ff00
    )
    embed.set_footer(text="–ö–µ–π—Å –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è")
    
    await interaction.edit_original_response(embed=embed)

# –ö–æ–º–∞–Ω–¥—ã –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
@bot.tree.command(name="market", description="–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–º")
@app_commands.describe(action="–î–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ")
@app_commands.choices(action=[
    app_commands.Choice(name="üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤", value="list"),
    app_commands.Choice(name="üí∞ –ü—Ä–æ–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç", value="sell"),
    app_commands.Choice(name="üõí –ö—É–ø–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç", value="buy")
])
async def market(interaction: discord.Interaction, action: app_commands.Choice[str], item_name: str = None, price: int = None):
    if action.value == "list":
        cursor = db.conn.cursor()
        cursor.execute('SELECT * FROM market LIMIT 10')
        items = cursor.fetchall()
        
        embed = discord.Embed(title="üè™ –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å", color=0x00ff00)
        
        for item in items:
            seller = bot.get_user(item[1])
            embed.add_field(
                name=f"#{item[0]} {item[2]}",
                value=f"–¶–µ–Ω–∞: {item[3]} {EMOJIS['coin']}\n–ü—Ä–æ–¥–∞–≤–µ—Ü: {seller.name if seller else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}",
                inline=False
            )
        
        await interaction.response.send_message(embed=embed)
    
    elif action.value == "sell":
        if not item_name or not price:
            await interaction.response.send_message("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏ —Ü–µ–Ω—É!", ephemeral=True)
            return
        
        cursor = db.conn.cursor()
        cursor.execute('INSERT INTO market (seller_id, item_name, price) VALUES (?, ?, ?)', 
                      (interaction.user.id, item_name, price))
        db.conn.commit()
        
        embed = discord.Embed(
            title="üè™ –ü—Ä–µ–¥–º–µ—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–¥–∞–∂—É",
            description=f"–ü—Ä–µ–¥–º–µ—Ç: {item_name}\n–¶–µ–Ω–∞: {price} {EMOJIS['coin']}",
            color=0x00ff00
        )
        await interaction.response.send_message(embed=embed)
    
    elif action.value == "buy":
        if not item_name:
            await interaction.response.send_message("–£–∫–∞–∂–∏—Ç–µ ID –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏!", ephemeral=True)
            return
        
        cursor = db.conn.cursor()
        cursor.execute('SELECT * FROM market WHERE id = ?', (int(item_name),))
        item = cursor.fetchone()
        
        if not item:
            await interaction.response.send_message("–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!", ephemeral=True)
            return
        
        user_data = db.get_user(interaction.user.id)
        if user_data[1] < item[3]:
            await interaction.response.send_message("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!", ephemeral=True)
            return
        
        # –ü–æ–∫—É–ø–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
        db.update_balance(interaction.user.id, -item[3])
        db.update_balance(item[1], item[3])
        cursor.execute('DELETE FROM market WHERE id = ?', (int(item_name),))
        db.conn.commit()
        
        db.log_transaction(interaction.user.id, 'market_buy', -item[3], item[1], f"–ü–æ–∫—É–ø–∫–∞: {item[2]}")
        db.log_transaction(item[1], 'market_sell', item[3], interaction.user.id, f"–ü—Ä–æ–¥–∞–∂–∞: {item[2]}")
        
        embed = discord.Embed(
            title="üè™ –ü–æ–∫—É–ø–∫–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞!",
            description=f"–í—ã –∫—É–ø–∏–ª–∏ {item[2]} –∑–∞ {item[3]} {EMOJIS['coin']}",
            color=0x00ff00
        )
        await interaction.response.send_message(embed=embed)

# –ú–∏–Ω–∏-–∏–≥—Ä—ã
@bot.tree.command(name="roulette", description="–°—ã–≥—Ä–∞—Ç—å –≤ —Ä—É–ª–µ—Ç–∫—É")
@app_commands.describe(bet="–°—Ç–∞–≤–∫–∞ –≤ –º–æ–Ω–µ—Ç–∞—Ö")
async def roulette(interaction: discord.Interaction, bet: int):
    user_data = db.get_user(interaction.user.id)
    
    if user_data[1] < bet:
        await interaction.response.send_message("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!", ephemeral=True)
        return
    
    winning_number = random.randint(0, 36)
    user_number = random.randint(0, 36)
    
    if user_number == winning_number:
        multiplier = 35
        winnings = bet * multiplier
        db.update_balance(interaction.user.id, winnings)
        result = f"–ü–û–ë–ï–î–ê! x{multiplier}\n–í—ã–∏–≥—Ä—ã—à: {winnings} {EMOJIS['coin']}"
        color = 0x00ff00
    else:
        db.update_balance(interaction.user.id, -bet)
        result = f"–ü–†–û–ò–ì–†–´–®!\n–í—ã–ø–∞–ª–æ: {winning_number}, –í–∞—à–µ: {user_number}"
        color = 0xff0000
    
    embed = discord.Embed(
        title=f"üé∞ –†—É–ª–µ—Ç–∫–∞ - –°—Ç–∞–≤–∫–∞: {bet} {EMOJIS['coin']}",
        description=result,
        color=color
    )
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="dice", description="–ë—Ä–æ—Å–∏—Ç—å –∫–æ—Å—Ç–∏ –Ω–∞ —Å—Ç–∞–≤–∫—É")
@app_commands.describe(bet="–°—Ç–∞–≤–∫–∞ –≤ –º–æ–Ω–µ—Ç–∞—Ö")
async def dice(interaction: discord.Interaction, bet: int):
    user_data = db.get_user(interaction.user.id)
    
    if user_data[1] < bet:
        await interaction.response.send_message("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!", ephemeral=True)
        return
    
    user_roll = random.randint(1, 6)
    bot_roll = random.randint(1, 6)
    
    if user_roll > bot_roll:
        winnings = bet * 2
        db.update_balance(interaction.user.id, winnings)
        result = f"–ü–û–ë–ï–î–ê!\n–í–∞—à –±—Ä–æ—Å–æ–∫: {user_roll}\n–ë—Ä–æ—Å–æ–∫ –±–æ—Ç–∞: {bot_roll}\n–í—ã–∏–≥—Ä—ã—à: {winnings} {EMOJIS['coin']}"
        color = 0x00ff00
    elif user_roll < bot_roll:
        db.update_balance(interaction.user.id, -bet)
        result = f"–ü–†–û–ò–ì–†–´–®!\n–í–∞—à –±—Ä–æ—Å–æ–∫: {user_roll}\n–ë—Ä–æ—Å–æ–∫ –±–æ—Ç–∞: {bot_roll}"
        color = 0xff0000
    else:
        result = f"–ù–ò–ß–¨–Ø!\n–û–±–∞ –≤—ã–±—Ä–æ—Å–∏–ª–∏: {user_roll}"
        color = 0xffff00
    
    embed = discord.Embed(
        title=f"{EMOJIS['dice']} –ò–≥—Ä–∞ –≤ –∫–æ—Å—Ç–∏ - –°—Ç–∞–≤–∫–∞: {bet} {EMOJIS['coin']}",
        description=result,
        color=color
    )
    await interaction.response.send_message(embed=embed)

# –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –ö–û–ú–ê–ù–î–ê –î–£–≠–õ–ò –° 50/50 –®–ê–ù–°–û–ú
@bot.tree.command(name="duel", description="–í—ã–∑–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –¥—É—ç–ª—å")
@app_commands.describe(user="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –¥—É—ç–ª–∏", bet="–°—Ç–∞–≤–∫–∞ –≤ –º–æ–Ω–µ—Ç–∞—Ö")
async def duel(interaction: discord.Interaction, user: discord.Member, bet: int):
    if user.id == interaction.user.id:
        await interaction.response.send_message("–ù–µ–ª—å–∑—è –≤—ã–∑–≤–∞—Ç—å –Ω–∞ –¥—É—ç–ª—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!", ephemeral=True)
        return
    
    if bet <= 0:
        await interaction.response.send_message("–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!", ephemeral=True)
        return
    
    user_data = db.get_user(interaction.user.id)
    if user_data[1] < bet:
        await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –¥—É—ç–ª–∏!", ephemeral=True)
        return
    
    target_data = db.get_user(user.id)
    if target_data[1] < bet:
        await interaction.response.send_message(f"–£ {user.mention} –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –¥—É—ç–ª–∏!", ephemeral=True)
        return
    
    embed = discord.Embed(
        title=f"{EMOJIS['duel']} –í—ã–∑–æ–≤ –Ω–∞ –¥—É—ç–ª—å!",
        description=f"{interaction.user.mention} –≤—ã–∑—ã–≤–∞–µ—Ç {user.mention} –Ω–∞ –¥—É—ç–ª—å!",
        color=0xff0000
    )
    embed.add_field(name="–°—Ç–∞–≤–∫–∞", value=f"{bet} {EMOJIS['coin']}", inline=True)
    embed.add_field(name="–®–∞–Ω—Å –ø–æ–±–µ–¥—ã", value="50/50", inline=True)
    embed.add_field(name="–í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç", value="30 —Å–µ–∫—É–Ω–¥", inline=True)
    embed.set_footer(text="–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –∑–∞–±–∏—Ä–∞–µ—Ç –≤—Å—é —Å—Ç–∞–≤–∫—É!")
    
    view = DuelView(interaction.user.id, user.id, bet)
    await interaction.response.send_message(embed=embed, view=view)

# –ò–∑–º–µ–Ω–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /steal —Å —Ä–∞–Ω–¥–æ–º–Ω–æ–π —Å—É–º–º–æ–π
@bot.tree.command(name="steal", description="–ü–æ–ø—ã—Ç–∞—Ç—å—Å—è —É–∫—Ä–∞—Å—Ç—å –º–æ–Ω–µ—Ç—ã —É –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ö–î 30 –º–∏–Ω)")
@app_commands.describe(user="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –∫—Ä–∞–¥–µ–º")
@app_commands.checks.cooldown(1, 1800.0, key=lambda i: (i.guild_id, i.user.id))  # 30 –º–∏–Ω—É—Ç –∫–¥
async def steal(interaction: discord.Interaction, user: discord.Member):
    if user.id == interaction.user.id:
        await interaction.response.send_message("–ù–µ–ª—å–∑—è –∫—Ä–∞—Å—Ç—å —É —Å–µ–±—è!", ephemeral=True)
        return
    
    thief_data = db.get_user(interaction.user.id)
    target_data = db.get_user(user.id)
    
    if thief_data[1] < 10:
        await interaction.response.send_message("–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 10 –º–æ–Ω–µ—Ç –¥–ª—è –∫—Ä–∞–∂–∏!", ephemeral=True)
        return
    
    if target_data[1] < 10:
        await interaction.response.send_message("–£ —Ü–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –∫—Ä–∞–∂–∏!", ephemeral=True)
        return
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Å—É–º–º—É –¥–ª—è –∫—Ä–∞–∂–∏ (–æ—Ç 5% –¥–æ 20% –æ—Ç –±–∞–ª–∞–Ω—Å–∞ —Ü–µ–ª–∏, –Ω–æ –Ω–µ –±–æ–ª–µ–µ 1000)
    max_steal = min(int(target_data[1] * 0.2), 1000)
    min_steal = max(int(target_data[1] * 0.05), 10)
    
    if max_steal < min_steal:
        amount = min_steal
    else:
        amount = random.randint(min_steal, max_steal)
    
    success_chance = 0.3
    if random.random() <= success_chance:
        db.update_balance(interaction.user.id, amount)
        db.update_balance(user.id, -amount)
        db.log_transaction(interaction.user.id, 'steal', amount, user.id, "–£—Å–ø–µ—à–Ω–∞—è –∫—Ä–∞–∂–∞")
        
        embed = discord.Embed(
            title=f"{EMOJIS['steal']} –£—Å–ø–µ—à–Ω–∞—è –∫—Ä–∞–∂–∞!",
            description=f"{interaction.user.mention} —É–∫—Ä–∞–ª {amount} {EMOJIS['coin']} —É {user.mention}!",
            color=0x00ff00
        )
    else:
        penalty = min(amount // 2, 100)
        db.update_balance(interaction.user.id, -penalty)
        db.log_transaction(interaction.user.id, 'steal_fail', -penalty, user.id, "–ù–µ—É–¥–∞—á–Ω–∞—è –∫—Ä–∞–∂–∞")
        
        embed = discord.Embed(
            title=f"{EMOJIS['lose']} –ö—Ä–∞–∂–∞ –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å!",
            description=f"{interaction.user.mention} –æ—à—Ç—Ä–∞—Ñ–æ–≤–∞–Ω –Ω–∞ {penalty} {EMOJIS['coin']}!",
            color=0xff0000
        )
    
    await interaction.response.send_message(embed=embed)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–¥ –¥–ª—è /steal
@steal.error
async def steal_error(interaction: discord.Interaction, error: app_commands.AppCommandError):
    if isinstance(error, app_commands.CommandOnCooldown):
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
        minutes = int(error.retry_after // 60)
        seconds = int(error.retry_after % 60)
        
        await interaction.response.send_message(
            f"‚ùå –°–ª–µ–¥—É—é—â—É—é –∫—Ä–∞–∂—É –º–æ–∂–Ω–æ —Å–æ–≤–µ—Ä—à–∏—Ç—å —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç {seconds:02d} —Å–µ–∫—É–Ω–¥",
            ephemeral=True
        )
    else:
        raise error

# –ö–æ–º–∞–Ω–¥–∞ /quest —Å –∫–¥ 3 —á–∞—Å–∞
@bot.tree.command(name="quest", description="–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∫–≤–µ—Å—Ç")
@app_commands.checks.cooldown(1, 10800.0)  # 3 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
async def quest(interaction: discord.Interaction):
    quest_id, quest_data = random.choice(list(QUESTS.items()))
    
    embed = discord.Embed(
        title=f"{EMOJIS['quest']} –ù–æ–≤—ã–π –∫–≤–µ—Å—Ç!",
        description=quest_data['description'],
        color=0x00ff00
    )
    embed.add_field(name="–ù–∞–≥—Ä–∞–¥–∞", value=f"{quest_data['reward']} {EMOJIS['coin']}")
    
    await interaction.response.send_message(embed=embed)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–¥ –¥–ª—è /quest
@quest.error
async def quest_error(interaction: discord.Interaction, error: app_commands.AppCommandError):
    if isinstance(error, app_commands.CommandOnCooldown):
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
        hours = int(error.retry_after // 3600)
        minutes = int((error.retry_after % 3600) // 60)
        seconds = int(error.retry_after % 60)
        
        await interaction.response.send_message(
            f"‚ùå –°–ª–µ–¥—É—é—â–∏–π –∫–≤–µ—Å—Ç –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ {hours:02d}:{minutes:02d}:{seconds:02d}",
            ephemeral=True
        )
    else:
        raise error

# –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥—ã
@bot.tree.command(name="leaderboard", description="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤")
@app_commands.describe(type="–¢–∏–ø –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞")
@app_commands.choices(type=[
    app_commands.Choice(name="–ë–∞–ª–∞–Ω—Å", value="balance"),
    app_commands.Choice(name="–ü–æ–±–µ–¥—ã", value="wins"),
    app_commands.Choice(name="–ö—Ä–∞–∂–∏", value="steals")
])
async def leaderboard(interaction: discord.Interaction, type: app_commands.Choice[str]):
    cursor = db.conn.cursor()
    
    if type.value == 'balance':
        cursor.execute('SELECT user_id, balance FROM users ORDER BY balance DESC LIMIT 10')
        title = "üèÜ –õ–∏–¥–µ—Ä—ã –ø–æ –±–∞–ª–∞–Ω—Å—É"
        
        embed = discord.Embed(title=title, color=0xffd700)
        
        for i, (user_id, balance) in enumerate(cursor.fetchall(), 1):
            user = bot.get_user(user_id)
            name = user.name if user else f"User#{user_id}"
            embed.add_field(
                name=f"{i}. {name}",
                value=f"{balance} {EMOJIS['coin']}",
                inline=False
            )
    
    elif type.value == 'wins':
        cursor.execute('''
            SELECT user_id, COUNT(*) as wins FROM transactions 
            WHERE type IN ('roulette_win', 'dice_win', 'duel_win') 
            GROUP BY user_id ORDER BY wins DESC LIMIT 10
        ''')
        title = "üèÜ –õ–∏–¥–µ—Ä—ã –ø–æ –ø–æ–±–µ–¥–∞–º"
        
        embed = discord.Embed(title=title, color=0xffd700)
        
        for i, (user_id, wins) in enumerate(cursor.fetchall(), 1):
            user = bot.get_user(user_id)
            name = user.name if user else f"User#{user_id}"
            embed.add_field(
                name=f"{i}. {name}",
                value=f"{wins} –ø–æ–±–µ–¥",
                inline=False
            )
    
    elif type.value == 'steals':
        cursor.execute('''
            SELECT user_id, COUNT(*) as steals FROM transactions 
            WHERE type = 'steal' 
            GROUP BY user_id ORDER BY steals DESC LIMIT 10
        ''')
        title = "üèÜ –õ–∏–¥–µ—Ä—ã –ø–æ –∫—Ä–∞–∂–∞–º"
        
        embed = discord.Embed(title=title, color=0xffd700)
        
        for i, (user_id, steals) in enumerate(cursor.fetchall(), 1):
            user = bot.get_user(user_id)
            name = user.name if user else f"User#{user_id}"
            embed.add_field(
                name=f"{i}. {name}",
                value=f"{steals} –∫—Ä–∞–∂",
                inline=False
            )
    
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="achievements", description="–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è")
async def achievements(interaction: discord.Interaction):
    cursor = db.conn.cursor()
    cursor.execute('SELECT achievement_id FROM achievements WHERE user_id = ?', (interaction.user.id,))
    user_achievements = [row[0] for row in cursor.fetchall()]
    
    embed = discord.Embed(title="üèÖ –í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è", color=0xffd700)
    
    for achievement_id, achievement in ACHIEVEMENTS.items():
        status = "‚úÖ" if achievement_id in user_achievements else "‚ùå"
        embed.add_field(
            name=f"{status} {achievement['name']}",
            value=achievement['description'],
            inline=False
        )
    
    await interaction.response.send_message(embed=embed)

# –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã
@bot.tree.command(name="admin_addcoins", description="–î–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–∞–¥–º–∏–Ω)")
@app_commands.describe(user="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", amount="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç")
@is_admin()
async def admin_addcoins(interaction: discord.Interaction, user: discord.Member, amount: int):
    try:
        db.update_balance(user.id, amount)
        db.log_transaction(interaction.user.id, 'admin_add', amount, user.id, f"–ê–¥–º–∏–Ω {interaction.user.name}")
        
        embed = discord.Embed(
            title="‚öôÔ∏è –ê–¥–º–∏–Ω –¥–µ–π—Å—Ç–≤–∏–µ",
            description=f"–í—ã–¥–∞–Ω–æ {amount} {EMOJIS['coin']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.mention}",
            color=0x00ff00
        )
        await interaction.response.send_message(embed=embed)
    except Exception as e:
        await interaction.response.send_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}", ephemeral=True)

@bot.tree.command(name="admin_removecoins", description="–ó–∞–±—Ä–∞—Ç—å –º–æ–Ω–µ—Ç—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–º–∏–Ω)")
@app_commands.describe(user="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", amount="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç")
@is_admin()
async def admin_removecoins(interaction: discord.Interaction, user: discord.Member, amount: int):
    try:
        db.update_balance(user.id, -amount)
        db.log_transaction(interaction.user.id, 'admin_remove', -amount, user.id, f"–ê–¥–º–∏–Ω {interaction.user.name}")
        
        embed = discord.Embed(
            title="‚öôÔ∏è –ê–¥–º–∏–Ω –¥–µ–π—Å—Ç–≤–∏–µ",
            description=f"–ó–∞–±—Ä–∞–Ω–æ {amount} {EMOJIS['coin']} —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.mention}",
            color=0xff0000
        )
        await interaction.response.send_message(embed=embed)
    except Exception as e:
        await interaction.response.send_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}", ephemeral=True)

@bot.tree.command(name="admin_giveitem", description="–í—ã–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–∞–¥–º–∏–Ω)")
@app_commands.describe(user="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", item_name="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞")
@is_admin()
async def admin_giveitem(interaction: discord.Interaction, user: discord.Member, item_name: str):
    try:
        db.add_item_to_inventory(user.id, item_name)
        
        embed = discord.Embed(
            title="‚öôÔ∏è –ê–¥–º–∏–Ω –¥–µ–π—Å—Ç–≤–∏–µ",
            description=f"–ü—Ä–µ–¥–º–µ—Ç '{item_name}' –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.mention}",
            color=0x00ff00
        )
        await interaction.response.send_message(embed=embed)
    except Exception as e:
        await interaction.response.send_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}", ephemeral=True)

@bot.tree.command(name="admin_removeitem", description="–ó–∞–±—Ä–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–º–∏–Ω)")
@app_commands.describe(user="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", item_name="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞")
@is_admin()
async def admin_removeitem(interaction: discord.Interaction, user: discord.Member, item_name: str):
    try:
        success = db.remove_item_from_inventory(user.id, item_name)
        
        if success:
            embed = discord.Embed(
                title="‚öôÔ∏è –ê–¥–º–∏–Ω –¥–µ–π—Å—Ç–≤–∏–µ",
                description=f"–ü—Ä–µ–¥–º–µ—Ç '{item_name}' –∑–∞–±—Ä–∞–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.mention}",
                color=0xff0000
            )
        else:
            embed = discord.Embed(
                title="‚öôÔ∏è –ê–¥–º–∏–Ω –¥–µ–π—Å—Ç–≤–∏–µ",
                description=f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.mention} –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞ '{item_name}'",
                color=0xff0000
            )
        
        await interaction.response.send_message(embed=embed)
    except Exception as e:
        await interaction.response.send_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}", ephemeral=True)

@bot.tree.command(name="admin_createcase", description="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–µ–π—Å (–∞–¥–º–∏–Ω)")
@app_commands.describe(name="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–µ–π—Å–∞", price="–¶–µ–Ω–∞ –∫–µ–π—Å–∞", rewards_json="–ù–∞–≥—Ä–∞–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON")
@is_admin()
async def admin_createcase(interaction: discord.Interaction, name: str, price: int, rewards_json: str):
    try:
        rewards = json.loads(rewards_json)
        case_id = db.create_case(name, price, rewards)
        
        embed = discord.Embed(
            title="‚öôÔ∏è –ê–¥–º–∏–Ω –¥–µ–π—Å—Ç–≤–∏–µ",
            description=f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–µ–π—Å: {name}\n–¶–µ–Ω–∞: {price} {EMOJIS['coin']}\nID: {case_id}",
            color=0x00ff00
        )
        await interaction.response.send_message(embed=embed)
    except json.JSONDecodeError:
        await interaction.response.send_message("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –¥–ª—è –Ω–∞–≥—Ä–∞–¥", ephemeral=True)
    except Exception as e:
        await interaction.response.send_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}", ephemeral=True)

@bot.tree.command(name="admin_editcase", description="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–µ–π—Å (–∞–¥–º–∏–Ω)")
@app_commands.describe(case_id="ID –∫–µ–π—Å–∞", name="–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ", price="–ù–æ–≤–∞—è —Ü–µ–Ω–∞", rewards_json="–ù–æ–≤—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON")
@is_admin()
async def admin_editcase(interaction: discord.Interaction, case_id: int, name: str = None, price: int = None, rewards_json: str = None):
    try:
        case_data = db.get_case(case_id)
        if not case_data:
            await interaction.response.send_message("‚ùå –ö–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!", ephemeral=True)
            return
        
        current_name = case_data[1]
        current_price = case_data[2]
        current_rewards = case_data[3]
        
        new_name = name if name else current_name
        new_price = price if price else current_price
        
        new_rewards = json.loads(rewards_json) if rewards_json else json.loads(current_rewards)
        db.update_case(case_id, new_name, new_price, new_rewards)
        
        embed = discord.Embed(
            title="‚öôÔ∏è –ê–¥–º–∏–Ω –¥–µ–π—Å—Ç–≤–∏–µ",
            description=f"–ö–µ–π—Å ID {case_id} –æ–±–Ω–æ–≤–ª–µ–Ω:\n–ù–∞–∑–≤–∞–Ω–∏–µ: {new_name}\n–¶–µ–Ω–∞: {new_price} {EMOJIS['coin']}",
            color=0x00ff00
        )
        await interaction.response.send_message(embed=embed)
    except json.JSONDecodeError:
        await interaction.response.send_message("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –¥–ª—è –Ω–∞–≥—Ä–∞–¥", ephemeral=True)
    except Exception as e:
        await interaction.response.send_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}", ephemeral=True)

@bot.tree.command(name="admin_deletecase", description="–£–¥–∞–ª–∏—Ç—å –∫–µ–π—Å (–∞–¥–º–∏–Ω)")
@app_commands.describe(case_id="ID –∫–µ–π—Å–∞")
@is_admin()
async def admin_deletecase(interaction: discord.Interaction, case_id: int):
    try:
        case_data = db.get_case(case_id)
        if not case_data:
            await interaction.response.send_message("‚ùå –ö–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!", ephemeral=True)
            return
        
        db.delete_case(case_id)
        
        embed = discord.Embed(
            title="‚öôÔ∏è –ê–¥–º–∏–Ω –¥–µ–π—Å—Ç–≤–∏–µ",
            description=f"–ö–µ–π—Å '{case_data[1]}' (ID: {case_id}) —É–¥–∞–ª–µ–Ω",
            color=0xff0000
        )
        await interaction.response.send_message(embed=embed)
    except Exception as e:
        await interaction.response.send_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}", ephemeral=True)

@bot.tree.command(name="admin_viewtransactions", description="–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–∞–¥–º–∏–Ω)")
@app_commands.describe(user="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
@is_admin()
async def admin_viewtransactions(interaction: discord.Interaction, user: discord.Member = None):
    try:
        cursor = db.conn.cursor()
        
        if user:
            cursor.execute('SELECT * FROM transactions WHERE user_id = ? OR target_user_id = ? ORDER BY timestamp DESC LIMIT 10', (user.id, user.id))
            title = f"üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.name}"
        else:
            cursor.execute('SELECT * FROM transactions ORDER BY timestamp DESC LIMIT 10')
            title = "üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"
        
        transactions = cursor.fetchall()
        
        embed = discord.Embed(title=title, color=0x3498db)
        
        for trans in transactions:
            trans_user = bot.get_user(trans[1])
            target_user = bot.get_user(trans[4]) if trans[4] else None
            
            embed.add_field(
                name=f"#{trans[0]} {trans[2]}",
                value=f"–°—É–º–º–∞: {trans[3]} {EMOJIS['coin']}\n–û—Ç: {trans_user.name if trans_user else '–°–∏—Å—Ç–µ–º–∞'}\n–ö–æ–º—É: {target_user.name if target_user else '–ù–µ—Ç'}\n–û–ø–∏—Å–∞–Ω–∏–µ: {trans[5]}",
                inline=False
            )
        
        await interaction.response.send_message(embed=embed)
    except Exception as e:
        await interaction.response.send_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}", ephemeral=True)

@bot.tree.command(name="admin_broadcast", description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º (–∞–¥–º–∏–Ω)")
@app_commands.describe(message="–¢–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
@is_admin()
async def admin_broadcast(interaction: discord.Interaction, message: str):
    embed = discord.Embed(
        title="üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏",
        description=message,
        color=0xff69b4,
        timestamp=datetime.datetime.now()
    )
    
    await interaction.response.send_message("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è...", ephemeral=True)
    
    for guild in bot.guilds:
        for channel in guild.text_channels:
            if channel.permissions_for(guild.me).send_messages:
                try:
                    await channel.send(embed=embed)
                    break
                except:
                    continue

# –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏
@bot.tree.command(name="help", description="–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥")
async def help_command(interaction: discord.Interaction):
    embed = discord.Embed(
        title="üéÆ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –ë–æ—Ç - –ü–æ–º–æ—â—å",
        description="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫—É—é –∏–≥—Ä—É! –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–ª–Ω—É—é —Å–∏—Å—Ç–µ–º—É —ç–∫–æ–Ω–æ–º–∏–∫–∏ —Å –∫–µ–π—Å–∞–º–∏, –º–∏–Ω–∏-–∏–≥—Ä–∞–º–∏, –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–º –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏.",
        color=0x3498db
    )
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
    embed.add_field(
        name="üìä –û –±–æ—Ç–µ",
        value="‚Ä¢ –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –≤–∞–ª—é—Ç–∞: –º–æ–Ω–µ—Ç—ã ü™ô\n‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã üìÖ\n‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –∫–µ–π—Å–æ–≤ üéÅ\n‚Ä¢ –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å üè™\n‚Ä¢ –ú–∏–Ω–∏-–∏–≥—Ä—ã üé∞\n‚Ä¢ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è üèÖ",
        inline=False
    )
    
    # –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
    embed.add_field(
        name="üí∞ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã",
        value="""**/balance** [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] - –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å
**/daily** - –ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É
**/pay** @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É–º–º–∞ - –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –º–æ–Ω–µ—Ç—ã
**/inventory** - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å""",
        inline=False
    )
    
    # –ö–æ–º–∞–Ω–¥—ã –∫–µ–π—Å–æ–≤
    embed.add_field(
        name="üéÅ –ö–æ–º–∞–Ω–¥—ã –∫–µ–π—Å–æ–≤",
        value="""**/cases** - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–µ–π—Å–æ–≤
**/opencase** ID_–∫–µ–π—Å–∞ - –ö—É–ø–∏—Ç—å –∏ –æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å
**/openmycase** ID_–∫–µ–π—Å–∞ - –û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
**/giftcase** @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID_–∫–µ–π—Å–∞ - –ü–æ–¥–∞—Ä–∏—Ç—å –∫–µ–π—Å""",
        inline=False
    )
    
    # –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å
    embed.add_field(
        name="üè™ –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å",
        value="""**/market** list - –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
**/market** sell –Ω–∞–∑–≤–∞–Ω–∏–µ_–ø—Ä–µ–¥–º–µ—Ç–∞ —Ü–µ–Ω–∞ - –ü—Ä–æ–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç
**/market** buy ID_—Ç–æ–≤–∞—Ä–∞ - –ö—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä""",
        inline=False
    )
    
    # –ú–∏–Ω–∏-–∏–≥—Ä—ã
    embed.add_field(
        name="üéÆ –ú–∏–Ω–∏-–∏–≥—Ä—ã",
        value="""**/roulette** —Å—Ç–∞–≤–∫–∞ - –ò–≥—Ä–∞ –≤ —Ä—É–ª–µ—Ç–∫—É
**/dice** —Å—Ç–∞–≤–∫–∞ - –ò–≥—Ä–∞ –≤ –∫–æ—Å—Ç–∏
**/duel** @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞–≤–∫–∞ - –î—É—ç–ª—å —Å –∏–≥—Ä–æ–∫–æ–º (50/50 —à–∞–Ω—Å)
**/quest** - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∫–≤–µ—Å—Ç (–ö–î 3 —á–∞—Å–∞)
**/steal** @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è —É–∫—Ä–∞—Å—Ç—å –º–æ–Ω–µ—Ç—ã (—Å–ª—É—á–∞–π–Ω–∞—è —Å—É–º–º–∞, –ö–î 30 –º–∏–Ω)""",
        inline=False
    )
    
    # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥—ã
    embed.add_field(
        name="üèÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥—ã",
        value="""**/leaderboard** balance - –õ–∏–¥–µ—Ä—ã –ø–æ –±–∞–ª–∞–Ω—Å—É
**/leaderboard** wins - –õ–∏–¥–µ—Ä—ã –ø–æ –ø–æ–±–µ–¥–∞–º
**/leaderboard** steals - –õ–∏–¥–µ—Ä—ã –ø–æ –∫—Ä–∞–∂–∞–º
**/achievements** - –í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è""",
        inline=False
    )
    
    # –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    if interaction.user.id in ADMIN_IDS:
        embed.add_field(
            name="‚öôÔ∏è –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã",
            value="""**/admin_addcoins** @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É–º–º–∞ - –î–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–µ—Ç—ã
**/admin_removecoins** @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É–º–º–∞ - –ó–∞–±—Ä–∞—Ç—å –º–æ–Ω–µ—Ç—ã
**/admin_giveitem** @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥–º–µ—Ç - –í—ã–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç
**/admin_removeitem** @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥–º–µ—Ç - –ó–∞–±—Ä–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç
**/admin_createcase** –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–Ω–∞ JSON_–Ω–∞–≥—Ä–∞–¥ - –°–æ–∑–¥–∞—Ç—å –∫–µ–π—Å
**/admin_editcase** ID_–∫–µ–π—Å–∞ [–Ω–∞–∑–≤–∞–Ω–∏–µ] [—Ü–µ–Ω–∞] [JSON_–Ω–∞–≥—Ä–∞–¥] - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–µ–π—Å
**/admin_deletecase** ID_–∫–µ–π—Å–∞ - –£–¥–∞–ª–∏—Ç—å –∫–µ–π—Å
**/admin_viewtransactions** [@–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] - –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
**/admin_broadcast** —Å–æ–æ–±—â–µ–Ω–∏–µ - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ""",
            inline=False
        )
    
    # –ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
    embed.add_field(
        name="üí° –°–æ–≤–µ—Ç—ã",
        value="""‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ **/daily** –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å–µ—Ä–∏–∏
‚Ä¢ –û—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –∫–µ–π—Å—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–¥–∫–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏ —Ä–æ–ª–µ–π
‚Ä¢ –¢–æ—Ä–≥—É–π—Ç–µ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ
‚Ä¢ –°–æ—Ä–µ–≤–Ω—É–π—Ç–µ—Å—å –∑–∞ –º–µ—Å—Ç–æ –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞—Ö""",
        inline=False
    )
    
    embed.set_footer(text="–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /–∫–æ–º–∞–Ω–¥–∞")
    
    await interaction.response.send_message(embed=embed)

# –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
@bot.event
async def on_ready():
    print(f'–ë–æ—Ç {bot.user.name} –∑–∞–ø—É—â–µ–Ω!')
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–ª–µ—à-–∫–æ–º–∞–Ω–¥
    try:
        synced = await bot.tree.sync()
        print(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(synced)} –∫–æ–º–∞–Ω–¥")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥: {e}")
    
    await bot.change_presence(activity=discord.Game(name="–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫—É—é –∏–≥—Ä—É | /help"))

if __name__ == "__main__":
    bot.run(BOT_TOKEN)





