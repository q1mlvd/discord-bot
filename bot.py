import discord
from discord.ext import commands, tasks
import aiosqlite
import asyncio
from datetime import datetime, timedelta
import os
import random
from typing import Optional, Dict, List
from dotenv import load_dotenv
import yt_dlp
import matplotlib.pyplot as plt
import io
import aiohttp
from fastapi import FastAPI
import uvicorn
import threading
from enum import Enum

# üîß –ö–û–ù–°–¢–ê–ù–¢–´
ADMIN_IDS = [1195144951546265675, 766767256742526996, 1078693283695448064, 1138140772097597472, 691904643181314078]
MODERATION_ROLES = [1167093102868172911, 1360243534946373672, 993043931342319636, 1338611327022923910, 1338609155203661915, 1365798715930968244, 1188261847850299514]
THREADS_CHANNEL_ID = 1422557295811887175
EVENTS_CHANNEL_ID = 1418738569081786459

# üõ°Ô∏è –î–ê–ù–ù–´–ï –î–õ–Ø –°–ò–°–¢–ï–ú (–ø–µ—Ä–µ–Ω–æ—Å–∏–º –≤ –∫–ª–∞—Å—Å—ã)
class DataStorage:
    def __init__(self):
        self.user_warns = {}
        self.mute_data = {}
        self.user_credits = {}
        self.user_investments = {}
        self.user_insurance = {}
        self.user_lottery_tickets = {}
        self.server_tax_pool = 0
        self.user_mining_farms = {}
        self.crypto_prices = {"BITCOIN": 50000, "ETHEREUM": 3000, "DOGECOIN": 0.15}
        self.active_events = {}
        self.user_reports = {}
        self.user_crypto = {}
        self.rob_cooldowns = {}
        self.economic_bans = {}
        self.user_reputation = {}
        self.marketplace_items = {}
        self.stock_prices = {}
        self.user_stocks = {}
        self.seasonal_events = {}

storage = DataStorage()

# üîß –§–£–ù–ö–¶–ò–ò –ü–†–û–í–ï–†–ö–ò –ü–†–ê–í
def is_admin():
    async def predicate(interaction: discord.Interaction):
        return interaction.user.id in ADMIN_IDS
    return commands.check(predicate)

def is_moderator():
    async def predicate(interaction: discord.Interaction):
        user_roles = [role.id for role in interaction.user.roles]
        return any(role_id in MODERATION_ROLES for role_id in user_roles)
    return commands.check(predicate)

# üîí –§–£–ù–ö–¶–ò–Ø –ü–†–û–í–ï–†–ö–ò –≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–û–ì–û –ë–ê–ù–ê
def check_economic_ban():
    async def predicate(interaction: discord.Interaction):
        ban_key = f"economic_ban_{interaction.user.id}"
        if ban_key in storage.economic_bans:
            ban_info = storage.economic_bans[ban_key]
            if datetime.now() < ban_info['end_time']:
                time_left = ban_info['end_time'] - datetime.now()
                hours_left = int(time_left.total_seconds() // 3600)
                await interaction.response.send_message(
                    f"üö´ –í–∞—à–∞ —ç–∫–æ–Ω–æ–º–∏–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É –∫—Ä–µ–¥–∏—Ç–∞!\n"
                    f"‚è≥ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —á–µ—Ä–µ–∑: {hours_left} —á–∞—Å–æ–≤\n"
                    f"üìã –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã: /—Ä–∞–±–æ—Ç–∞, /–µ–∂–µ–¥–Ω–µ–≤–Ω–æ, /–ø–µ—Ä–µ–¥–∞—Ç—å, /–æ–≥—Ä–∞–±–∏—Ç—å, /—Å–ª–æ—Ç—ã",
                    ephemeral=True
                )
                return False
            else:
                del storage.economic_bans[ban_key]
        return True
    return commands.check(predicate)

load_dotenv()
TOKEN = os.getenv('DISCORD_BOT_TOKEN')

if not TOKEN:
    print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞–π .env —Ñ–∞–π–ª —Å DISCORD_BOT_TOKEN")
    exit(1)

# üé® –î–ò–ó–ê–ô–ù
class Design:
    COLORS = {
        "primary": 0x5865F2, "success": 0x57F287, "warning": 0xFEE75C, 
        "danger": 0xED4245, "economy": 0xF1C40F, "music": 0x9B59B6,
        "moderation": 0xE74C3C, "shop": 0x9B59B6, "casino": 0xE67E22,
        "info": 0x3498DB, "premium": 0xFFD700, "roblox": 0xE74C3C,
        "discord": 0x5865F2, "tds": 0xF1C40F, "crypto": 0x16C60C,
        "event": 0x9B59B6, "credit": 0xE74C3C, "reputation": 0x9B59B6,
        "marketplace": 0x2ECC71, "stocks": 0xE67E22, "seasonal": 0xFF69B4
    }

    @staticmethod
    def create_embed(title: str, description: str = "", color: str = "primary"):
        return discord.Embed(title=title, description=description, color=Design.COLORS.get(color, Design.COLORS["primary"]))

# üíæ –ë–ê–ó–ê –î–ê–ù–ù–´–• (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è)
class Database:
    def __init__(self):
        self.db_path = "data/bot.db"
        os.makedirs("data", exist_ok=True)
    
    async def init_db(self):
        async with aiosqlite.connect(self.db_path) as db:
            # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            await db.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    balance INTEGER DEFAULT 1000,
                    level INTEGER DEFAULT 1,
                    xp INTEGER DEFAULT 0,
                    daily_claimed TEXT,
                    work_cooldown TEXT
                )
            ''')
            await db.execute('''
                CREATE TABLE IF NOT EXISTS inventory (
                    user_id INTEGER,
                    item_id INTEGER,
                    quantity INTEGER DEFAULT 1,
                    PRIMARY KEY (user_id, item_id)
                )
            ''')
            await db.execute('DROP TABLE IF EXISTS orders')
            await db.execute('''
                CREATE TABLE orders (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    category TEXT,
                    product_name TEXT,
                    quantity INTEGER,
                    price REAL,
                    details TEXT,
                    status TEXT DEFAULT '–æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã',
                    order_time TEXT,
                    admin_id INTEGER,
                    completion_time TEXT,
                    payment_screenshot TEXT
                )
            ''')
            
            # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            await db.execute('''
                CREATE TABLE IF NOT EXISTS user_credits (
                    user_id INTEGER,
                    company TEXT,
                    amount INTEGER,
                    interest_rate INTEGER,
                    due_date TEXT,
                    PRIMARY KEY (user_id)
                )
            ''')
            
            await db.execute('''
                CREATE TABLE IF NOT EXISTS mining_farms (
                    user_id INTEGER,
                    level INTEGER DEFAULT 1,
                    last_collected TEXT,
                    created_at TEXT,
                    PRIMARY KEY (user_id)
                )
            ''')
            
            # –ù–û–í–´–ï –¢–ê–ë–õ–ò–¶–´ –î–õ–Ø –î–û–ü–û–õ–ù–ï–ù–ò–ô
            await db.execute('''
                CREATE TABLE IF NOT EXISTS user_reputation (
                    user_id INTEGER PRIMARY KEY,
                    reputation INTEGER DEFAULT 0,
                    total_xp INTEGER DEFAULT 0,
                    reputation_level INTEGER DEFAULT 1,
                    last_reputation_update TEXT
                )
            ''')
            
            await db.execute('''
                CREATE TABLE IF NOT EXISTS marketplace (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    seller_id INTEGER,
                    item_name TEXT,
                    item_description TEXT,
                    price INTEGER,
                    quantity INTEGER,
                    category TEXT,
                    listed_at TEXT,
                    expires_at TEXT,
                    status TEXT DEFAULT 'active'
                )
            ''')
            
            await db.execute('''
                CREATE TABLE IF NOT EXISTS user_stocks (
                    user_id INTEGER,
                    stock_symbol TEXT,
                    quantity INTEGER DEFAULT 0,
                    average_buy_price REAL,
                    total_invested INTEGER DEFAULT 0,
                    PRIMARY KEY (user_id, stock_symbol)
                )
            ''')
            
            await db.execute('''
                CREATE TABLE IF NOT EXISTS stock_prices (
                    stock_symbol TEXT PRIMARY KEY,
                    current_price REAL,
                    daily_change REAL,
                    last_updated TEXT
                )
            ''')
            
            await db.execute('''
                CREATE TABLE IF NOT EXISTS seasonal_events (
                    event_id INTEGER PRIMARY KEY AUTOINCREMENT,
                    event_name TEXT,
                    start_date TEXT,
                    end_date TEXT,
                    active BOOLEAN DEFAULT FALSE,
                    multiplier REAL DEFAULT 1.0
                )
            ''')
            
            await db.execute('''
                CREATE TABLE IF NOT EXISTS seasonal_items (
                    user_id INTEGER,
                    item_id TEXT,
                    item_name TEXT,
                    quantity INTEGER DEFAULT 1,
                    obtained_date TEXT,
                    event_id INTEGER,
                    PRIMARY KEY (user_id, item_id)
                )
            ''')
            
            await db.execute('''
                CREATE TABLE IF NOT EXISTS tax_records (
                    user_id INTEGER,
                    tax_period TEXT,
                    income INTEGER DEFAULT 0,
                    tax_paid INTEGER DEFAULT 0,
                    tax_rate REAL DEFAULT 0.05,
                    PRIMARY KEY (user_id, tax_period)
                )
            ''')
            
            await db.commit()
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

# üåü –°–ò–°–¢–ï–ú–ê –†–ï–ü–£–¢–ê–¶–ò–ò –ò –£–†–û–í–ù–ï–ô
class ReputationSystem:
    def __init__(self, db: Database):
        self.db = db
        self.levels = {
            1: {"min_rep": 0, "bonus": "–ë–∞–∑–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞", "multiplier": 1.0},
            2: {"min_rep": 100, "bonus": "+10% –∫ –¥–æ—Ö–æ–¥–∞–º", "multiplier": 1.1},
            3: {"min_rep": 300, "bonus": "+20% –∫ –¥–æ—Ö–æ–¥–∞–º", "multiplier": 1.2},
            4: {"min_rep": 600, "bonus": "+30% –∫ –¥–æ—Ö–æ–¥–∞–º", "multiplier": 1.3},
            5: {"min_rep": 1000, "bonus": "+50% –∫ –¥–æ—Ö–æ–¥–∞–º", "multiplier": 1.5}
        }
    
    async def get_user_reputation(self, user_id: int) -> Dict:
        async with aiosqlite.connect(self.db.db_path) as db:
            async with db.execute('SELECT reputation, reputation_level, total_xp FROM user_reputation WHERE user_id = ?', (user_id,)) as cursor:
                result = await cursor.fetchone()
                if result:
                    return {"reputation": result[0], "level": result[1], "total_xp": result[2]}
                else:
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –µ—Å–ª–∏ –Ω–µ—Ç
                    await db.execute('INSERT INTO user_reputation (user_id) VALUES (?)', (user_id,))
                    await db.commit()
                    return {"reputation": 0, "level": 1, "total_xp": 0}
    
    async def add_reputation(self, user_id: int, amount: int, reason: str = ""):
        current_data = await self.get_user_reputation(user_id)
        new_rep = current_data["reputation"] + amount
        new_xp = current_data["total_xp"] + max(amount, 0)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å
        new_level = 1
        for level, data in sorted(self.levels.items(), reverse=True):
            if new_rep >= data["min_rep"]:
                new_level = level
                break
        
        async with aiosqlite.connect(self.db.db_path) as db:
            await db.execute('''
                UPDATE user_reputation 
                SET reputation = ?, reputation_level = ?, total_xp = ?, last_reputation_update = ?
                WHERE user_id = ?
            ''', (new_rep, new_level, new_xp, datetime.now().isoformat(), user_id))
            await db.commit()
        
        level_up = new_level > current_data["level"]
        return new_rep, new_level, level_up
    
    def get_level_multiplier(self, level: int) -> float:
        return self.levels.get(level, {"multiplier": 1.0})["multiplier"]

# üõí –°–ò–°–¢–ï–ú–ê –ú–ê–†–ö–ï–¢–ü–õ–ï–ô–°–ê
class MarketplaceSystem:
    def __init__(self, db: Database, economy):
        self.db = db
        self.economy = economy
        self.categories = ["–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", "–ø—Ä–µ–¥–º–µ—Ç—ã", "—É—Å–ª—É–≥–∏", "—Ñ–µ—Ä–º—ã", "–¥—Ä—É–≥–æ–µ"]
    
    async def list_item(self, user_id: int, item_name: str, description: str, price: int, quantity: int = 1, category: str = "–¥—Ä—É–≥–æ–µ"):
        if category not in self.categories:
            return False, "–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è"
        
        if price <= 0:
            return False, "–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π"
        
        async with aiosqlite.connect(self.db.db_path) as db:
            await db.execute('''
                INSERT INTO marketplace (seller_id, item_name, item_description, price, quantity, category, listed_at, expires_at)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            ''', (user_id, item_name, description, price, quantity, category, datetime.now().isoformat(), 
                 (datetime.now() + timedelta(days=7)).isoformat()))
            await db.commit()
            
            return True, "–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–¥–∞–∂—É!"
    
    async def get_marketplace_items(self, category: str = None, page: int = 1):
        limit = 10
        offset = (page - 1) * limit
        
        async with aiosqlite.connect(self.db.db_path) as db:
            if category and category in self.categories:
                async with db.execute('''
                    SELECT * FROM marketplace 
                    WHERE status = "active" AND category = ? 
                    ORDER BY listed_at DESC 
                    LIMIT ? OFFSET ?
                ''', (category, limit, offset)) as cursor:
                    items = await cursor.fetchall()
            else:
                async with db.execute('''
                    SELECT * FROM marketplace 
                    WHERE status = "active" 
                    ORDER BY listed_at DESC 
                    LIMIT ? OFFSET ?
                ''', (limit, offset)) as cursor:
                    items = await cursor.fetchall()
            
            return items
    
    async def buy_item(self, buyer_id: int, item_id: int, quantity: int = 1):
        async with aiosqlite.connect(self.db.db_path) as db:
            async with db.execute('SELECT * FROM marketplace WHERE id = ? AND status = "active"', (item_id,)) as cursor:
                item = await cursor.fetchone()
                
            if not item:
                return False, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"
            
            seller_id, item_name, description, price, available_quantity = item[1], item[2], item[3], item[4], item[5]
            
            if buyer_id == seller_id:
                return False, "–ù–µ–ª—å–∑—è –∫—É–ø–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä"
            
            if available_quantity < quantity:
                return False, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞"
            
            total_cost = price * quantity
            buyer_balance = await self.economy.get_balance(buyer_id)
            
            if buyer_balance < total_cost:
                return False, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤"
            
            # –ü—Ä–æ–≤–æ–¥–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            await self.economy.update_balance(buyer_id, -total_cost)
            await self.economy.update_balance(seller_id, total_cost)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–ª–∏ —É–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä
            if available_quantity == quantity:
                await db.execute('DELETE FROM marketplace WHERE id = ?', (item_id,))
            else:
                await db.execute('UPDATE marketplace SET quantity = quantity - ? WHERE id = ?', (quantity, item_id))
            
            await db.commit()
            
            return True, f"–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞! –ö—É–ø–ª–µ–Ω–æ: {quantity} x {item_name}"

# üìà –°–ò–°–¢–ï–ú–ê –ê–ö–¶–ò–ô –ò –ò–ù–í–ï–°–¢–ò–¶–ò–ô
class StockMarketSystem:
    def __init__(self, db: Database, economy):
        self.db = db
        self.economy = economy
        self.stocks = {
            "DISCORD": {"name": "Discord Inc", "base_price": 100, "volatility": 0.1},
            "ROBLOX": {"name": "Roblox Corporation", "base_price": 45, "volatility": 0.15},
            "TS": {"name": "Tower Defense Simulator", "base_price": 25, "volatility": 0.2},
            "EPIC": {"name": "Epic Games", "base_price": 85, "volatility": 0.12}
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–µ–Ω—ã
        for symbol in self.stocks:
            if symbol not in storage.stock_prices:
                storage.stock_prices[symbol] = self.stocks[symbol]["base_price"]
    
    async def update_stock_prices(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ü–µ–Ω—ã –∞–∫—Ü–∏–π —Å —É—á–µ—Ç–æ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏"""
        for symbol, data in self.stocks.items():
            change_percent = random.uniform(-data["volatility"], data["volatility"])
            current_price = storage.stock_prices.get(symbol, data["base_price"])
            new_price = max(current_price * (1 + change_percent), data["base_price"] * 0.5)  # –ù–µ –Ω–∏–∂–µ 50% –æ—Ç –±–∞–∑–æ–≤–æ–π
            storage.stock_prices[symbol] = round(new_price, 2)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            async with aiosqlite.connect(self.db.db_path) as db:
                await db.execute('''
                    INSERT OR REPLACE INTO stock_prices (stock_symbol, current_price, daily_change, last_updated)
                    VALUES (?, ?, ?, ?)
                ''', (symbol, new_price, change_percent * 100, datetime.now().isoformat()))
                await db.commit()
    
    async def buy_stocks(self, user_id: int, symbol: str, quantity: int):
        if symbol not in self.stocks:
            return False, "–ê–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        current_price = storage.stock_prices.get(symbol, self.stocks[symbol]["base_price"])
        total_cost = current_price * quantity
        
        balance = await self.economy.get_balance(user_id)
        if balance < total_cost:
            return False, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤"
        
        await self.economy.update_balance(user_id, -total_cost)
        
        async with aiosqlite.connect(self.db.db_path) as db:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ü–∏–∏
            async with db.execute('SELECT quantity, average_buy_price, total_invested FROM user_stocks WHERE user_id = ? AND stock_symbol = ?', 
                                (user_id, symbol)) as cursor:
                existing = await cursor.fetchone()
            
            if existing:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É
                old_quantity, old_avg, old_invested = existing
                new_quantity = old_quantity + quantity
                new_invested = old_invested + total_cost
                new_avg = new_invested / new_quantity
                
                await db.execute('''
                    UPDATE user_stocks 
                    SET quantity = ?, average_buy_price = ?, total_invested = ?
                    WHERE user_id = ? AND stock_symbol = ?
                ''', (new_quantity, new_avg, new_invested, user_id, symbol))
            else:
                await db.execute('''
                    INSERT INTO user_stocks (user_id, stock_symbol, quantity, average_buy_price, total_invested)
                    VALUES (?, ?, ?, ?, ?)
                ''', (user_id, symbol, quantity, current_price, total_cost))
            
            await db.commit()
            
        return True, f"–ö—É–ø–ª–µ–Ω–æ {quantity} –∞–∫—Ü–∏–π {symbol} –ø–æ {current_price} –º–æ–Ω–µ—Ç –∑–∞ —à—Ç—É–∫—É"
    
    async def sell_stocks(self, user_id: int, symbol: str, quantity: int):
        if symbol not in self.stocks:
            return False, "–ê–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        current_price = storage.stock_prices.get(symbol, self.stocks[symbol]["base_price"])
        
        async with aiosqlite.connect(self.db.db_path) as db:
            async with db.execute('SELECT quantity FROM user_stocks WHERE user_id = ? AND stock_symbol = ?', 
                                (user_id, symbol)) as cursor:
                existing = await cursor.fetchone()
            
            if not existing or existing[0] < quantity:
                return False, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–∫—Ü–∏–π"
            
            total_income = current_price * quantity
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            await db.execute('UPDATE user_stocks SET quantity = quantity - ? WHERE user_id = ? AND stock_symbol = ?', 
                           (quantity, user_id, symbol))
            
            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –µ—Å–ª–∏ –∞–∫—Ü–∏–π –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å
            await db.execute('DELETE FROM user_stocks WHERE user_id = ? AND stock_symbol = ? AND quantity = 0', 
                           (user_id, symbol))
            
            await db.commit()
        
        await self.economy.update_balance(user_id, total_income)
        return True, f"–ü—Ä–æ–¥–∞–Ω–æ {quantity} –∞–∫—Ü–∏–π {symbol} –ø–æ {current_price} –º–æ–Ω–µ—Ç –∑–∞ —à—Ç—É–∫—É"
    
    async def get_user_portfolio(self, user_id: int):
        async with aiosqlite.connect(self.db.db_path) as db:
            async with db.execute('SELECT stock_symbol, quantity, average_buy_price FROM user_stocks WHERE user_id = ?', 
                                (user_id,)) as cursor:
                stocks = await cursor.fetchall()
        
        portfolio = []
        total_value = 0
        total_invested = 0
        
        for symbol, quantity, avg_price in stocks:
            current_price = storage.stock_prices.get(symbol, 0)
            value = current_price * quantity
            profit = value - (avg_price * quantity)
            profit_percent = (profit / (avg_price * quantity)) * 100 if avg_price * quantity > 0 else 0
            
            portfolio.append({
                "symbol": symbol,
                "quantity": quantity,
                "avg_price": avg_price,
                "current_price": current_price,
                "value": value,
                "profit": profit,
                "profit_percent": profit_percent
            })
            
            total_value += value
            total_invested += avg_price * quantity
        
        total_profit = total_value - total_invested
        total_profit_percent = (total_profit / total_invested) * 100 if total_invested > 0 else 0
        
        return {
            "stocks": portfolio,
            "total_value": total_value,
            "total_invested": total_invested,
            "total_profit": total_profit,
            "total_profit_percent": total_profit_percent
        }

# üéÑ –°–ò–°–¢–ï–ú–ê –°–ï–ó–û–ù–ù–´–• –°–û–ë–´–¢–ò–ô
class SeasonalEventSystem:
    def __init__(self, db: Database, economy):
        self.db = db
        self.economy = economy
        self.events = {
            "halloween": {
                "name": "üéÉ –•—ç–ª–ª–æ—É–∏–Ω",
                "start": "10-25",
                "end": "11-05",
                "multiplier": 1.2,
                "special_items": ["–¢—ã–∫–≤–∞", "–ü—Ä–∏–∑—Ä–∞–∫", "–í–µ–¥—å–º–∏–Ω–∞ —à–ª—è–ø–∞"]
            },
            "christmas": {
                "name": "üéÑ –†–æ–∂–¥–µ—Å—Ç–≤–æ", 
                "start": "12-20",
                "end": "01-05",
                "multiplier": 1.3,
                "special_items": ["–ü–æ–¥–∞—Ä–æ–∫", "–°–Ω–µ–∂–∏–Ω–∫–∞", "–ù–æ—Å–æ–∫"]
            },
            "summer": {
                "name": "‚òÄÔ∏è –õ–µ—Ç–æ",
                "start": "06-01", 
                "end": "08-31",
                "multiplier": 1.15,
                "special_items": ["–ü–ª—è–∂–Ω—ã–π –º—è—á", "–°–æ–ª–Ω–µ—á–Ω—ã–µ –æ—á–∫–∏", "–ö–æ–∫–æ—Å"]
            }
        }
    
    def get_current_event(self):
        current_date = datetime.now()
        for event_id, event_data in self.events.items():
            start_month, start_day = map(int, event_data["start"].split("-"))
            end_month, end_day = map(int, event_data["end"].split("-"))
            
            start_date = datetime(current_date.year, start_month, start_day)
            end_date = datetime(current_date.year, end_month, end_day)
            
            if start_date <= current_date <= end_date:
                return event_id, event_data
        
        return None, None
    
    async def give_seasonal_item(self, user_id: int, item_name: str):
        event_id, event_data = self.get_current_event()
        if not event_id:
            return False, "–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"
        
        if item_name not in event_data["special_items"]:
            return False, "–≠—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ç–µ–∫—É—â–µ–º—É —Å–æ–±—ã—Ç–∏—é"
        
        async with aiosqlite.connect(self.db.db_path) as db:
            await db.execute('''
                INSERT OR REPLACE INTO seasonal_items (user_id, item_id, item_name, obtained_date, event_id)
                VALUES (?, ?, ?, ?, ?)
            ''', (user_id, f"{event_id}_{item_name}", item_name, datetime.now().isoformat(), event_id))
            await db.commit()
        
        return True, f"–ü–æ–ª—É—á–µ–Ω —Å–µ–∑–æ–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç: {item_name}"

# üí∞ –≠–ö–û–ù–û–ú–ò–ö–ê (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è)
class EconomySystem:
    def __init__(self, db: Database):
        self.db = db

    async def get_balance(self, user_id: int):
        async with aiosqlite.connect(self.db.db_path) as db:
            async with db.execute('SELECT balance FROM users WHERE user_id = ?', (user_id,)) as cursor:
                result = await cursor.fetchone()
                if result:
                    return result[0]
                else:
                    await db.execute('INSERT INTO users (user_id) VALUES (?)', (user_id,))
                    await db.commit()
                    return 1000
    
    async def update_balance(self, user_id: int, amount: int):
        async with aiosqlite.connect(self.db.db_path) as db:
            await db.execute('INSERT OR IGNORE INTO users (user_id) VALUES (?)', (user_id,))
            await db.execute('UPDATE users SET balance = balance + ? WHERE user_id = ?', (amount, user_id))
            await db.commit()
            return await self.get_balance(user_id)
    
    async def get_user_data(self, user_id: int):
        async with aiosqlite.connect(self.db.db_path) as db:
            async with db.execute('SELECT balance, level, xp, daily_claimed, work_cooldown FROM users WHERE user_id = ?', (user_id,)) as cursor:
                result = await cursor.fetchone()
                if result:
                    return {
                        "balance": result[0], "level": result[1], "xp": result[2],
                        "daily_claimed": result[3], "work_cooldown": result[4]
                    }
                else:
                    await db.execute('INSERT INTO users (user_id) VALUES (?)', (user_id,))
                    await db.commit()
                    return {"balance": 1000, "level": 1, "xp": 0, "daily_claimed": None, "work_cooldown": None}

    async def admin_add_money(self, user_id: int, amount: int):
        async with aiosqlite.connect(self.db.db_path) as db:
            await db.execute('INSERT OR IGNORE INTO users (user_id) VALUES (?)', (user_id,))
            await db.execute('UPDATE users SET balance = balance + ? WHERE user_id = ?', (amount, user_id))
            await db.commit()
            return await self.get_balance(user_id)

    async def calculate_tax(self, user_id: int, amount: int) -> int:
        """–ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –Ω–∞–ª–æ–≥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–æ—Ö–æ–¥–∞"""
        balance = await self.get_balance(user_id)
        total_wealth = balance + amount
        
        if total_wealth <= 10000:
            tax_rate = 0.05  # 5%
        elif total_wealth <= 50000:
            tax_rate = 0.08  # 8%
        elif total_wealth <= 100000:
            tax_rate = 0.12  # 12%
        else:
            tax_rate = 0.15  # 15% –¥–ª—è –±–æ–≥–∞—Ç—ã—Ö
        
        return int(amount * tax_rate)

# üè¶ –°–ò–°–¢–ï–ú–ê –ö–†–ï–î–ò–¢–û–í (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è)
class CreditSystem:
    def __init__(self, economy: EconomySystem):
        self.economy = economy
        self.companies = {
            "fast_money": {
                "name": "üöÄ –ë—ã—Å—Ç—Ä—ã–µ –î–µ–Ω—å–≥–∏",
                "min_amount": 1000,
                "max_amount": 5000,
                "interest_rate": 15,
                "term_days": 3,
                "penalty": "–ë–∞–Ω —ç–∫–æ–Ω–æ–º–∏–∫–∏ –Ω–∞ 2 –¥–Ω—è"
            },
            "reliable_credit": {
                "name": "üõ°Ô∏è –ù–∞–¥–µ–∂–Ω—ã–π –ö—Ä–µ–¥–∏—Ç", 
                "min_amount": 5000,
                "max_amount": 15000,
                "interest_rate": 8,
                "term_days": 7,
                "penalty": "-50% —Ä–µ–ø—É—Ç–∞—Ü–∏–∏"
            },
            "premium_finance": {
                "name": "üíé –ü—Ä–µ–º–∏—É–º –§–∏–Ω–∞–Ω—Å",
                "min_amount": 15000,
                "max_amount": 30000,
                "interest_rate": 5,
                "term_days": 14,
                "penalty": "-100% —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ + –±–∞–Ω —ç–∫–æ–Ω–æ–º–∏–∫–∏"
            }
        }
    
    async def take_credit(self, user_id: int, company: str, amount: int):
        if user_id in storage.user_credits:
            return False, "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫—Ä–µ–¥–∏—Ç"
        
        company_data = self.companies.get(company)
        if not company_data:
            return False, "–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        if amount < company_data["min_amount"] or amount > company_data["max_amount"]:
            return False, f"–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç {company_data['min_amount']} –¥–æ {company_data['max_amount']}"
        
        due_date = datetime.now() + timedelta(days=company_data["term_days"])
        storage.user_credits[user_id] = {
            "company": company,
            "amount": amount,
            "interest_rate": company_data["interest_rate"],
            "due_date": due_date,
            "original_amount": amount
        }
        
        await self.economy.update_balance(user_id, amount)
        return True, f"–ö—Ä–µ–¥–∏—Ç –æ–¥–æ–±—Ä–µ–Ω! –í–µ—Ä–Ω—É—Ç—å –¥–æ {due_date.strftime('%d.%m.%Y')}"

    async def repay_credit(self, user_id: int):
        if user_id not in storage.user_credits:
            return False, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤"
        
        credit = storage.user_credits[user_id]
        total_to_repay = credit["amount"]
        
        balance = await self.economy.get_balance(user_id)
        if balance < total_to_repay:
            return False, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù—É–∂–Ω–æ: {total_to_repay} –º–æ–Ω–µ—Ç"
        
        await self.economy.update_balance(user_id, -total_to_repay)
        del storage.user_credits[user_id]
        return True, f"–ö—Ä–µ–¥–∏—Ç –ø–æ–≥–∞—à–µ–Ω! –°—É–º–º–∞: {total_to_repay} –º–æ–Ω–µ—Ç"

# üé∞ –ö–ê–ó–ò–ù–û (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ)
class CasinoSystem:
    def __init__(self, economy: EconomySystem):
        self.economy = economy
    
    async def play_slots(self, user_id: int, bet: int):
        if bet <= 0:  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
            return {"success": False, "error": "–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!"}
        
        balance = await self.economy.get_balance(user_id)
        if balance < bet:
            return {"success": False, "error": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!"}
        
        symbols = ["üçí", "üçã", "üçä", "üçá", "üîî", "üíé", "7Ô∏è‚É£"]
        result = [random.choice(symbols) for _ in range(3)]
        
        await self.economy.update_balance(user_id, -bet)
        
        if result[0] == result[1] == result[2]:
            multiplier = 10
        elif result[0] == result[1] or result[1] == result[2]:
            multiplier = 3
        else:
            multiplier = 0
        
        win_amount = bet * multiplier
        if win_amount > 0:
            await self.economy.update_balance(user_id, win_amount)
        
        return {
            "success": True,
            "result": result,
            "multiplier": multiplier,
            "win_amount": win_amount
        }

# üèóÔ∏è –ì–õ–ê–í–ù–´–ô –ë–û–¢ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π)
class MegaBot(commands.Bot):
    def __init__(self):
        intents = discord.Intents.all()
        super().__init__(command_prefix='!', intents=intents, help_command=None)
        
        self.db = Database()
        self.economy = EconomySystem(self.db)
        self.casino = CasinoSystem(self.economy)
        
        # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–∏—Å—Ç–µ–º—ã
        self.credit_system = CreditSystem(self.economy)
        self.lootbox_system = LootboxSystem(self.economy)
        self.mining_system = MiningSystem(self.economy)
        self.event_system = EventSystem(self.economy)
        
        # –ù–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã
        self.reputation_system = ReputationSystem(self.db)
        self.marketplace_system = MarketplaceSystem(self.db, self.economy)
        self.stock_system = StockMarketSystem(self.db, self.economy)
        self.seasonal_system = SeasonalEventSystem(self.db, self.economy)
        
        self.start_time = datetime.now()
        
        # –ó–∞–¥–∞—á–∏
        self.update_stock_prices.start()
        self.check_credits.start()
    
    async def setup_hook(self):
        await self.db.init_db()
        try:
            synced = await self.tree.sync()
            print(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(synced)} –∫–æ–º–∞–Ω–¥")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")

    async def reload_bot(self):
        try:
            synced = await self.tree.sync()
            print(f"‚ôªÔ∏è –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω! –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(synced)} –∫–æ–º–∞–Ω–¥")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            return False

    @tasks.loop(minutes=5)
    async def update_stock_prices(self):
        await self.stock_system.update_stock_prices()
    
    @tasks.loop(hours=1)
    async def check_credits(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤"""
        current_time = datetime.now()
        users_to_remove = []
        
        for user_id, credit in storage.user_credits.items():
            if current_time > credit["due_date"]:
                # –ù–∞–∫–∞–∑—ã–≤–∞–µ–º –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É
                storage.economic_bans[f"economic_ban_{user_id}"] = {
                    'end_time': current_time + timedelta(days=2),
                    'reason': '–ü—Ä–æ—Å—Ä–æ—á–∫–∞ –∫—Ä–µ–¥–∏—Ç–∞'
                }
                users_to_remove.append(user_id)
        
        for user_id in users_to_remove:
            del storage.user_credits[user_id]

    @update_stock_prices.before_loop
    @check_credits.before_loop
    async def before_tasks(self):
        await self.wait_until_ready()

bot = MegaBot()

# üîß –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ)
def parse_time(time_str: str) -> int:
    if not time_str:
        return 0
        
    time_units = {
        '—Å': 1, '—Å–µ–∫': 1, '—Å–µ–∫—É–Ω–¥': 1,
        '–º': 60, '–º–∏–Ω': 60, '–º–∏–Ω—É—Ç': 60, 
        '—á': 3600, '—á–∞—Å': 3600, '—á–∞—Å–æ–≤': 3600,
        '–¥': 86400, '–¥–µ–Ω—å': 86400, '–¥–Ω–µ–π': 86400
    }
    
    time_str = time_str.lower().replace(' ', '')
    num_str = ''
    unit_str = ''
    
    for char in time_str:
        if char.isdigit():
            num_str += char
        else:
            unit_str += char
    
    if not num_str:
        return 0
    
    try:
        number = int(num_str)
    except ValueError:
        return 0
    
    unit = unit_str.lower()
    
    if unit in time_units:
        return number * time_units[unit]
    else:
        return 0

# üåü –ù–û–í–´–ï –ö–û–ú–ê–ù–î–´ –†–ï–ü–£–¢–ê–¶–ò–ò
@bot.tree.command(name="—Ä–µ–ø—É—Ç–∞—Ü–∏—è", description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–ø—É—Ç–∞—Ü–∏—é")
async def —Ä–µ–ø—É—Ç–∞—Ü–∏—è(interaction: discord.Interaction, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: Optional[discord.Member] = None):
    user = –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å or interaction.user
    rep_data = await bot.reputation_system.get_user_reputation(user.id)
    
    embed = Design.create_embed(
        "‚≠ê –†–µ–ø—É—Ç–∞—Ü–∏—è", 
        f"**{user.display_name}**\n"
        f"üèÖ –£—Ä–æ–≤–µ–Ω—å —Ä–µ–ø—É—Ç–∞—Ü–∏–∏: {rep_data['level']}\n"
        f"‚≠ê –û—á–∫–∏ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏: {rep_data['reputation']}\n"
        f"üìä –í—Å–µ–≥–æ –æ–ø—ã—Ç–∞: {rep_data['total_xp']}",
        "reputation"
    )
    
    level_data = bot.reputation_system.levels.get(rep_data['level'], {})
    if level_data:
        embed.add_field(name="–ë–æ–Ω—É—Å —É—Ä–æ–≤–Ω—è", value=level_data.get("bonus", "–ù–µ—Ç"), inline=False)
    
    await interaction.response.send_message(embed=embed)

# üõí –ù–û–í–´–ï –ö–û–ú–ê–ù–î–´ –ú–ê–†–ö–ï–¢–ü–õ–ï–ô–°–ê
@bot.tree.command(name="–ø—Ä–æ–¥–∞—Ç—å", description="–í—ã—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É")
async def –ø—Ä–æ–¥–∞—Ç—å(interaction: discord.Interaction, –Ω–∞–∑–≤–∞–Ω–∏–µ: str, –æ–ø–∏—Å–∞–Ω–∏–µ: str, —Ü–µ–Ω–∞: int, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: int = 1, –∫–∞—Ç–µ–≥–æ—Ä–∏—è: str = "–¥—Ä—É–≥–æ–µ"):
    success, message = await bot.marketplace_system.list_item(
        interaction.user.id, –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ, —Ü–µ–Ω–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    )
    
    if success:
        embed = Design.create_embed("üõí –¢–æ–≤–∞—Ä –≤—ã—Å—Ç–∞–≤–ª–µ–Ω", message, "marketplace")
    else:
        embed = Design.create_embed("‚ùå –û—à–∏–±–∫–∞", message, "danger")
    
    await interaction.response.send_message(embed=embed, ephemeral=True)

@bot.tree.command(name="–±–∏—Ä–∂–∞", description="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã –Ω–∞ –±–∏—Ä–∂–µ")
async def –±–∏—Ä–∂–∞(interaction: discord.Interaction, –∫–∞—Ç–µ–≥–æ—Ä–∏—è: Optional[str] = None, —Å—Ç—Ä–∞–Ω–∏—Ü–∞: int = 1):
    items = await bot.marketplace_system.get_marketplace_items(–∫–∞—Ç–µ–≥–æ—Ä–∏—è, —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
    
    if not items:
        embed = Design.create_embed("üõí –ë–∏—Ä–∂–∞", "–¢–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", "marketplace")
        await interaction.response.send_message(embed=embed)
        return
    
    embed = Design.create_embed(f"üõí –ë–∏—Ä–∂–∞ (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {—Å—Ç—Ä–∞–Ω–∏—Ü–∞})", "", "marketplace")
    
    for item in items[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ç–æ–≤–∞—Ä–æ–≤
        item_id, seller_id, name, desc, price, quantity, category, listed_at = item[0], item[1], item[2], item[3], item[4], item[5], item[6], item[7]
        
        try:
            seller = await bot.fetch_user(seller_id)
            seller_name = seller.display_name
        except:
            seller_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        
        embed.add_field(
            name=f"#{item_id} {name}",
            value=f"üí∞ –¶–µ–Ω–∞: {price} –º–æ–Ω–µ—Ç\n"
                  f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n"
                  f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
                  f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: {seller_name}\n"
                  f"üìù {desc}",
            inline=False
        )
    
    await interaction.response.send_message(embed=embed)

# üìà –ù–û–í–´–ï –ö–û–ú–ê–ù–î–´ –ê–ö–¶–ò–ô
@bot.tree.command(name="–∞–∫—Ü–∏–∏", description="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ü–∏–∏")
async def –∞–∫—Ü–∏–∏(interaction: discord.Interaction):
    embed = Design.create_embed("üìà –ë–∏—Ä–∂–∞ –∞–∫—Ü–∏–π", "–¢–µ–∫—É—â–∏–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏:", "stocks")
    
    for symbol, price in storage.stock_prices.items():
        stock_data = bot.stock_system.stocks.get(symbol, {})
        embed.add_field(
            name=f"{symbol} - {stock_data.get('name', 'Unknown')}",
            value=f"üí∞ –¶–µ–Ω–∞: {price} –º–æ–Ω–µ—Ç\n"
                  f"üìä –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {stock_data.get('volatility', 0)*100}%",
            inline=True
        )
    
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="–∫—É–ø–∏—Ç—å_–∞–∫—Ü–∏–∏", description="–ö—É–ø–∏—Ç—å –∞–∫—Ü–∏–∏")
async def –∫—É–ø–∏—Ç—å_–∞–∫—Ü–∏–∏(interaction: discord.Interaction, –∞–∫—Ü–∏—è: str, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: int):
    success, message = await bot.stock_system.buy_stocks(interaction.user.id, –∞–∫—Ü–∏—è.upper(), –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
    
    if success:
        embed = Design.create_embed("‚úÖ –ê–∫—Ü–∏–∏ –∫—É–ø–ª–µ–Ω—ã", message, "success")
    else:
        embed = Design.create_embed("‚ùå –û—à–∏–±–∫–∞", message, "danger")
    
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="–ø–æ—Ä—Ç—Ñ–µ–ª—å", description="–ú–æ–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å")
async def –ø–æ—Ä—Ç—Ñ–µ–ª—å(interaction: discord.Interaction):
    portfolio = await bot.stock_system.get_user_portfolio(interaction.user.id)
    
    if not portfolio["stocks"]:
        await interaction.response.send_message("üìä –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ü–∏–π", ephemeral=True)
        return
    
    embed = Design.create_embed("üìä –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å", "", "stocks")
    
    for stock in portfolio["stocks"]:
        profit_emoji = "üìà" if stock["profit"] >= 0 else "üìâ"
        embed.add_field(
            name=f"{stock['symbol']}",
            value=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {stock['quantity']}\n"
                  f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {stock['avg_price']:.2f}\n"
                  f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {stock['current_price']:.2f}\n"
                  f"–ü—Ä–∏–±—ã–ª—å: {stock['profit']:.2f} ({stock['profit_percent']:.1f}%) {profit_emoji}",
            inline=True
        )
    
    embed.add_field(
        name="üí∞ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        value=f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {portfolio['total_value']:.2f}\n"
              f"–í—Å–µ–≥–æ –≤–ª–æ–∂–µ–Ω–æ: {portfolio['total_invested']:.2f}\n"
              f"–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: {portfolio['total_profit']:.2f} ({portfolio['total_profit_percent']:.1f}%)",
        inline=False
    )
    
    await interaction.response.send_message(embed=embed)

# üéÑ –ù–û–í–´–ï –ö–û–ú–ê–ù–î–´ –°–û–ë–´–¢–ò–ô
@bot.tree.command(name="—Å–æ–±—ã—Ç–∏–µ", description="–¢–µ–∫—É—â–µ–µ —Å–µ–∑–æ–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ")
async def —Å–æ–±—ã—Ç–∏–µ(interaction: discord.Interaction):
    event_id, event_data = bot.seasonal_system.get_current_event()
    
    if not event_id:
        embed = Design.create_embed("üé™ –°–µ–∑–æ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è", "–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π", "info")
    else:
        embed = Design.create_embed(f"üé™ {event_data['name']}", 
                                  f"**–ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–æ—Ö–æ–¥–æ–≤:** x{event_data['multiplier']}\n"
                                  f"**–û—Å–æ–±—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:** {', '.join(event_data['special_items'])}",
                                  "seasonal")
    
    await interaction.response.send_message(embed=embed)

# üîß –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –ö–û–ú–ê–ù–î–´ (—Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏)
@bot.tree.command(name="—Ä–∞–±–æ—Ç–∞", description="–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–Ω—å–≥–∏")
@check_economic_ban()
async def —Ä–∞–±–æ—Ç–∞(interaction: discord.Interaction):
    try:
        user_data = await bot.economy.get_user_data(interaction.user.id)
        
        if user_data["work_cooldown"]:
            last_work = datetime.fromisoformat(user_data["work_cooldown"])
            if (datetime.now() - last_work).seconds < 600:
                embed = Design.create_embed("‚è≥ –û—Ç–¥–æ—Ö–Ω–∏—Ç–µ!", "–ü–æ–¥–æ–∂–¥–∏—Ç–µ 10 –º–∏–Ω—É—Ç", "warning")
                await interaction.response.send_message(embed=embed, ephemeral=True)
                return
        
        # –£—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–ø—É—Ç–∞—Ü–∏—é
        rep_data = await bot.reputation_system.get_user_reputation(interaction.user.id)
        multiplier = bot.reputation_system.get_level_multiplier(rep_data["level"])
        
        base_earnings = random.randint(50, 200)
        earnings = int(base_earnings * multiplier)
        
        new_balance = await bot.economy.update_balance(interaction.user.id, earnings)
        
        async with aiosqlite.connect(bot.db.db_path) as db:
            await db.execute('UPDATE users SET work_cooldown = ? WHERE user_id = ?', (datetime.now().isoformat(), interaction.user.id))
            await db.commit()
        
        embed = Design.create_embed("üíº –†–∞–±–æ—Ç–∞", 
                                  f"**–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:** +{earnings} –º–æ–Ω–µ—Ç\n"
                                  f"**–ë–æ–Ω—É—Å —Ä–µ–ø—É—Ç–∞—Ü–∏–∏:** x{multiplier}\n"
                                  f"**–ë–∞–ª–∞–Ω—Å:** {new_balance:,} –º–æ–Ω–µ—Ç", "success")
        await interaction.response.send_message(embed=embed)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ: {e}")
        embed = Design.create_embed("‚ùå –û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É", "danger")
        await interaction.response.send_message(embed=embed, ephemeral=True)

# üåê API –î–õ–Ø –í–ï–ë-–ü–ê–ù–ï–õ–ò
def start_api_server():
    """–ó–∞–ø—É—Å–∫ FastAPI —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –≤–µ–±-–ø–∞–Ω–µ–ª–∏"""
    app = FastAPI(title="Bot Economy API")
    
    @app.get("/api/user/{user_id}")
    async def get_user_stats(user_id: int):
        try:
            balance = await bot.economy.get_balance(user_id)
            rep_data = await bot.reputation_system.get_user_reputation(user_id)
            portfolio = await bot.stock_system.get_user_portfolio(user_id)
            
            return {
                "user_id": user_id,
                "balance": balance,
                "reputation": rep_data["reputation"],
                "reputation_level": rep_data["level"],
                "portfolio_value": portfolio["total_value"],
                "total_profit": portfolio["total_profit"]
            }
        except Exception as e:
            return {"error": str(e)}
    
    @app.get("/api/economy/overview")
    async def get_economy_overview():
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
        return {
            "total_tax_pool": storage.server_tax_pool,
            "active_credits": len(storage.user_credits),
            "stock_prices": storage.stock_prices,
            "active_events": len(storage.active_events)
        }
    
    uvicorn.run(app, host="0.0.0.0", port=8000)

# üöÄ –ó–ê–ü–£–°–ö –ë–û–¢–ê –ò API
if __name__ == "__main__":
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        
        # –ó–∞–ø—É—Å–∫ API –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        api_thread = threading.Thread(target=start_api_server, daemon=True)
        api_thread.start()
        print("üåê API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8000")
        
        bot.run(TOKEN)
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
