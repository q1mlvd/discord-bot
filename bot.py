import os
import discord
from discord.ext import commands, tasks
from discord.ui import Button, View
import sqlite3
import json
import random
import asyncio
import datetime
import aiohttp
from typing import Dict, List, Optional

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway
BOT_TOKEN = os.environ.get('DISCORD_BOT_TOKEN')

if not BOT_TOKEN:
    print("–û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
intents = discord.Intents.all()
bot = commands.Bot(command_prefix='!', intents=intents, help_command=None)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DATABASE_FILE = 'economy.db'
LOG_CHANNEL_ID = 1422557295811887175
ADMIN_ROLES = ['Admin', 'Moderator']

# –≠–º–æ–¥–∑–∏ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
EMOJIS = {
    'coin': 'ü™ô',
    'daily': 'üìÖ',
    'case': 'üéÅ',
    'win': 'üéâ',
    'lose': 'üíÄ',
    'steal': 'ü¶π',
    'market': 'üè™',
    'quest': 'üó∫Ô∏è'
}

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite
class Database:
    def __init__(self):
        self.conn = sqlite3.connect(DATABASE_FILE, check_same_thread=False)
        self.create_tables()
    
    def create_tables(self):
        cursor = self.conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                balance INTEGER DEFAULT 100,
                daily_streak INTEGER DEFAULT 0,
                last_daily TEXT,
                inventory TEXT DEFAULT '{}',
                created_at TEXT DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS transactions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                type TEXT,
                amount INTEGER,
                target_user_id INTEGER,
                description TEXT,
                timestamp TEXT DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∫–µ–π—Å–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS cases (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT,
                price INTEGER,
                rewards TEXT,
                created_at TEXT DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –º–∞—Ä–∫–µ—Ç–∞
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS market (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                seller_id INTEGER,
                item_name TEXT,
                price INTEGER,
                created_at TEXT DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS achievements (
                user_id INTEGER,
                achievement_id TEXT,
                unlocked_at TEXT DEFAULT CURRENT_TIMESTAMP,
                PRIMARY KEY (user_id, achievement_id)
            )
        ''')
        
        self.conn.commit()
    
    def get_user(self, user_id):
        cursor = self.conn.cursor()
        cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
        user = cursor.fetchone()
        if not user:
            cursor.execute('INSERT INTO users (user_id, balance) VALUES (?, ?)', (user_id, 100))
            self.conn.commit()
            return self.get_user(user_id)
        return user
    
    def update_balance(self, user_id, amount):
        cursor = self.conn.cursor()
        cursor.execute('UPDATE users SET balance = balance + ? WHERE user_id = ?', (amount, user_id))
        self.conn.commit()
    
    def log_transaction(self, user_id, transaction_type, amount, target_user_id=None, description=""):
        cursor = self.conn.cursor()
        cursor.execute('''
            INSERT INTO transactions (user_id, type, amount, target_user_id, description)
            VALUES (?, ?, ?, ?, ?)
        ''', (user_id, transaction_type, amount, target_user_id, description))
        self.conn.commit()

db = Database()

# –°–∏—Å—Ç–µ–º–∞ –∫–µ–π—Å–æ–≤
CASES = {
    'small': {
        'name': 'üì¶ –ú–∞–ª—ã–π –∫–µ–π—Å',
        'price': 50,
        'rewards': [
            {'type': 'coins', 'amount': (20, 50), 'chance': 0.7},
            {'type': 'coins', 'amount': (51, 100), 'chance': 0.3}
        ]
    },
    'medium': {
        'name': 'üì¶ –°—Ä–µ–¥–Ω–∏–π –∫–µ–π—Å',
        'price': 150,
        'rewards': [
            {'type': 'coins', 'amount': (80, 150), 'chance': 0.6},
            {'type': 'coins', 'amount': (151, 300), 'chance': 0.3},
            {'type': 'role', 'name': '–í—Ä–µ–º–µ–Ω–Ω—ã–π VIP', 'duration': 24, 'chance': 0.1}
        ]
    },
    'large': {
        'name': 'üíé –ë–æ–ª—å—à–æ–π –∫–µ–π—Å',
        'price': 500,
        'rewards': [
            {'type': 'coins', 'amount': (300, 600), 'chance': 0.5},
            {'type': 'coins', 'amount': (601, 1000), 'chance': 0.3},
            {'type': 'custom_role', 'chance': 0.15},
            {'type': 'special_item', 'name': '–ó–æ–ª–æ—Ç–æ–π –∫–ª—é—á', 'chance': 0.05}
        ]
    },
    'elite': {
        'name': 'üëë –≠–ª–∏—Ç–Ω—ã–π –∫–µ–π—Å',
        'price': 1000,
        'rewards': [
            {'type': 'coins', 'amount': (800, 1500), 'chance': 0.4},
            {'type': 'custom_role', 'chance': 0.3},
            {'type': 'special_item', 'name': '–î—Ä–µ–≤–Ω–∏–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç', 'chance': 0.2},
            {'type': 'bonus', 'multiplier': 2.0, 'duration': 48, 'chance': 0.1}
        ]
    },
    'secret': {
        'name': 'üîÆ –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–µ–π—Å',
        'price': 2000,
        'rewards': [
            {'type': 'coins', 'amount': (1000, 5000), 'chance': 0.3},
            {'type': 'coins', 'amount': (-1000, -500), 'chance': 0.1},
            {'type': 'custom_role', 'chance': 0.2},
            {'type': 'special_item', 'name': '–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π –ø—Ä–µ–¥–º–µ—Ç', 'chance': 0.15},
            {'type': 'bonus', 'multiplier': 3.0, 'duration': 72, 'chance': 0.1},
            {'type': 'multiple', 'count': 3, 'chance': 0.15}
        ]
    }
}

class CaseView(View):
    def __init__(self, case_id, user_id):
        super().__init__(timeout=60)
        self.case_id = case_id
        self.user_id = user_id
        self.opened = False
    
    @discord.ui.button(label='–û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å', style=discord.ButtonStyle.primary, emoji='üéÅ')
    async def open_case(self, interaction: discord.Interaction, button: Button):
        if self.opened:
            return
        
        if interaction.user.id != self.user_id:
            await interaction.response.send_message("–≠—Ç–æ—Ç –∫–µ–π—Å –Ω–µ –¥–ª—è –≤–∞—Å!", ephemeral=True)
            return
        
        self.opened = True
        case = CASES[self.case_id]
        user_data = db.get_user(self.user_id)
        
        if user_data[1] < case['price']:
            await interaction.response.send_message("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!", ephemeral=True)
            return
        
        # –°–ø–∏–Ω –∞–Ω–∏–º–∞—Ü–∏—è
        embed = discord.Embed(title="üé∞ –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–∞...", color=0xffd700)
        message = await interaction.response.send_message(embed=embed)
        
        for i in range(3):
            await asyncio.sleep(1)
            embed.description = "üéÅ" * (i + 1)
            await interaction.edit_original_response(embed=embed)
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã
        reward = self.get_reward(case)
        db.update_balance(self.user_id, -case['price'])
        db.log_transaction(self.user_id, 'case_purchase', -case['price'], description=f"–ö–µ–π—Å: {case['name']}")
        
        # –í—ã–¥–∞—á–∞ –Ω–∞–≥—Ä–∞–¥—ã
        reward_text = await self.process_reward(interaction.user, reward, case)
        
        embed = discord.Embed(
            title=f"üéâ {case['name']} –æ—Ç–∫—Ä—ã—Ç!",
            description=reward_text,
            color=0x00ff00
        )
        embed.set_footer(text=f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {case['price']} {EMOJIS['coin']}")
        
        await interaction.edit_original_response(embed=embed)
    
    def get_reward(self, case):
        rand = random.random()
        cumulative = 0
        for reward in case['rewards']:
            cumulative += reward['chance']
            if rand <= cumulative:
                return reward
        return case['rewards'][-1]
    
    async def process_reward(self, user, reward, case):
        if reward['type'] == 'coins':
            amount = random.randint(*reward['amount'])
            db.update_balance(user.id, amount)
            db.log_transaction(user.id, 'case_reward', amount, description=f"–ù–∞–≥—Ä–∞–¥–∞ –∏–∑ {case['name']}")
            return f"–ú–æ–Ω–µ—Ç—ã: {amount} {EMOJIS['coin']}"
        
        elif reward['type'] == 'custom_role':
            await self.create_custom_role(user)
            return "üé≠ –ö–∞—Å—Ç–æ–º–Ω–∞—è —Ä–æ–ª—å!"
        
        elif reward['type'] == 'special_item':
            return f"üì¶ –û—Å–æ–±—ã–π –ø—Ä–µ–¥–º–µ—Ç: {reward['name']}"
        
        elif reward['type'] == 'bonus':
            return f"üöÄ –ë–æ–Ω—É—Å x{reward['multiplier']} –Ω–∞ {reward['duration']}—á"
        
        elif reward['type'] == 'multiple':
            rewards = []
            for _ in range(reward['count']):
                sub_reward = self.get_reward(case)
                rewards.append(await self.process_reward(user, sub_reward, case))
            return " + ".join(rewards)
        
        elif reward['type'] == 'role':
            return f"üëë –†–æ–ª—å: {reward['name']} –Ω–∞ {reward['duration']}—á"
        
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞"

    async def create_custom_role(self, user):
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫
            channel = bot.get_channel(LOG_CHANNEL_ID)
            if channel:
                embed = discord.Embed(
                    title="üé≠ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ä–æ–ª–∏",
                    description=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.mention} –≤—ã–∏–≥—Ä–∞–ª –∫–∞—Å—Ç–æ–º–Ω—É—é —Ä–æ–ª—å!",
                    color=0xff69b4,
                    timestamp=datetime.datetime.now()
                )
                embed.add_field(name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", value=f"{user.name}#{user.discriminator}")
                embed.add_field(name="ID", value=user.id)
                
                webhook = await channel.create_webhook(name="Role Creator")
                await webhook.send(embed=embed, username="Case System")
                await webhook.delete()
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–∏: {e}")

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
@bot.command(name='balance')
async def balance(ctx, member: discord.Member = None):
    member = member or ctx.author
    user_data = db.get_user(member.id)
    
    embed = discord.Embed(
        title=f"{EMOJIS['coin']} –ë–∞–ª–∞–Ω—Å {member.display_name}",
        color=0xffd700
    )
    embed.add_field(name="–ë–∞–ª–∞–Ω—Å", value=f"{user_data[1]} {EMOJIS['coin']}", inline=True)
    embed.add_field(name="–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–µ—Ä–∏—è", value=f"{user_data[2]} –¥–Ω–µ–π", inline=True)
    embed.set_thumbnail(url=member.avatar.url if member.avatar else member.default_avatar.url)
    
    await ctx.send(embed=embed)

@bot.command(name='daily')
async def daily(ctx):
    user_data = db.get_user(ctx.author.id)
    last_daily = datetime.datetime.fromisoformat(user_data[3]) if user_data[3] else None
    now = datetime.datetime.now()
    
    if last_daily and (now - last_daily).days < 1:
        await ctx.send("–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É —Å–µ–≥–æ–¥–Ω—è!")
        return
    
    streak = user_data[2] + 1 if last_daily and (now - last_daily).days == 1 else 1
    reward = 100 + (streak * 10)
    
    db.update_balance(ctx.author.id, reward)
    cursor = db.conn.cursor()
    cursor.execute('UPDATE users SET daily_streak = ?, last_daily = ? WHERE user_id = ?', 
                   (streak, now.isoformat(), ctx.author.id))
    db.conn.commit()
    db.log_transaction(ctx.author.id, 'daily', reward)
    
    embed = discord.Embed(
        title=f"{EMOJIS['daily']} –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞",
        description=f"–ù–∞–≥—Ä–∞–¥–∞: {reward} {EMOJIS['coin']}\n–°–µ—Ä–∏—è: {streak} –¥–Ω–µ–π",
        color=0x00ff00
    )
    await ctx.send(embed=embed)

@bot.command(name='pay')
async def pay(ctx, member: discord.Member, amount: int):
    if amount <= 0:
        await ctx.send("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
        return
    
    sender_data = db.get_user(ctx.author.id)
    if sender_data[1] < amount:
        await ctx.send("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!")
        return
    
    db.update_balance(ctx.author.id, -amount)
    db.update_balance(member.id, amount)
    db.log_transaction(ctx.author.id, 'transfer', -amount, member.id, f"–ü–µ—Ä–µ–≤–æ–¥ {member.name}")
    db.log_transaction(member.id, 'transfer', amount, ctx.author.id, f"–ü–æ–ª—É—á–µ–Ω–æ –æ—Ç {ctx.author.name}")
    
    embed = discord.Embed(
        title=f"{EMOJIS['coin']} –ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤",
        description=f"{ctx.author.mention} ‚Üí {member.mention}",
        color=0x00ff00
    )
    embed.add_field(name="–°—É–º–º–∞", value=f"{amount} {EMOJIS['coin']}")
    await ctx.send(embed=embed)

@bot.command(name='cases')
async def cases_list(ctx):
    embed = discord.Embed(title="üéÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–µ–π—Å—ã", color=0xff69b4)
    
    for case_id, case in CASES.items():
        rewards_desc = "\n".join([f"‚Ä¢ {r['type']} ({r['chance']*100:.1f}%)" for r in case['rewards']])
        embed.add_field(
            name=f"{case['name']} - {case['price']} {EMOJIS['coin']}",
            value=rewards_desc,
            inline=False
        )
    
    await ctx.send(embed=embed)

@bot.command(name='opencase')
async def open_case(ctx, case_id: str):
    if case_id not in CASES:
        await ctx.send("–ö–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/cases` –¥–ª—è —Å–ø–∏—Å–∫–∞.")
        return
    
    case = CASES[case_id]
    view = CaseView(case_id, ctx.author.id)
    
    embed = discord.Embed(
        title=f"üéÅ {case['name']}",
        description=f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {case['price']} {EMOJIS['coin']}",
        color=0xff69b4
    )
    
    await ctx.send(embed=embed, view=view)

@bot.command(name='steal')
async def steal(ctx, member: discord.Member, amount: int):
    if member.id == ctx.author.id:
        await ctx.send("–ù–µ–ª—å–∑—è –∫—Ä–∞—Å—Ç—å —É —Å–µ–±—è!")
        return
    
    thief_data = db.get_user(ctx.author.id)
    target_data = db.get_user(member.id)
    
    if thief_data[1] < 10:
        await ctx.send("–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 10 –º–æ–Ω–µ—Ç –¥–ª—è –∫—Ä–∞–∂–∏!")
        return
    
    if target_data[1] < amount:
        await ctx.send("–£ —Ü–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!")
        return
    
    success_chance = 0.3
    if random.random() <= success_chance:
        db.update_balance(ctx.author.id, amount)
        db.update_balance(member.id, -amount)
        db.log_transaction(ctx.author.id, 'steal', amount, member.id, "–£—Å–ø–µ—à–Ω–∞—è –∫—Ä–∞–∂–∞")
        
        embed = discord.Embed(
            title=f"{EMOJIS['steal']} –£—Å–ø–µ—à–Ω–∞—è –∫—Ä–∞–∂–∞!",
            description=f"{ctx.author.mention} —É–∫—Ä–∞–ª {amount} {EMOJIS['coin']} —É {member.mention}!",
            color=0x00ff00
        )
    else:
        penalty = min(amount // 2, 100)
        db.update_balance(ctx.author.id, -penalty)
        db.log_transaction(ctx.author.id, 'steal_fail', -penalty, member.id, "–ù–µ—É–¥–∞—á–Ω–∞—è –∫—Ä–∞–∂–∞")
        
        embed = discord.Embed(
            title=f"{EMOJIS['lose']} –ö—Ä–∞–∂–∞ –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å!",
            description=f"{ctx.author.mention} –æ—à—Ç—Ä–∞—Ñ–æ–≤–∞–Ω –Ω–∞ {penalty} {EMOJIS['coin']}!",
            color=0xff0000
        )
    
    await ctx.send(embed=embed)

@bot.command(name='roulette')
async def roulette(ctx, bet: int):
    user_data = db.get_user(ctx.author.id)
    
    if user_data[1] < bet:
        await ctx.send("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!")
        return
    
    winning_number = random.randint(0, 36)
    user_number = random.randint(0, 36)
    
    if user_number == winning_number:
        multiplier = 35
        winnings = bet * multiplier
        db.update_balance(ctx.author.id, winnings)
        result = f"–ü–û–ë–ï–î–ê! x{multiplier}\n–í—ã–∏–≥—Ä—ã—à: {winnings} {EMOJIS['coin']}"
        color = 0x00ff00
    else:
        db.update_balance(ctx.author.id, -bet)
        result = f"–ü–†–û–ò–ì–†–´–®!\n–í—ã–ø–∞–ª–æ: {winning_number}, –í–∞—à–µ: {user_number}"
        color = 0xff0000
    
    embed = discord.Embed(
        title=f"üé∞ –†—É–ª–µ—Ç–∫–∞ - –°—Ç–∞–≤–∫–∞: {bet} {EMOJIS['coin']}",
        description=result,
        color=color
    )
    await ctx.send(embed=embed)

@bot.command(name='leaderboard')
async def leaderboard(ctx, type: str = 'balance'):
    cursor = db.conn.cursor()
    
    if type == 'balance':
        cursor.execute('SELECT user_id, balance FROM users ORDER BY balance DESC LIMIT 10')
        title = "üèÜ –õ–∏–¥–µ—Ä—ã –ø–æ –±–∞–ª–∞–Ω—Å—É"
    else:
        await ctx.send("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: balance")
        return
    
    embed = discord.Embed(title=title, color=0xffd700)
    
    for i, (user_id, balance) in enumerate(cursor.fetchall(), 1):
        user = bot.get_user(user_id)
        name = user.name if user else f"User#{user_id}"
        embed.add_field(
            name=f"{i}. {name}",
            value=f"{balance} {EMOJIS['coin']}",
            inline=False
        )
    
    await ctx.send(embed=embed)

# –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã
@bot.command(name='admin_addcoins')
@commands.has_any_role(*ADMIN_ROLES)
async def admin_addcoins(ctx, member: discord.Member, amount: int):
    db.update_balance(member.id, amount)
    db.log_transaction(ctx.author.id, 'admin_add', amount, member.id, f"–ê–¥–º–∏–Ω {ctx.author.name}")
    
    embed = discord.Embed(
        title="‚öôÔ∏è –ê–¥–º–∏–Ω –¥–µ–π—Å—Ç–≤–∏–µ",
        description=f"–í—ã–¥–∞–Ω–æ {amount} {EMOJIS['coin']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {member.mention}",
        color=0x00ff00
    )
    await ctx.send(embed=embed)

@bot.command(name='admin_broadcast')
@commands.has_any_role(*ADMIN_ROLES)
async def admin_broadcast(ctx, *, message: str):
    embed = discord.Embed(
        title="üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏",
        description=message,
        color=0xff69b4,
        timestamp=datetime.datetime.now()
    )
    
    for guild in bot.guilds:
        for channel in guild.text_channels:
            if channel.permissions_for(guild.me).send_messages:
                await channel.send(embed=embed)
                break

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
@bot.event
async def on_ready():
    print(f'–ë–æ—Ç {bot.user.name} –∑–∞–ø—É—â–µ–Ω!')
    await bot.change_presence(activity=discord.Game(name="–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫—É—é –∏–≥—Ä—É"))

if __name__ == "__main__":
    bot.run(BOT_TOKEN)

