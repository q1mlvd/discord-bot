import discord
from discord.ext import commands, tasks
import aiosqlite
import asyncio
from datetime import datetime, timedelta
import os
import random
from typing import Optional
from dotenv import load_dotenv
import yt_dlp

# üîß –ö–û–ù–°–¢–ê–ù–¢–´
ADMIN_IDS = [1195144951546265675, 766767256742526996, 1078693283695448064, 1138140772097597472, 691904643181314078]
MODERATION_ROLES = [1167093102868172911, 1360243534946373672, 993043931342319636, 1338611327022923910, 1338609155203661915, 1365798715930968244, 1188261847850299514]
THREADS_CHANNEL_ID = 1422557295811887175
EVENTS_CHANNEL_ID = 1418738569081786459

# üõ°Ô∏è –î–ê–ù–ù–´–ï –î–õ–Ø –°–ò–°–¢–ï–ú
user_warns = {}
mute_data = {}
user_credits = {}
user_investments = {}
user_insurance = {}
user_lottery_tickets = {}
server_tax_pool = 0
user_mining_farms = {}
crypto_prices = {"BITCOIN": 50000, "ETHEREUM": 3000, "DOGECOIN": 0.15}
active_events = {}
user_reports = {}
user_crypto = {}
rob_cooldowns = {}
economic_bans = {}

# üîß –§–£–ù–ö–¶–ò–ò –ü–†–û–í–ï–†–ö–ò –ü–†–ê–í
def is_admin():
    async def predicate(interaction: discord.Interaction):
        return interaction.user.id in ADMIN_IDS
    return commands.check(predicate)

def is_moderator():
    async def predicate(interaction: discord.Interaction):
        user_roles = [role.id for role in interaction.user.roles]
        return any(role_id in MODERATION_ROLES for role_id in user_roles) or interaction.user.id in ADMIN_IDS
    return commands.check(predicate)

def check_economic_ban():
    async def predicate(interaction: discord.Interaction):
        ban_key = f"economic_ban_{interaction.user.id}"
        if ban_key in economic_bans:
            ban_info = economic_bans[ban_key]
            if datetime.now() < ban_info['end_time']:
                time_left = ban_info['end_time'] - datetime.now()
                hours_left = int(time_left.total_seconds() // 3600)
                await interaction.response.send_message(
                    f"üö´ –í–∞—à–∞ —ç–∫–æ–Ω–æ–º–∏–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É –∫—Ä–µ–¥–∏—Ç–∞!\n"
                    f"‚è≥ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —á–µ—Ä–µ–∑: {hours_left} —á–∞—Å–æ–≤\n"
                    f"üìã –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã: /—Ä–∞–±–æ—Ç–∞, /–µ–∂–µ–¥–Ω–µ–≤–Ω–æ, /–ø–µ—Ä–µ–¥–∞—Ç—å, /–æ–≥—Ä–∞–±–∏—Ç—å, /—Å–ª–æ—Ç—ã",
                    ephemeral=True
                )
                return False
            else:
                del economic_bans[ban_key]
        return True
    return commands.check(predicate)

load_dotenv()
TOKEN = os.getenv('DISCORD_BOT_TOKEN')

if not TOKEN:
    print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞–π .env —Ñ–∞–π–ª —Å DISCORD_BOT_TOKEN")
    exit(1)

# üé® –î–ò–ó–ê–ô–ù
class Design:
    COLORS = {
        "primary": 0x5865F2, "success": 0x57F287, "warning": 0xFEE75C, 
        "danger": 0xED4245, "economy": 0xF1C40F, "music": 0x9B59B6,
        "moderation": 0xE74C3C, "shop": 0x9B59B6, "casino": 0xE67E22,
        "info": 0x3498DB, "premium": 0xFFD700, "roblox": 0xE74C3C,
        "discord": 0x5865F2, "tds": 0xF1C40F, "crypto": 0x16C60C,
        "event": 0x9B59B6, "credit": 0xE74C3C
    }

    @staticmethod
    def create_embed(title: str, description: str = "", color: str = "primary"):
        return discord.Embed(title=title, description=description, color=Design.COLORS.get(color, Design.COLORS["primary"]))

# üíæ –ü–û–õ–ù–û–¶–ï–ù–ù–ê–Ø –ë–ê–ó–ê –î–ê–ù–ù–´–•
class Database:
    def __init__(self):
        self.db_path = "data/bot.db"
        os.makedirs("data", exist_ok=True)
    
    async def init_db(self):
        async with aiosqlite.connect(self.db_path) as db:
            # –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await db.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    balance INTEGER DEFAULT 1000,
                    level INTEGER DEFAULT 1,
                    xp INTEGER DEFAULT 0,
                    daily_claimed TEXT,
                    work_cooldown TEXT,
                    created_at TEXT DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
            await db.execute('''
                CREATE TABLE IF NOT EXISTS inventory (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    item_id INTEGER,
                    item_name TEXT,
                    quantity INTEGER DEFAULT 1,
                    obtained_at TEXT DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_id) REFERENCES users (user_id)
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞
            await db.execute('''
                CREATE TABLE IF NOT EXISTS orders (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    category TEXT,
                    product_name TEXT,
                    quantity INTEGER,
                    price REAL,
                    details TEXT,
                    status TEXT DEFAULT '–æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã',
                    order_time TEXT DEFAULT CURRENT_TIMESTAMP,
                    admin_id INTEGER,
                    completion_time TEXT,
                    payment_screenshot TEXT,
                    FOREIGN KEY (user_id) REFERENCES users (user_id)
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤
            await db.execute('''
                CREATE TABLE IF NOT EXISTS user_credits (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    company TEXT,
                    amount INTEGER,
                    interest_rate INTEGER,
                    due_date TEXT,
                    original_amount INTEGER,
                    created_at TEXT DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_id) REFERENCES users (user_id)
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –º–∞–π–Ω–∏–Ω–≥ —Ñ–µ—Ä–º
            await db.execute('''
                CREATE TABLE IF NOT EXISTS mining_farms (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    level INTEGER DEFAULT 1,
                    last_collected TEXT,
                    created_at TEXT DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_id) REFERENCES users (user_id)
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await db.execute('''
                CREATE TABLE IF NOT EXISTS user_crypto (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    crypto_type TEXT,
                    amount REAL DEFAULT 0,
                    updated_at TEXT DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_id) REFERENCES users (user_id),
                    UNIQUE(user_id, crypto_type)
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –≤–∞—Ä–Ω–æ–≤
            await db.execute('''
                CREATE TABLE IF NOT EXISTS user_warns (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    moderator_id INTEGER,
                    reason TEXT,
                    created_at TEXT DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_id) REFERENCES users (user_id)
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –º—É—Ç–æ–≤
            await db.execute('''
                CREATE TABLE IF NOT EXISTS user_mutes (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    moderator_id INTEGER,
                    reason TEXT,
                    end_time TEXT,
                    created_at TEXT DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_id) REFERENCES users (user_id)
                )
            ''')
            
            await db.commit()
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    async def backup_database(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        backup_path = f"data/backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.db"
        import shutil
        shutil.copy2(self.db_path, backup_path)
        return backup_path

# üí∞ –≠–ö–û–ù–û–ú–ò–ö–ê
class EconomySystem:
    def __init__(self, db: Database):
        self.db = db

    async def get_balance(self, user_id: int):
        async with aiosqlite.connect(self.db.db_path) as db:
            async with db.execute('SELECT balance FROM users WHERE user_id = ?', (user_id,)) as cursor:
                result = await cursor.fetchone()
                if result:
                    return result[0]
                else:
                    await db.execute('INSERT INTO users (user_id, balance) VALUES (?, 1000)', (user_id,))
                    await db.commit()
                    return 1000
    
    async def update_balance(self, user_id: int, amount: int):
        async with aiosqlite.connect(self.db.db_path) as db:
            await db.execute('INSERT OR IGNORE INTO users (user_id, balance) VALUES (?, 1000)', (user_id,))
            await db.execute('UPDATE users SET balance = balance + ? WHERE user_id = ?', (amount, user_id))
            await db.commit()
            return await self.get_balance(user_id)
    
    async def get_user_data(self, user_id: int):
        async with aiosqlite.connect(self.db.db_path) as db:
            async with db.execute('SELECT balance, level, xp, daily_claimed, work_cooldown FROM users WHERE user_id = ?', (user_id,)) as cursor:
                result = await cursor.fetchone()
                if result:
                    return {
                        "balance": result[0], "level": result[1], "xp": result[2],
                        "daily_claimed": result[3], "work_cooldown": result[4]
                    }
                else:
                    await db.execute('INSERT INTO users (user_id) VALUES (?)', (user_id,))
                    await db.commit()
                    return {"balance": 1000, "level": 1, "xp": 0, "daily_claimed": None, "work_cooldown": None}
    
    async def add_xp(self, user_id: int, xp_gain: int):
        async with aiosqlite.connect(self.db.db_path) as db:
            await db.execute('INSERT OR IGNORE INTO users (user_id) VALUES (?)', (user_id,))
            await db.execute('UPDATE users SET xp = xp + ? WHERE user_id = ?', (xp_gain, user_id))
            
            async with db.execute('SELECT xp, level FROM users WHERE user_id = ?', (user_id,)) as cursor:
                user_data = await cursor.fetchone()
                if user_data:
                    xp, level = user_data
                    xp_needed = level * 100
                    if xp >= xp_needed:
                        await db.execute('UPDATE users SET level = level + 1, xp = xp - ? WHERE user_id = ?', (xp_needed, user_id))
                        level_up = True
                    else:
                        level_up = False
            await db.commit()
            return level_up

    async def reset_weekly_xp(self):
        async with aiosqlite.connect(self.db.db_path) as db:
            await db.execute('UPDATE users SET xp = 0 WHERE xp > 0')
            await db.commit()
    
    async def admin_add_money(self, user_id: int, amount: int):
        async with aiosqlite.connect(self.db.db_path) as db:
            await db.execute('INSERT OR IGNORE INTO users (user_id) VALUES (?)', (user_id,))
            await db.execute('UPDATE users SET balance = balance + ? WHERE user_id = ?', (amount, user_id))
            await db.commit()
            return await self.get_balance(user_id)
    
    async def admin_set_money(self, user_id: int, amount: int):
        async with aiosqlite.connect(self.db.db_path) as db:
            await db.execute('INSERT OR IGNORE INTO users (user_id) VALUES (?)', (user_id,))
            await db.execute('UPDATE users SET balance = ? WHERE user_id = ?', (amount, user_id))
            await db.commit()
            return await self.get_balance(user_id)
    
    async def admin_reset_cooldowns(self, user_id: int):
        async with aiosqlite.connect(self.db.db_path) as db:
            await db.execute('INSERT OR IGNORE INTO users (user_id) VALUES (?)', (user_id,))
            await db.execute('UPDATE users SET daily_claimed = NULL, work_cooldown = NULL WHERE user_id = ?', (user_id,))
            await db.commit()

# üè¶ –°–ò–°–¢–ï–ú–ê –ö–†–ï–î–ò–¢–û–í
class CreditSystem:
    def __init__(self, economy: EconomySystem, db: Database):
        self.economy = economy
        self.db = db
        self.companies = {
            "fast_money": {
                "name": "üöÄ –ë—ã—Å—Ç—Ä—ã–µ –î–µ–Ω—å–≥–∏",
                "min_amount": 1000,
                "max_amount": 5000,
                "interest_rate": 15,
                "term_days": 3,
                "penalty": "–ë–∞–Ω —ç–∫–æ–Ω–æ–º–∏–∫–∏ –Ω–∞ 2 –¥–Ω—è"
            },
            "reliable_credit": {
                "name": "üõ°Ô∏è –ù–∞–¥–µ–∂–Ω—ã–π –ö—Ä–µ–¥–∏—Ç",
                "min_amount": 5000,
                "max_amount": 15000,
                "interest_rate": 8,
                "term_days": 7,
                "penalty": "-50% —Ä–µ–ø—É—Ç–∞—Ü–∏–∏"
            },
            "premium_finance": {
                "name": "üíé –ü—Ä–µ–º–∏—É–º –§–∏–Ω–∞–Ω—Å",
                "min_amount": 15000,
                "max_amount": 30000,
                "interest_rate": 5,
                "term_days": 14,
                "penalty": "-100% —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ + –±–∞–Ω —ç–∫–æ–Ω–æ–º–∏–∫–∏"
            }
        }
    
    async def load_credits_from_db(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        async with aiosqlite.connect(self.db.db_path) as db:
            async with db.execute('SELECT user_id, company, amount, interest_rate, due_date, original_amount FROM user_credits') as cursor:
                rows = await cursor.fetchall()
                for row in rows:
                    user_id, company, amount, interest_rate, due_date, original_amount = row
                    user_credits[user_id] = {
                        "company": company,
                        "amount": amount,
                        "interest_rate": interest_rate,
                        "due_date": datetime.fromisoformat(due_date),
                        "original_amount": original_amount
                    }
    
    async def take_credit(self, user_id: int, company: str, amount: int):
        if user_id in user_credits:
            return False, "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫—Ä–µ–¥–∏—Ç"
        
        company_data = self.companies.get(company)
        if not company_data:
            return False, "–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        if amount < company_data["min_amount"] or amount > company_data["max_amount"]:
            return False, f"–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç {company_data['min_amount']} –¥–æ {company_data['max_amount']}"
        
        due_date = datetime.now() + timedelta(days=company_data["term_days"])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–º—è—Ç—å
        user_credits[user_id] = {
            "company": company,
            "amount": amount + (amount * company_data["interest_rate"] // 100),
            "interest_rate": company_data["interest_rate"],
            "due_date": due_date,
            "original_amount": amount
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        async with aiosqlite.connect(self.db.db_path) as db:
            await db.execute('''
                INSERT INTO user_credits (user_id, company, amount, interest_rate, due_date, original_amount)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (user_id, company, amount + (amount * company_data["interest_rate"] // 100), 
                  company_data["interest_rate"], due_date.isoformat(), amount))
            await db.commit()
        
        await self.economy.update_balance(user_id, amount)
        return True, f"–ö—Ä–µ–¥–∏—Ç –æ–¥–æ–±—Ä–µ–Ω! –í–µ—Ä–Ω—É—Ç—å {amount + (amount * company_data['interest_rate'] // 100)} –º–æ–Ω–µ—Ç –¥–æ {due_date.strftime('%d.%m.%Y')}"

    async def repay_credit(self, user_id: int):
        if user_id not in user_credits:
            return False, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤"
        
        credit = user_credits[user_id]
        total_to_repay = credit["amount"]
        
        balance = await self.economy.get_balance(user_id)
        if balance < total_to_repay:
            return False, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù—É–∂–Ω–æ: {total_to_repay} –º–æ–Ω–µ—Ç"
        
        await self.economy.update_balance(user_id, -total_to_repay)
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        async with aiosqlite.connect(self.db.db_path) as db:
            await db.execute('DELETE FROM user_credits WHERE user_id = ?', (user_id,))
            await db.commit()
        
        del user_credits[user_id]
        return True, f"–ö—Ä–µ–¥–∏—Ç –ø–æ–≥–∞—à–µ–Ω! –°—É–º–º–∞: {total_to_repay} –º–æ–Ω–µ—Ç"

# üé∞ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –ö–ê–ó–ò–ù–û –° –ú–ò–ù–ò–ú–ê–õ–¨–ù–û–ô –°–¢–ê–í–ö–û–ô 0
class CasinoSystem:
    def __init__(self, economy: EconomySystem):
        self.economy = economy
    
    async def play_slots(self, user_id: int, bet: int):
        if bet < 0:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 0
            return {"success": False, "error": "–°—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π!"}
        
        balance = await self.economy.get_balance(user_id)
        if balance < bet:
            return {"success": False, "error": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!"}
        
        symbols = ["üçí", "üçã", "üçä", "üçá", "üîî", "üíé", "7Ô∏è‚É£"]
        result = [random.choice(symbols) for _ in range(3)]
        
        await self.economy.update_balance(user_id, -bet)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∏–≥—Ä—ã—à–∞
        if result[0] == result[1] == result[2]:
            multiplier = 10
        elif result[0] == result[1] or result[1] == result[2]:
            multiplier = 3
        else:
            multiplier = 0
        
        win_amount = bet * multiplier
        if win_amount > 0:
            await self.economy.update_balance(user_id, win_amount)
        
        return {
            "success": True,
            "result": result,
            "multiplier": multiplier,
            "win_amount": win_amount
        }

# ‚õèÔ∏è –°–ò–°–¢–ï–ú–ê –ú–ê–ô–ù–ò–ù–ì–ê –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–•
class MiningSystem:
    def __init__(self, economy: EconomySystem, db: Database):
        self.economy = economy
        self.db = db
        self.farm_levels = {
            1: {"income": 10, "upgrade_cost": 1000},
            2: {"income": 25, "upgrade_cost": 5000},
            3: {"income": 50, "upgrade_cost": 15000}
        }
    
    async def load_farms_from_db(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–µ—Ä–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        async with aiosqlite.connect(self.db.db_path) as db:
            async with db.execute('SELECT user_id, level, last_collected FROM mining_farms') as cursor:
                rows = await cursor.fetchall()
                for row in rows:
                    user_id, level, last_collected = row
                    user_mining_farms[user_id] = {
                        "level": level,
                        "last_collected": last_collected,
                        "created_at": datetime.now().isoformat()
                    }
    
    async def create_farm(self, user_id: int):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–µ—Ä–º—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        async with aiosqlite.connect(self.db.db_path) as db:
            await db.execute('INSERT INTO mining_farms (user_id, level) VALUES (?, 1)', (user_id,))
            await db.commit()
        
        user_mining_farms[user_id] = {
            "level": 1,
            "last_collected": None,
            "created_at": datetime.now().isoformat()
        }
    
    async def collect_income(self, user_id: int):
        try:
            if user_id not in user_mining_farms:
                return False, "–£ –≤–∞—Å –Ω–µ—Ç —Ñ–µ—Ä–º—ã"
            
            farm = user_mining_farms[user_id]
            
            if farm.get("last_collected"):
                try:
                    last_collect = datetime.fromisoformat(farm["last_collected"])
                    time_passed = datetime.now() - last_collect
                    if time_passed.total_seconds() < 21600:
                        hours_left = 5 - int(time_passed.total_seconds() // 3600)
                        minutes_left = 59 - int((time_passed.total_seconds() % 3600) // 60)
                        return False, f"–î–æ—Ö–æ–¥ –º–æ–∂–Ω–æ —Å–æ–±–∏—Ä–∞—Ç—å —Ä–∞–∑ –≤ 6 —á–∞—Å–æ–≤! –û—Å—Ç–∞–ª–æ—Å—å: {hours_left}—á {minutes_left}–º"
                except ValueError:
                    farm["last_collected"] = None
            
            income = self.farm_levels[farm["level"]]["income"]
            await self.economy.update_balance(user_id, income)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            new_last_collected = datetime.now().isoformat()
            async with aiosqlite.connect(self.db.db_path) as db:
                await db.execute('UPDATE mining_farms SET last_collected = ? WHERE user_id = ?', (new_last_collected, user_id))
                await db.commit()
            
            user_mining_farms[user_id]["last_collected"] = new_last_collected
            
            return True, f"‚úÖ –°–æ–±—Ä–∞–Ω–æ {income} –º–æ–Ω–µ—Ç —Å —Ñ–µ—Ä–º—ã! –°–ª–µ–¥—É—é—â–∏–π —Å–±–æ—Ä —á–µ—Ä–µ–∑ 6 —á–∞—Å–æ–≤"
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–æ—Ö–æ–¥–∞: {e}")
            return False, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–æ—Ö–æ–¥–∞"

# üèóÔ∏è –ì–õ–ê–í–ù–´–ô –ë–û–¢ –° –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–û–ô
class MegaBot(commands.Bot):
    def __init__(self):
        intents = discord.Intents.all()
        super().__init__(command_prefix='!', intents=intents, help_command=None)
        
        self.db = Database()
        self.economy = EconomySystem(self.db)
        self.casino = CasinoSystem(self.economy)
        self.credit_system = CreditSystem(self.economy, self.db)
        self.mining_system = MiningSystem(self.economy, self.db)
        
        self.start_time = datetime.now()
    
    async def setup_hook(self):
        await self.db.init_db()
        await self.credit_system.load_credits_from_db()
        await self.mining_system.load_farms_from_db()
        
        try:
            synced = await self.tree.sync()
            print(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(synced)} –∫–æ–º–∞–Ω–¥")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        
        self.update_crypto_prices.start()
        self.check_credit_debts.start()
        self.random_events.start()

    @tasks.loop(minutes=30)
    async def update_crypto_prices(self):
        for crypto in crypto_prices:
            change = random.uniform(-0.1, 0.1)
            crypto_prices[crypto] = max(0.01, crypto_prices[crypto] * (1 + change))

    @tasks.loop(hours=24)
    async def check_credit_debts(self):
        current_time = datetime.now()
        for user_id, credit in list(user_credits.items()):
            if current_time > credit["due_date"]:
                company = credit["company"]
                penalty = self.credit_system.companies[company]["penalty"]
                
                if company == "fast_money":
                    await self.apply_economic_ban(user_id, days=2)
                elif company == "reliable_credit": 
                    balance = await self.economy.get_balance(user_id)
                    penalty_amount = balance // 2
                    await self.economy.update_balance(user_id, -penalty_amount)
                elif company == "premium_finance":
                    await self.economy.admin_set_money(user_id, 0)
                    await self.apply_economic_ban(user_id, days=7)
                
                # –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                async with aiosqlite.connect(self.db.db_path) as db:
                    await db.execute('DELETE FROM user_credits WHERE user_id = ?', (user_id,))
                    await db.commit()
                
                del user_credits[user_id]
                
                try:
                    user = await self.fetch_user(user_id)
                    embed = Design.create_embed(
                        "üíÄ –ü–†–û–°–†–û–ß–ö–ê –ö–†–ï–î–ò–¢–ê!",
                        f"**–ö–æ–º–ø–∞–Ω–∏—è:** {self.credit_system.companies[company]['name']}\n"
                        f"**–ù–∞–∫–∞–∑–∞–Ω–∏–µ:** {penalty}\n"
                        f"**–°—É–º–º–∞ –¥–æ–ª–≥–∞:** {credit['amount']} –º–æ–Ω–µ—Ç",
                        "danger"
                    )
                    await user.send(embed=embed)
                except:
                    pass

    async def apply_economic_ban(self, user_id: int, days: int):
        economic_ban_key = f"economic_ban_{user_id}"
        economic_bans[economic_ban_key] = {
            'end_time': datetime.now() + timedelta(days=days),
            'reason': '–ü—Ä–æ—Å—Ä–æ—á–∫–∞ –∫—Ä–µ–¥–∏—Ç–∞'
        }

    @tasks.loop(hours=3)
    async def random_events(self):
        if random.random() < 0.3 and not active_events:
            event_types = ["money_rain", "lucky_day", "work_bonus", "giveaway"]
            event_type = random.choice(event_types)
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∏–≤–µ–Ω—Ç–æ–≤

    async def reload_bot(self):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–∞"""
        try:
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
            synced = await self.tree.sync()
            print(f"‚ôªÔ∏è –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω! –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(synced)} –∫–æ–º–∞–Ω–¥")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            return False

bot = MegaBot()

# üîß –ö–û–ú–ê–ù–î–ê –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ò
@bot.tree.command(name="–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å", description="[–ê–î–ú–ò–ù] –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞")
@is_admin()
async def –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å(interaction: discord.Interaction):
    await interaction.response.defer(ephemeral=True)
    
    embed = Design.create_embed("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–∞", "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞...", "warning")
    await interaction.followup.send(embed=embed)
    
    success = await bot.reload_bot()
    
    if success:
        embed = Design.create_embed("‚úÖ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω!", "success")
    else:
        embed = Design.create_embed("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ", "danger")
    
    await interaction.followup.send(embed=embed, ephemeral=True)

# üí∞ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ö–û–ú–ê–ù–î–´ –≠–ö–û–ù–û–ú–ò–ö–ò –° –ú–ò–ù–ò–ú–ê–õ–¨–ù–û–ô –°–¢–ê–í–ö–û–ô 0
@bot.tree.command(name="—Å–ª–æ—Ç—ã", description="–ò–≥—Ä–∞—Ç—å –≤ —Å–ª–æ—Ç—ã")
@check_economic_ban()
async def —Å–ª–æ—Ç—ã(interaction: discord.Interaction, —Å—Ç–∞–≤–∫–∞: int = 0):
    if —Å—Ç–∞–≤–∫–∞ < 0:
        await interaction.response.send_message("‚ùå –°—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π!", ephemeral=True)
        return
    
    result = await bot.casino.play_slots(interaction.user.id, —Å—Ç–∞–≤–∫–∞)
    
    if not result["success"]:
        await interaction.response.send_message(f"‚ùå {result['error']}", ephemeral=True)
        return
    
    symbols = " | ".join(result["result"])
    
    if result["multiplier"] > 0:
        embed = Design.create_embed("üé∞ –í—ã–∏–≥—Ä—ã—à!", 
                                  f"**{symbols}**\n"
                                  f"–°—Ç–∞–≤–∫–∞: {—Å—Ç–∞–≤–∫–∞} –º–æ–Ω–µ—Ç\n"
                                  f"–ú–Ω–æ–∂–∏—Ç–µ–ª—å: x{result['multiplier']}\n"
                                  f"–í—ã–∏–≥—Ä—ã—à: {result['win_amount']} –º–æ–Ω–µ—Ç", "success")
    else:
        embed = Design.create_embed("üé∞ –ü—Ä–æ–∏–≥—Ä—ã—à", 
                                  f"**{symbols}**\n"
                                  f"–ü–æ—Ç–µ—Ä—è–Ω–æ: {—Å—Ç–∞–≤–∫–∞} –º–æ–Ω–µ—Ç", "danger")
    
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="–º–æ–Ω–µ—Ç–∫–∞", description="–ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É")
@check_economic_ban()
async def –º–æ–Ω–µ—Ç–∫–∞(interaction: discord.Interaction, —Å—Ç–∞–≤–∫–∞: int = 0, –≤—ã–±–æ—Ä: str = "–æ—Ä—ë–ª"):
    if —Å—Ç–∞–≤–∫–∞ < 0:
        await interaction.response.send_message("‚ùå –°—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π!", ephemeral=True)
        return
    
    if –≤—ã–±–æ—Ä not in ["–æ—Ä—ë–ª", "—Ä–µ—à–∫–∞"]:
        await interaction.response.send_message("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ '–æ—Ä—ë–ª' –∏–ª–∏ '—Ä–µ—à–∫–∞'!", ephemeral=True)
        return
    
    balance = await bot.economy.get_balance(interaction.user.id)
    if balance < —Å—Ç–∞–≤–∫–∞:
        await interaction.response.send_message("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!", ephemeral=True)
        return
    
    outcome = random.choice(["–æ—Ä—ë–ª", "—Ä–µ—à–∫–∞"])
    won = outcome == –≤—ã–±–æ—Ä
    
    if won:
        await bot.economy.update_balance(interaction.user.id, —Å—Ç–∞–≤–∫–∞)
        embed = Design.create_embed("ü™ô –ü–æ–±–µ–¥–∞!", 
                                  f"–í—ã–ø–∞–ª–æ: {outcome}\n"
                                  f"–í–∞—à –≤—ã–±–æ—Ä: {–≤—ã–±–æ—Ä}\n"
                                  f"–í—ã–∏–≥—Ä—ã—à: {—Å—Ç–∞–≤–∫–∞} –º–æ–Ω–µ—Ç", "success")
    else:
        await bot.economy.update_balance(interaction.user.id, -—Å—Ç–∞–≤–∫–∞)
        embed = Design.create_embed("ü™ô –ü—Ä–æ–∏–≥—Ä—ã—à", 
                                  f"–í—ã–ø–∞–ª–æ: {outcome}\n"
                                  f"–í–∞—à –≤—ã–±–æ—Ä: {–≤—ã–±–æ—Ä}\n"
                                  f"–ü–æ—Ç–µ—Ä—è–Ω–æ: {—Å—Ç–∞–≤–∫–∞} –º–æ–Ω–µ—Ç", "danger")
    
    await interaction.response.send_message(embed=embed)

# üõ°Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ö–û–ú–ê–ù–î–´ –ú–û–î–ï–†–ê–¶–ò–ò –° –ü–†–û–í–ï–†–ö–û–ô –ü–†–ê–í
@bot.tree.command(name="–ø—Ä–µ–¥", description="–í—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ (3 –ø—Ä–µ–¥ = –º—É—Ç –Ω–∞ 1 —á–∞—Å)")
@is_moderator()
async def –ø—Ä–µ–¥(interaction: discord.Interaction, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: discord.Member, –ø—Ä–∏—á–∏–Ω–∞: str = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        target_roles = [role.id for role in –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.roles]
        if any(role_id in MODERATION_ROLES for role_id in target_roles) or –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id in ADMIN_IDS:
            await interaction.response.send_message("‚ùå –ù–µ–ª—å–∑—è –≤—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!", ephemeral=True)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞—Ä–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        async with aiosqlite.connect(bot.db.db_path) as db:
            await db.execute('INSERT INTO user_warns (user_id, moderator_id, reason) VALUES (?, ?, ?)', 
                           (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id, interaction.user.id, –ø—Ä–∏—á–∏–Ω–∞))
            await db.commit()
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–Ω–æ–≤
            async with db.execute('SELECT COUNT(*) FROM user_warns WHERE user_id = ?', (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id,)) as cursor:
                warn_count = (await cursor.fetchone())[0]
        
        if warn_count >= 3:
            # –í—ã–¥–∞—á–∞ –º—É—Ç–∞ –∑–∞ 3 –≤–∞—Ä–Ω–∞
            mute_role = discord.utils.get(interaction.guild.roles, name="Muted")
            if not mute_role:
                mute_role = await interaction.guild.create_role(name="Muted")
                for channel in interaction.guild.channels:
                    await channel.set_permissions(mute_role, send_messages=False, speak=False)
            
            await –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.add_roles(mute_role)
            
            end_time = datetime.now() + timedelta(hours=1)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º—É—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await db.execute('INSERT INTO user_mutes (user_id, moderator_id, reason, end_time) VALUES (?, ?, ?, ?)',
                           (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id, interaction.user.id, "3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è", end_time.isoformat()))
            await db.commit()
            
            # –û—á–∏—â–∞–µ–º –≤–∞—Ä–Ω—ã
            await db.execute('DELETE FROM user_warns WHERE user_id = ?', (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id,))
            await db.commit()
            
            embed = Design.create_embed("‚ö†Ô∏è –ú–£–¢ –∑–∞ 3 –ø—Ä–µ–¥", 
                                      f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.mention}\n"
                                      f"**–ü—Ä–∏—á–∏–Ω–∞:** –ü–æ–ª—É—á–µ–Ω–æ 3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è\n"
                                      f"**–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** 1 —á–∞—Å\n"
                                      f"**–ü–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ:** {–ø—Ä–∏—á–∏–Ω–∞}", "danger")
        else:
            embed = Design.create_embed("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", 
                                      f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.mention}\n"
                                      f"**–ü—Ä–∏—á–∏–Ω–∞:** {–ø—Ä–∏—á–∏–Ω–∞}\n"
                                      f"**–¢–µ–∫—É—â–∏–µ –ø—Ä–µ–¥:** {warn_count}/3\n"
                                      f"**–°–ª–µ–¥—É—é—â–µ–µ –ø—Ä–µ–¥:** –º—É—Ç –Ω–∞ 1 —á–∞—Å", "warning")
        
        await interaction.response.send_message(embed=embed)
            
    except Exception as e:
        await interaction.response.send_message(f"‚ùå –û—à–∏–±–∫–∞: {e}", ephemeral=True)

@bot.tree.command(name="–º—É—Ç", description="–ó–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
@is_moderator()
async def –º—É—Ç(interaction: discord.Interaction, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: discord.Member, –≤—Ä–µ–º—è: str, –ø—Ä–∏—á–∏–Ω–∞: str = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        target_roles = [role.id for role in –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.roles]
        if any(role_id in MODERATION_ROLES for role_id in target_roles) or –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id in ADMIN_IDS:
            await interaction.response.send_message("‚ùå –ù–µ–ª—å–∑—è –∑–∞–º—É—Ç–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", ephemeral=True)
            return
        
        seconds = parse_time(–≤—Ä–µ–º—è)
        
        if seconds <= 0:
            await interaction.response.send_message("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: 1—Å, 5–º, 1—á, 2–¥, 1–Ω", ephemeral=True)
            return
        
        if seconds > 604800:
            await interaction.response.send_message("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –º—É—Ç–∞ - 1 –Ω–µ–¥–µ–ª—è", ephemeral=True)
            return
        
        mute_role = discord.utils.get(interaction.guild.roles, name="Muted")
        if not mute_role:
            mute_role = await interaction.guild.create_role(name="Muted")
            for channel in interaction.guild.channels:
                await channel.set_permissions(mute_role, send_messages=False, speak=False)
        
        await –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.add_roles(mute_role)
        
        end_time = datetime.now() + timedelta(seconds=seconds)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        async with aiosqlite.connect(bot.db.db_path) as db:
            await db.execute('INSERT INTO user_mutes (user_id, moderator_id, reason, end_time) VALUES (?, ?, ?, ?)',
                           (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id, interaction.user.id, –ø—Ä–∏—á–∏–Ω–∞, end_time.isoformat()))
            await db.commit()
        
        time_display = ""
        if seconds >= 604800:
            time_display = f"{seconds // 604800} –Ω–µ–¥–µ–ª—å"
        elif seconds >= 86400:
            time_display = f"{seconds // 86400} –¥–Ω–µ–π"
        elif seconds >= 3600:
            time_display = f"{seconds // 3600} —á–∞—Å–æ–≤"
        elif seconds >= 60:
            time_display = f"{seconds // 60} –º–∏–Ω—É—Ç"
        else:
            time_display = f"{seconds} —Å–µ–∫—É–Ω–¥"
        
        embed = Design.create_embed("‚úÖ –ú—É—Ç", 
                                  f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.mention}\n"
                                  f"**–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {time_display}\n"
                                  f"**–ü—Ä–∏—á–∏–Ω–∞:** {–ø—Ä–∏—á–∏–Ω–∞}", "success")
        await interaction.response.send_message(embed=embed)
        
    except Exception as e:
        await interaction.response.send_message(f"‚ùå –û—à–∏–±–∫–∞: {e}", ephemeral=True)

# üîß –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
def parse_time(time_str: str) -> int:
    time_units = {
        '—Å': 1, '—Å–µ–∫': 1, '—Å–µ–∫—É–Ω–¥': 1,
        '–º': 60, '–º–∏–Ω': 60, '–º–∏–Ω—É—Ç': 60, 
        '—á': 3600, '—á–∞—Å': 3600, '—á–∞—Å–æ–≤': 3600,
        '–¥': 86400, '–¥–µ–Ω—å': 86400, '–¥–Ω–µ–π': 86400,
        '–Ω': 604800, '–Ω–µ–¥–µ–ª—è': 604800, '–Ω–µ–¥–µ–ª—å': 604800
    }
    
    time_str = time_str.lower().replace(' ', '')
    num_str = ''
    unit_str = ''
    
    for char in time_str:
        if char.isdigit():
            num_str += char
        else:
            unit_str += char
    
    if not num_str:
        return 0
    
    number = int(num_str)
    unit = unit_str.lower()
    
    if unit in time_units:
        return number * time_units[unit]
    else:
        return 0

@bot.event
async def on_ready():
    print(f'‚úÖ –ë–æ—Ç {bot.user} –∑–∞–ø—É—â–µ–Ω!')
    print(f'üåê –°–µ—Ä–≤–µ—Ä–æ–≤: {len(bot.guilds)}')
    
    try:
        synced = await bot.tree.sync()
        print(f'‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(synced)} –∫–æ–º–∞–Ω–¥')
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}')
    
    # –ó–∞–ø—É—Å–∫ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞
    bot.loop.create_task(weekly_reset_task())

async def weekly_reset_task():
    await bot.wait_until_ready()
    while not bot.is_closed():
        now = datetime.now()
        next_monday = now + timedelta(days=(7 - now.weekday()))
        next_reset = datetime(next_monday.year, next_monday.month, next_monday.day, 0, 0, 0)
        wait_seconds = (next_reset - now).total_seconds()
        await asyncio.sleep(wait_seconds)
        await bot.economy.reset_weekly_xp()
        print("‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –æ–ø—ã—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω")

if __name__ == "__main__":
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        bot.run(TOKEN)
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
