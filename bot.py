import os
import discord
from discord import app_commands
from discord.ext import commands
from discord.ui import Button, View
import sqlite3
import json
import random
import asyncio
import datetime
import aiohttp
from typing import Dict, List, Optional

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway
BOT_TOKEN = os.environ.get('DISCORD_BOT_TOKEN')

if not BOT_TOKEN:
    print("–û—à–∏–±–∫–∞: DISCORD_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
intents = discord.Intents.all()
bot = commands.Bot(command_prefix='!', intents=intents, help_command=None)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DATABASE_FILE = 'economy.db'
LOG_CHANNEL_ID = 1422557295811887175
ADMIN_ROLES = ['Admin', 'Moderator']

# –≠–º–æ–¥–∑–∏ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
EMOJIS = {
    'coin': 'ü™ô',
    'daily': 'üìÖ',
    'case': 'üéÅ',
    'win': 'üéâ',
    'lose': 'üíÄ',
    'steal': 'ü¶π',
    'market': 'üè™',
    'quest': 'üó∫Ô∏è'
}

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite
class Database:
    def __init__(self):
        self.conn = sqlite3.connect(DATABASE_FILE, check_same_thread=False)
        self.create_tables()
    
    def create_tables(self):
        cursor = self.conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                balance INTEGER DEFAULT 100,
                daily_streak INTEGER DEFAULT 0,
                last_daily TEXT,
                inventory TEXT DEFAULT '{}',
                created_at TEXT DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS transactions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                type TEXT,
                amount INTEGER,
                target_user_id INTEGER,
                description TEXT,
                timestamp TEXT DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∫–µ–π—Å–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS cases (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT,
                price INTEGER,
                rewards TEXT,
                created_at TEXT DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –º–∞—Ä–∫–µ—Ç–∞
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS market (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                seller_id INTEGER,
                item_name TEXT,
                price INTEGER,
                created_at TEXT DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS achievements (
                user_id INTEGER,
                achievement_id TEXT,
                unlocked_at TEXT DEFAULT CURRENT_TIMESTAMP,
                PRIMARY KEY (user_id, achievement_id)
            )
        ''')
        
        self.conn.commit()
    
    def get_user(self, user_id):
        cursor = self.conn.cursor()
        cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
        user = cursor.fetchone()
        if not user:
            cursor.execute('INSERT INTO users (user_id, balance) VALUES (?, ?)', (user_id, 100))
            self.conn.commit()
            return self.get_user(user_id)
        return user
    
    def update_balance(self, user_id, amount):
        cursor = self.conn.cursor()
        cursor.execute('UPDATE users SET balance = balance + ? WHERE user_id = ?', (amount, user_id))
        self.conn.commit()
    
    def log_transaction(self, user_id, transaction_type, amount, target_user_id=None, description=""):
        cursor = self.conn.cursor()
        cursor.execute('''
            INSERT INTO transactions (user_id, type, amount, target_user_id, description)
            VALUES (?, ?, ?, ?, ?)
        ''', (user_id, transaction_type, amount, target_user_id, description))
        self.conn.commit()

db = Database()

# –°–∏—Å—Ç–µ–º–∞ –∫–µ–π—Å–æ–≤
CASES = {
    'small': {
        'name': 'üì¶ –ú–∞–ª—ã–π –∫–µ–π—Å',
        'price': 50,
        'rewards': [
            {'type': 'coins', 'amount': (20, 50), 'chance': 0.7},
            {'type': 'coins', 'amount': (51, 100), 'chance': 0.3}
        ]
    },
    'medium': {
        'name': 'üì¶ –°—Ä–µ–¥–Ω–∏–π –∫–µ–π—Å',
        'price': 150,
        'rewards': [
            {'type': 'coins', 'amount': (80, 150), 'chance': 0.6},
            {'type': 'coins', 'amount': (151, 300), 'chance': 0.3},
            {'type': 'role', 'name': '–í—Ä–µ–º–µ–Ω–Ω—ã–π VIP', 'duration': 24, 'chance': 0.1}
        ]
    },
    'large': {
        'name': 'üíé –ë–æ–ª—å—à–æ–π –∫–µ–π—Å',
        'price': 500,
        'rewards': [
            {'type': 'coins', 'amount': (300, 600), 'chance': 0.5},
            {'type': 'coins', 'amount': (601, 1000), 'chance': 0.3},
            {'type': 'custom_role', 'chance': 0.15},
            {'type': 'special_item', 'name': '–ó–æ–ª–æ—Ç–æ–π –∫–ª—é—á', 'chance': 0.05}
        ]
    },
    'elite': {
        'name': 'üëë –≠–ª–∏—Ç–Ω—ã–π –∫–µ–π—Å',
        'price': 1000,
        'rewards': [
            {'type': 'coins', 'amount': (800, 1500), 'chance': 0.4},
            {'type': 'custom_role', 'chance': 0.3},
            {'type': 'special_item', 'name': '–î—Ä–µ–≤–Ω–∏–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç', 'chance': 0.2},
            {'type': 'bonus', 'multiplier': 2.0, 'duration': 48, 'chance': 0.1}
        ]
    },
    'secret': {
        'name': 'üîÆ –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–µ–π—Å',
        'price': 2000,
        'rewards': [
            {'type': 'coins', 'amount': (1000, 5000), 'chance': 0.3},
            {'type': 'coins', 'amount': (-1000, -500), 'chance': 0.1},
            {'type': 'custom_role', 'chance': 0.2},
            {'type': 'special_item', 'name': '–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π –ø—Ä–µ–¥–º–µ—Ç', 'chance': 0.15},
            {'type': 'bonus', 'multiplier': 3.0, 'duration': 72, 'chance': 0.1},
            {'type': 'multiple', 'count': 3, 'chance': 0.15}
        ]
    }
}

class CaseView(View):
    def __init__(self, case_id, user_id):
        super().__init__(timeout=60)
        self.case_id = case_id
        self.user_id = user_id
        self.opened = False
    
    @discord.ui.button(label='–û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å', style=discord.ButtonStyle.primary, emoji='üéÅ')
    async def open_case(self, interaction: discord.Interaction, button: Button):
        if self.opened:
            return
        
        if interaction.user.id != self.user_id:
            await interaction.response.send_message("–≠—Ç–æ—Ç –∫–µ–π—Å –Ω–µ –¥–ª—è –≤–∞—Å!", ephemeral=True)
            return
        
        self.opened = True
        case = CASES[self.case_id]
        user_data = db.get_user(self.user_id)
        
        if user_data[1] < case['price']:
            await interaction.response.send_message("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!", ephemeral=True)
            return
        
        # –°–ø–∏–Ω –∞–Ω–∏–º–∞—Ü–∏—è
        embed = discord.Embed(title="üé∞ –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–∞...", color=0xffd700)
        await interaction.response.send_message(embed=embed)
        
        for i in range(3):
            await asyncio.sleep(1)
            embed.description = "üéÅ" * (i + 1)
            await interaction.edit_original_response(embed=embed)
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã
        reward = self.get_reward(case)
        db.update_balance(self.user_id, -case['price'])
        db.log_transaction(self.user_id, 'case_purchase', -case['price'], description=f"–ö–µ–π—Å: {case['name']}")
        
        # –í—ã–¥–∞—á–∞ –Ω–∞–≥—Ä–∞–¥—ã
        reward_text = await self.process_reward(interaction.user, reward, case)
        
        embed = discord.Embed(
            title=f"üéâ {case['name']} –æ—Ç–∫—Ä—ã—Ç!",
            description=reward_text,
            color=0x00ff00
        )
        embed.set_footer(text=f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {case['price']} {EMOJIS['coin']}")
        
        await interaction.edit_original_response(embed=embed)
    
    def get_reward(self, case):
        rand = random.random()
        cumulative = 0
        for reward in case['rewards']:
            cumulative += reward['chance']
            if rand <= cumulative:
                return reward
        return case['rewards'][-1]
    
    async def process_reward(self, user, reward, case):
        if reward['type'] == 'coins':
            amount = random.randint(*reward['amount'])
            db.update_balance(user.id, amount)
            db.log_transaction(user.id, 'case_reward', amount, description=f"–ù–∞–≥—Ä–∞–¥–∞ –∏–∑ {case['name']}")
            return f"–ú–æ–Ω–µ—Ç—ã: {amount} {EMOJIS['coin']}"
        
        elif reward['type'] == 'custom_role':
            await self.create_custom_role(user)
            return "üé≠ –ö–∞—Å—Ç–æ–º–Ω–∞—è —Ä–æ–ª—å!"
        
        elif reward['type'] == 'special_item':
            return f"üì¶ –û—Å–æ–±—ã–π –ø—Ä–µ–¥–º–µ—Ç: {reward['name']}"
        
        elif reward['type'] == 'bonus':
            return f"üöÄ –ë–æ–Ω—É—Å x{reward['multiplier']} –Ω–∞ {reward['duration']}—á"
        
        elif reward['type'] == 'multiple':
            rewards = []
            for _ in range(reward['count']):
                sub_reward = self.get_reward(case)
                rewards.append(await self.process_reward(user, sub_reward, case))
            return " + ".join(rewards)
        
        elif reward['type'] == 'role':
            return f"üëë –†–æ–ª—å: {reward['name']} –Ω–∞ {reward['duration']}—á"
        
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞"

    async def create_custom_role(self, user):
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫
            channel = bot.get_channel(LOG_CHANNEL_ID)
            if channel:
                embed = discord.Embed(
                    title="üé≠ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ä–æ–ª–∏",
                    description=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.mention} –≤—ã–∏–≥—Ä–∞–ª –∫–∞—Å—Ç–æ–º–Ω—É—é —Ä–æ–ª—å!",
                    color=0xff69b4,
                    timestamp=datetime.datetime.now()
                )
                embed.add_field(name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", value=f"{user.name}#{user.discriminator}")
                embed.add_field(name="ID", value=user.id)
                
                webhook = await channel.create_webhook(name="Role Creator")
                await webhook.send(embed=embed, username="Case System")
                await webhook.delete()
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–∏: {e}")

# –°–ª–µ—à-–∫–æ–º–∞–Ω–¥—ã
@bot.tree.command(name="balance", description="–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à –±–∞–ª–∞–Ω—Å")
@app_commands.describe(user="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —á–µ–π –±–∞–ª–∞–Ω—Å –ø–æ–∫–∞–∑–∞—Ç—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
async def balance(interaction: discord.Interaction, user: discord.Member = None):
    user = user or interaction.user
    user_data = db.get_user(user.id)
    
    embed = discord.Embed(
        title=f"{EMOJIS['coin']} –ë–∞–ª–∞–Ω—Å {user.display_name}",
        color=0xffd700
    )
    embed.add_field(name="–ë–∞–ª–∞–Ω—Å", value=f"{user_data[1]} {EMOJIS['coin']}", inline=True)
    embed.add_field(name="–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–µ—Ä–∏—è", value=f"{user_data[2]} –¥–Ω–µ–π", inline=True)
    embed.set_thumbnail(url=user.avatar.url if user.avatar else user.default_avatar.url)
    
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="daily", description="–ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É")
async def daily(interaction: discord.Interaction):
    user_data = db.get_user(interaction.user.id)
    last_daily = datetime.datetime.fromisoformat(user_data[3]) if user_data[3] else None
    now = datetime.datetime.now()
    
    if last_daily and (now - last_daily).days < 1:
        await interaction.response.send_message("–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É —Å–µ–≥–æ–¥–Ω—è!", ephemeral=True)
        return
    
    streak = user_data[2] + 1 if last_daily and (now - last_daily).days == 1 else 1
    reward = 100 + (streak * 10)
    
    db.update_balance(interaction.user.id, reward)
    cursor = db.conn.cursor()
    cursor.execute('UPDATE users SET daily_streak = ?, last_daily = ? WHERE user_id = ?', 
                   (streak, now.isoformat(), interaction.user.id))
    db.conn.commit()
    db.log_transaction(interaction.user.id, 'daily', reward)
    
    embed = discord.Embed(
        title=f"{EMOJIS['daily']} –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞",
        description=f"–ù–∞–≥—Ä–∞–¥–∞: {reward} {EMOJIS['coin']}\n–°–µ—Ä–∏—è: {streak} –¥–Ω–µ–π",
        color=0x00ff00
    )
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="pay", description="–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –º–æ–Ω–µ—Ç—ã –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
@app_commands.describe(user="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–º—É –ø–µ—Ä–µ–≤–æ–¥–∏–º", amount="–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞")
async def pay(interaction: discord.Interaction, user: discord.Member, amount: int):
    if amount <= 0:
        await interaction.response.send_message("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!", ephemeral=True)
        return
    
    if user.id == interaction.user.id:
        await interaction.response.send_message("–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µ!", ephemeral=True)
        return
    
    sender_data = db.get_user(interaction.user.id)
    if sender_data[1] < amount:
        await interaction.response.send_message("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!", ephemeral=True)
        return
    
    db.update_balance(interaction.user.id, -amount)
    db.update_balance(user.id, amount)
    db.log_transaction(interaction.user.id, 'transfer', -amount, user.id, f"–ü–µ—Ä–µ–≤–æ–¥ {user.name}")
    db.log_transaction(user.id, 'transfer', amount, interaction.user.id, f"–ü–æ–ª—É—á–µ–Ω–æ –æ—Ç {interaction.user.name}")
    
    embed = discord.Embed(
        title=f"{EMOJIS['coin']} –ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤",
        description=f"{interaction.user.mention} ‚Üí {user.mention}",
        color=0x00ff00
    )
    embed.add_field(name="–°—É–º–º–∞", value=f"{amount} {EMOJIS['coin']}")
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="cases", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–µ–π—Å–æ–≤")
async def cases_list(interaction: discord.Interaction):
    embed = discord.Embed(title="üéÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–µ–π—Å—ã", color=0xff69b4)
    
    for case_id, case in CASES.items():
        rewards_desc = "\n".join([f"‚Ä¢ {r['type']} ({r['chance']*100:.1f}%)" for r in case['rewards']])
        embed.add_field(
            name=f"{case['name']} - {case['price']} {EMOJIS['coin']}",
            value=rewards_desc,
            inline=False
        )
    
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="opencase", description="–û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å")
@app_commands.describe(case_type="–¢–∏–ø –∫–µ–π—Å–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è")
@app_commands.choices(case_type=[
    app_commands.Choice(name="üì¶ –ú–∞–ª—ã–π –∫–µ–π—Å", value="small"),
    app_commands.Choice(name="üì¶ –°—Ä–µ–¥–Ω–∏–π –∫–µ–π—Å", value="medium"),
    app_commands.Choice(name="üíé –ë–æ–ª—å—à–æ–π –∫–µ–π—Å", value="large"),
    app_commands.Choice(name="üëë –≠–ª–∏—Ç–Ω—ã–π –∫–µ–π—Å", value="elite"),
    app_commands.Choice(name="üîÆ –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–µ–π—Å", value="secret")
])
async def open_case(interaction: discord.Interaction, case_type: app_commands.Choice[str]):
    case = CASES[case_type.value]
    view = CaseView(case_type.value, interaction.user.id)
    
    embed = discord.Embed(
        title=f"üéÅ {case['name']}",
        description=f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {case['price']} {EMOJIS['coin']}",
        color=0xff69b4
    )
    
    await interaction.response.send_message(embed=embed, view=view)

@bot.tree.command(name="steal", description="–ü–æ–ø—ã—Ç–∞—Ç—å—Å—è —É–∫—Ä–∞—Å—Ç—å –º–æ–Ω–µ—Ç—ã —É –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
@app_commands.describe(user="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –∫—Ä–∞–¥–µ–º", amount="–°—É–º–º–∞ –¥–ª—è –∫—Ä–∞–∂–∏")
async def steal(interaction: discord.Interaction, user: discord.Member, amount: int):
    if user.id == interaction.user.id:
        await interaction.response.send_message("–ù–µ–ª—å–∑—è –∫—Ä–∞—Å—Ç—å —É —Å–µ–±—è!", ephemeral=True)
        return
    
    thief_data = db.get_user(interaction.user.id)
    target_data = db.get_user(user.id)
    
    if thief_data[1] < 10:
        await interaction.response.send_message("–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 10 –º–æ–Ω–µ—Ç –¥–ª—è –∫—Ä–∞–∂–∏!", ephemeral=True)
        return
    
    if target_data[1] < amount:
        await interaction.response.send_message("–£ —Ü–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!", ephemeral=True)
        return
    
    success_chance = 0.3
    if random.random() <= success_chance:
        db.update_balance(interaction.user.id, amount)
        db.update_balance(user.id, -amount)
        db.log_transaction(interaction.user.id, 'steal', amount, user.id, "–£—Å–ø–µ—à–Ω–∞—è –∫—Ä–∞–∂–∞")
        
        embed = discord.Embed(
            title=f"{EMOJIS['steal']} –£—Å–ø–µ—à–Ω–∞—è –∫—Ä–∞–∂–∞!",
            description=f"{interaction.user.mention} —É–∫—Ä–∞–ª {amount} {EMOJIS['coin']} —É {user.mention}!",
            color=0x00ff00
        )
    else:
        penalty = min(amount // 2, 100)
        db.update_balance(interaction.user.id, -penalty)
        db.log_transaction(interaction.user.id, 'steal_fail', -penalty, user.id, "–ù–µ—É–¥–∞—á–Ω–∞—è –∫—Ä–∞–∂–∞")
        
        embed = discord.Embed(
            title=f"{EMOJIS['lose']} –ö—Ä–∞–∂–∞ –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å!",
            description=f"{interaction.user.mention} –æ—à—Ç—Ä–∞—Ñ–æ–≤–∞–Ω –Ω–∞ {penalty} {EMOJIS['coin']}!",
            color=0xff0000
        )
    
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="roulette", description="–°—ã–≥—Ä–∞—Ç—å –≤ —Ä—É–ª–µ—Ç–∫—É")
@app_commands.describe(bet="–°—Ç–∞–≤–∫–∞ –≤ –º–æ–Ω–µ—Ç–∞—Ö")
async def roulette(interaction: discord.Interaction, bet: int):
    user_data = db.get_user(interaction.user.id)
    
    if user_data[1] < bet:
        await interaction.response.send_message("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!", ephemeral=True)
        return
    
    winning_number = random.randint(0, 36)
    user_number = random.randint(0, 36)
    
    if user_number == winning_number:
        multiplier = 35
        winnings = bet * multiplier
        db.update_balance(interaction.user.id, winnings)
        result = f"–ü–û–ë–ï–î–ê! x{multiplier}\n–í—ã–∏–≥—Ä—ã—à: {winnings} {EMOJIS['coin']}"
        color = 0x00ff00
    else:
        db.update_balance(interaction.user.id, -bet)
        result = f"–ü–†–û–ò–ì–†–´–®!\n–í—ã–ø–∞–ª–æ: {winning_number}, –í–∞—à–µ: {user_number}"
        color = 0xff0000
    
    embed = discord.Embed(
        title=f"üé∞ –†—É–ª–µ—Ç–∫–∞ - –°—Ç–∞–≤–∫–∞: {bet} {EMOJIS['coin']}",
        description=result,
        color=color
    )
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="leaderboard", description="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤")
@app_commands.describe(type="–¢–∏–ø –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞")
@app_commands.choices(type=[
    app_commands.Choice(name="–ë–∞–ª–∞–Ω—Å", value="balance"),
    app_commands.Choice(name="–ü–æ–±–µ–¥—ã", value="wins"),
    app_commands.Choice(name="–ö—Ä–∞–∂–∏", value="steals")
])
async def leaderboard(interaction: discord.Interaction, type: app_commands.Choice[str]):
    cursor = db.conn.cursor()
    
    if type.value == 'balance':
        cursor.execute('SELECT user_id, balance FROM users ORDER BY balance DESC LIMIT 10')
        title = "üèÜ –õ–∏–¥–µ—Ä—ã –ø–æ –±–∞–ª–∞–Ω—Å—É"
    else:
        await interaction.response.send_message("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: balance", ephemeral=True)
        return
    
    embed = discord.Embed(title=title, color=0xffd700)
    
    for i, (user_id, balance) in enumerate(cursor.fetchall(), 1):
        user = bot.get_user(user_id)
        name = user.name if user else f"User#{user_id}"
        embed.add_field(
            name=f"{i}. {name}",
            value=f"{balance} {EMOJIS['coin']}",
            inline=False
        )
    
    await interaction.response.send_message(embed=embed)

# –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã
@bot.tree.command(name="admin_addcoins", description="–î–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–∞–¥–º–∏–Ω)")
@app_commands.describe(user="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", amount="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç")
async def admin_addcoins(interaction: discord.Interaction, user: discord.Member, amount: int):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
    if not any(role.name in ADMIN_ROLES for role in interaction.user.roles):
        await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!", ephemeral=True)
        return
    
    db.update_balance(user.id, amount)
    db.log_transaction(interaction.user.id, 'admin_add', amount, user.id, f"–ê–¥–º–∏–Ω {interaction.user.name}")
    
    embed = discord.Embed(
        title="‚öôÔ∏è –ê–¥–º–∏–Ω –¥–µ–π—Å—Ç–≤–∏–µ",
        description=f"–í—ã–¥–∞–Ω–æ {amount} {EMOJIS['coin']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.mention}",
        color=0x00ff00
    )
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="admin_broadcast", description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º (–∞–¥–º–∏–Ω)")
@app_commands.describe(message="–¢–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
async def admin_broadcast(interaction: discord.Interaction, message: str):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
    if not any(role.name in ADMIN_ROLES for role in interaction.user.roles):
        await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!", ephemeral=True)
        return
    
    embed = discord.Embed(
        title="üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏",
        description=message,
        color=0xff69b4,
        timestamp=datetime.datetime.now()
    )
    
    await interaction.response.send_message("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è...", ephemeral=True)
    
    for guild in bot.guilds:
        for channel in guild.text_channels:
            if channel.permissions_for(guild.me).send_messages:
                try:
                    await channel.send(embed=embed)
                    break
                except:
                    continue

# –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
@bot.event
async def on_ready():
    print(f'–ë–æ—Ç {bot.user.name} –∑–∞–ø—É—â–µ–Ω!')
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–ª–µ—à-–∫–æ–º–∞–Ω–¥
    try:
        synced = await bot.tree.sync()
        print(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(synced)} –∫–æ–º–∞–Ω–¥")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥: {e}")
    
    await bot.change_presence(activity=discord.Game(name="–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫—É—é –∏–≥—Ä—É"))

if __name__ == "__main__":
    bot.run(BOT_TOKEN)
