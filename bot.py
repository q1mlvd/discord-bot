import discord
from discord.ext import commands, tasks
import os
import asyncio
import aiosqlite
from datetime import datetime, timedelta
import random
from typing import Optional
from dotenv import load_dotenv
import yt_dlp

# üîß –ö–û–ù–°–¢–ê–ù–¢–´ –°–ï–†–í–ï–†–ê
GUILD_ID = 993041244706066552
ADMIN_LOG_CHANNEL = 1419779743083003944
EVENTS_CHANNEL = 1418738569081786459
ECONOMY_CHANNEL = 1422641391682588734

# üõ°Ô∏è –°–ò–°–¢–ï–ú–ê –†–û–õ–ï–ô (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID)
ADMIN_ROLES = [1195144951546265675, 766767256742526996, 1078693283695448064, 1138140772097597472, 691904643181314078]
MODERATOR_ROLES = [1167093102868172911, 1360243534946373672, 993043931342319636, 1338611327022923910, 1338609155203661915, 1365798715930968244, 1188261847850299514]

# üí∞ –ì–õ–û–ë–ê–õ–¨–ù–´–ï –°–ò–°–¢–ï–ú–´
user_warns = {}
mute_data = {}
user_credits = {}
user_mining_farms = {}
user_crypto = {}
rob_cooldowns = {}
economic_bans = {}
active_events = {}
server_tax_pool = 0

crypto_prices = {"BITCOIN": 50000, "ETHEREUM": 3000, "DOGECOIN": 0.15}

# üé® –î–ò–ó–ê–ô–ù
class Design:
    COLORS = {
        "primary": 0x5865F2, "success": 0x57F287, "warning": 0xFEE75C, 
        "danger": 0xED4245, "economy": 0xF1C40F, "music": 0x9B59B6,
        "moderation": 0xE74C3C, "shop": 0x9B59B6, "casino": 0xE67E22,
        "info": 0x3498DB, "premium": 0xFFD700, "roblox": 0xE74C3C,
        "discord": 0x5865F2, "tds": 0xF1C40F, "crypto": 0x16C60C,
        "event": 0x9B59B6, "credit": 0xE74C3C
    }

    @staticmethod
    def create_embed(title: str, description: str = "", color: str = "primary"):
        return discord.Embed(title=title, description=description, color=Design.COLORS.get(color, Design.COLORS["primary"]))

# üõ°Ô∏è –°–ò–°–¢–ï–ú–ê –ü–†–ê–í
def is_admin():
    async def predicate(interaction: discord.Interaction):
        if interaction.guild.id != GUILD_ID:
            return False
        user_roles = [role.id for role in interaction.user.roles]
        return any(role in ADMIN_ROLES for role in user_roles)
    return commands.check(predicate)

def is_moderator():
    async def predicate(interaction: discord.Interaction):
        if interaction.guild.id != GUILD_ID:
            return False
        user_roles = [role.id for role in interaction.user.roles]
        return any(role in MODERATOR_ROLES + ADMIN_ROLES for role in user_roles)
    return commands.check(predicate)

def is_user():
    async def predicate(interaction: discord.Interaction):
        return interaction.guild.id == GUILD_ID
    return commands.check(predicate)

def check_economic_ban():
    async def predicate(interaction: discord.Interaction):
        ban_key = f"economic_ban_{interaction.user.id}"
        if ban_key in economic_bans:
            ban_info = economic_bans[ban_key]
            if datetime.now() < ban_info['end_time']:
                time_left = ban_info['end_time'] - datetime.now()
                hours_left = int(time_left.total_seconds() // 3600)
                await interaction.response.send_message(
                    f"üö´ –í–∞—à–∞ —ç–∫–æ–Ω–æ–º–∏–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É –∫—Ä–µ–¥–∏—Ç–∞!\n"
                    f"‚è≥ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —á–µ—Ä–µ–∑: {hours_left} —á–∞—Å–æ–≤",
                    ephemeral=True
                )
                return False
            else:
                del economic_bans[ban_key]
        return True
    return commands.check(predicate)

# üíæ –ë–ê–ó–ê –î–ê–ù–ù–´–•
class Database:
    def __init__(self):
        self.db_path = "data/bot.db"
        os.makedirs("data", exist_ok=True)
    
    async def init_db(self):
        async with aiosqlite.connect(self.db_path) as db:
            await db.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    balance INTEGER DEFAULT 1000,
                    level INTEGER DEFAULT 1,
                    xp INTEGER DEFAULT 0,
                    daily_claimed TEXT,
                    work_cooldown TEXT
                )
            ''')
            await db.execute('''
                CREATE TABLE IF NOT EXISTS inventory (
                    user_id INTEGER,
                    item_id INTEGER,
                    quantity INTEGER DEFAULT 1,
                    PRIMARY KEY (user_id, item_id)
                )
            ''')
            await db.execute('''
                CREATE TABLE IF NOT EXISTS user_credits (
                    user_id INTEGER,
                    company TEXT,
                    amount INTEGER,
                    interest_rate INTEGER,
                    due_date TEXT,
                    PRIMARY KEY (user_id)
                )
            ''')
            await db.execute('''
                CREATE TABLE IF NOT EXISTS mining_farms (
                    user_id INTEGER,
                    level INTEGER DEFAULT 1,
                    last_collected TEXT,
                    created_at TEXT,
                    PRIMARY KEY (user_id)
                )
            ''')
            await db.commit()
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

# üí∞ –≠–ö–û–ù–û–ú–ò–ö–ê
class EconomySystem:
    def __init__(self, db: Database):
        self.db = db

    async def get_balance(self, user_id: int):
        async with aiosqlite.connect(self.db.db_path) as db:
            async with db.execute('SELECT balance FROM users WHERE user_id = ?', (user_id,)) as cursor:
                result = await cursor.fetchone()
                if result:
                    return result[0]
                else:
                    await db.execute('INSERT INTO users (user_id) VALUES (?)', (user_id,))
                    await db.commit()
                    return 1000
    
    async def update_balance(self, user_id: int, amount: int):
        async with aiosqlite.connect(self.db.db_path) as db:
            await db.execute('INSERT OR IGNORE INTO users (user_id) VALUES (?)', (user_id,))
            await db.execute('UPDATE users SET balance = balance + ? WHERE user_id = ?', (amount, user_id))
            await db.commit()
            return await self.get_balance(user_id)
    
    async def get_user_data(self, user_id: int):
        async with aiosqlite.connect(self.db.db_path) as db:
            async with db.execute('SELECT balance, level, xp, daily_claimed, work_cooldown FROM users WHERE user_id = ?', (user_id,)) as cursor:
                result = await cursor.fetchone()
                if result:
                    return {
                        "balance": result[0], "level": result[1], "xp": result[2],
                        "daily_claimed": result[3], "work_cooldown": result[4]
                    }
                else:
                    await db.execute('INSERT INTO users (user_id) VALUES (?)', (user_id,))
                    await db.commit()
                    return {"balance": 1000, "level": 1, "xp": 0, "daily_claimed": None, "work_cooldown": None}

# üé∞ –ö–ê–ó–ò–ù–û
class CasinoSystem:
    def __init__(self, economy: EconomySystem):
        self.economy = economy
    
    async def play_slots(self, user_id: int, bet: int):
        if bet < 0:
            return {"success": False, "error": "–°—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π!"}
        
        balance = await self.economy.get_balance(user_id)
        if balance < bet:
            return {"success": False, "error": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!"}
        
        symbols = ["üçí", "üçã", "üçä", "üçá", "üîî", "üíé", "7Ô∏è‚É£"]
        result = [random.choice(symbols) for _ in range(3)]
        
        await self.economy.update_balance(user_id, -bet)
        
        if result[0] == result[1] == result[2]:
            multiplier = 10
        elif result[0] == result[1] or result[1] == result[2]:
            multiplier = 3
        else:
            multiplier = 0
        
        win_amount = bet * multiplier
        if win_amount > 0:
            await self.economy.update_balance(user_id, win_amount)
        
        return {
            "success": True,
            "result": result,
            "multiplier": multiplier,
            "win_amount": win_amount
        }

# üèóÔ∏è –ì–õ–ê–í–ù–´–ô –ë–û–¢
class MegaBot(commands.Bot):
    def __init__(self):
        intents = discord.Intents.all()
        super().__init__(command_prefix='!', intents=intents, help_command=None)
        
        self.db = Database()
        self.economy = EconomySystem(self.db)
        self.casino = CasinoSystem(self.economy)
        
    async def setup_hook(self):
        await self.db.init_db()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        await self.load_extension('commands.user_commands')
        await self.load_extension('commands.mod_commands')
        await self.load_extension('commands.admin_commands')
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–ª—è —Ç–≤–æ–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
        guild = discord.Object(id=GUILD_ID)
        self.tree.copy_global_to(guild=guild)
        await self.tree.sync(guild=guild)
        
        print(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ {GUILD_ID}")

bot = MegaBot()

# üî• –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ –î–õ–Ø –í–°–ï–• –£–ß–ê–°–¢–ù–ò–ö–û–í
@bot.tree.command(name="–±–∞–ª–∞–Ω—Å", description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å")
@is_user()
async def –±–∞–ª–∞–Ω—Å(interaction: discord.Interaction, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: Optional[discord.Member] = None):
    user = –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å or interaction.user
    balance = await bot.economy.get_balance(user.id)
    embed = Design.create_embed("üí∞ –ë–∞–ª–∞–Ω—Å", f"**{user.display_name}**\n–ë–∞–ª–∞–Ω—Å: `{balance:,} –º–æ–Ω–µ—Ç`", "economy")
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="–µ–∂–µ–¥–Ω–µ–≤–Ω–æ", description="–ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É")
@is_user()
@check_economic_ban()
async def –µ–∂–µ–¥–Ω–µ–≤–Ω–æ(interaction: discord.Interaction):
    user_data = await bot.economy.get_user_data(interaction.user.id)
    
    if user_data["daily_claimed"]:
        last_claim = datetime.fromisoformat(user_data["daily_claimed"])
        if (datetime.now() - last_claim).days < 1:
            embed = Design.create_embed("‚è≥ –£–∂–µ –ø–æ–ª—É—á–∞–ª–∏!", "–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞", "warning")
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return
    
    reward = random.randint(100, 500)
    new_balance = await bot.economy.update_balance(interaction.user.id, reward)
    
    async with aiosqlite.connect(bot.db.db_path) as db:
        await db.execute('UPDATE users SET daily_claimed = ? WHERE user_id = ?', (datetime.now().isoformat(), interaction.user.id))
        await db.commit()
    
    embed = Design.create_embed("üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞", f"**+{reward} –º–æ–Ω–µ—Ç!**\n–ë–∞–ª–∞–Ω—Å: `{new_balance:,} –º–æ–Ω–µ—Ç`", "success")
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="—Ä–∞–±–æ—Ç–∞", description="–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–Ω—å–≥–∏")
@is_user()
@check_economic_ban()
async def —Ä–∞–±–æ—Ç–∞(interaction: discord.Interaction):
    user_data = await bot.economy.get_user_data(interaction.user.id)
    
    if user_data["work_cooldown"]:
        last_work = datetime.fromisoformat(user_data["work_cooldown"])
        if (datetime.now() - last_work).seconds < 600:
            embed = Design.create_embed("‚è≥ –û—Ç–¥–æ—Ö–Ω–∏—Ç–µ!", "–ü–æ–¥–æ–∂–¥–∏—Ç–µ 10 –º–∏–Ω—É—Ç", "warning")
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return
    
    earnings = random.randint(50, 200)
    new_balance = await bot.economy.update_balance(interaction.user.id, earnings)
    
    async with aiosqlite.connect(bot.db.db_path) as db:
        await db.execute('UPDATE users SET work_cooldown = ? WHERE user_id = ?', (datetime.now().isoformat(), interaction.user.id))
        await db.commit()
    
    embed = Design.create_embed("üíº –†–∞–±–æ—Ç–∞", f"**–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:** +{earnings} –º–æ–Ω–µ—Ç\n**–ë–∞–ª–∞–Ω—Å:** {new_balance:,} –º–æ–Ω–µ—Ç", "success")
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="–ø–µ—Ä–µ–¥–∞—Ç—å", description="–ü–µ—Ä–µ–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏")
@is_user()
@check_economic_ban()
async def –ø–µ—Ä–µ–¥–∞—Ç—å(interaction: discord.Interaction, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: discord.Member, —Å—É–º–º–∞: int):
    if —Å—É–º–º–∞ <= 0:
        await interaction.response.send_message("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!", ephemeral=True)
        return
    
    if –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id == interaction.user.id:
        await interaction.response.send_message("‚ùå –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–¥–∞—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µ!", ephemeral=True)
        return
    
    from_balance = await bot.economy.get_balance(interaction.user.id)
    if from_balance < —Å—É–º–º–∞:
        await interaction.response.send_message("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!", ephemeral=True)
        return
    
    tax = —Å—É–º–º–∞ * 0.05
    net_amount = —Å—É–º–º–∞ - tax
    global server_tax_pool
    server_tax_pool += tax
    
    await bot.economy.update_balance(interaction.user.id, -—Å—É–º–º–∞)
    await bot.economy.update_balance(–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id, net_amount)
    
    embed = Design.create_embed("‚úÖ –ü–µ—Ä–µ–≤–æ–¥", 
                              f"**–û—Ç:** {interaction.user.mention}\n"
                              f"**–ö–æ–º—É:** {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.mention}\n"
                              f"**–°—É–º–º–∞:** {—Å—É–º–º–∞} –º–æ–Ω–µ—Ç\n"
                              f"**–ù–∞–ª–æ–≥ (5%):** {tax} –º–æ–Ω–µ—Ç\n"
                              f"**–ü–æ–ª—É—á–µ–Ω–æ:** {net_amount} –º–æ–Ω–µ—Ç", "success")
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="—Å–ª–æ—Ç—ã", description="–ò–≥—Ä–∞—Ç—å –≤ —Å–ª–æ—Ç—ã")
@is_user()
@check_economic_ban()
async def —Å–ª–æ—Ç—ã(interaction: discord.Interaction, —Å—Ç–∞–≤–∫–∞: int = 0):
    if —Å—Ç–∞–≤–∫–∞ < 0:
        await interaction.response.send_message("‚ùå –°—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π!", ephemeral=True)
        return
    
    result = await bot.casino.play_slots(interaction.user.id, —Å—Ç–∞–≤–∫–∞)
    
    if not result["success"]:
        await interaction.response.send_message(f"‚ùå {result['error']}", ephemeral=True)
        return
    
    symbols = " | ".join(result["result"])
    
    if result["multiplier"] > 0:
        embed = Design.create_embed("üé∞ –í—ã–∏–≥—Ä—ã—à!", 
                                  f"**{symbols}**\n"
                                  f"–°—Ç–∞–≤–∫–∞: {—Å—Ç–∞–≤–∫–∞} –º–æ–Ω–µ—Ç\n"
                                  f"–ú–Ω–æ–∂–∏—Ç–µ–ª—å: x{result['multiplier']}\n"
                                  f"–í—ã–∏–≥—Ä—ã—à: {result['win_amount']} –º–æ–Ω–µ—Ç", "success")
    else:
        embed = Design.create_embed("üé∞ –ü—Ä–æ–∏–≥—Ä—ã—à", 
                                  f"**{symbols}**\n"
                                  f"–ü–æ—Ç–µ—Ä—è–Ω–æ: {—Å—Ç–∞–≤–∫–∞} –º–æ–Ω–µ—Ç", "danger")
    
    await interaction.response.send_message(embed=embed)

# üîß –ö–û–ú–ê–ù–î–´ –ú–û–î–ï–†–ê–¶–ò–ò
@bot.tree.command(name="–ø—Ä–µ–¥", description="–í—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ")
@is_moderator()
async def –ø—Ä–µ–¥(interaction: discord.Interaction, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: discord.Member, –ø—Ä–∏—á–∏–Ω–∞: str = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"):
    try:
        target_roles = [role.id for role in –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.roles]
        if any(role in MODERATOR_ROLES + ADMIN_ROLES for role in target_roles):
            await interaction.response.send_message("‚ùå –ù–µ–ª—å–∑—è –≤—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!", ephemeral=True)
            return
        
        if –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id not in user_warns:
            user_warns[–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id] = 0
        
        user_warns[–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id] += 1
        current_warns = user_warns[–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id]
        
        embed = Design.create_embed("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", 
                                  f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.mention}\n"
                                  f"**–ü—Ä–∏—á–∏–Ω–∞:** {–ø—Ä–∏—á–∏–Ω–∞}\n"
                                  f"**–¢–µ–∫—É—â–∏–µ –ø—Ä–µ–¥:** {current_warns}/3", "warning")
        await interaction.response.send_message(embed=embed)
            
    except Exception as e:
        await interaction.response.send_message(f"‚ùå –û—à–∏–±–∫–∞: {e}", ephemeral=True)

@bot.tree.command(name="—Å–Ω—è—Ç—å_–ø—Ä–µ–¥", description="–°–Ω—è—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ")
@is_moderator()
async def —Å–Ω—è—Ç—å_–ø—Ä–µ–¥(interaction: discord.Interaction, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: discord.Member, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: int = 1):
    try:
        target_roles = [role.id for role in –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.roles]
        if any(role in MODERATOR_ROLES + ADMIN_ROLES for role in target_roles):
            await interaction.response.send_message("‚ùå –ù–µ–ª—å–∑—è —Å–Ω—è—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", ephemeral=True)
            return
        
        if –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id not in user_warns or user_warns[–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id] <= 0:
            await interaction.response.send_message("‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π!", ephemeral=True)
            return
        
        if –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ <= 0:
            await interaction.response.send_message("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º!", ephemeral=True)
            return
        
        current_warns = user_warns[–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id]
        new_warns = max(0, current_warns - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
        user_warns[–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id] = new_warns
        
        embed = Design.create_embed("‚úÖ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Å–Ω—è—Ç–æ", 
                                  f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.mention}\n"
                                  f"**–°–Ω—è—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π:** {min(–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, current_warns)}\n"
                                  f"**–¢–µ–∫—É—â–∏–µ –ø—Ä–µ–¥:** {new_warns}/3", "success")
        await interaction.response.send_message(embed=embed)
        
    except Exception as e:
        await interaction.response.send_message(f"‚ùå –û—à–∏–±–∫–∞: {e}", ephemeral=True)

# üëë –ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–´
@bot.tree.command(name="–≤—ã–¥–∞—Ç—å", description="–í—ã–¥–∞—Ç—å –º–æ–Ω–µ—Ç—ã")
@is_admin()
async def –≤—ã–¥–∞—Ç—å(interaction: discord.Interaction, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: discord.Member, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: int):
    if –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ <= 0:
        await interaction.response.send_message("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º!", ephemeral=True)
        return
    
    new_balance = await bot.economy.update_balance(–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
    
    embed = Design.create_embed("üí∞ –î–µ–Ω—å–≥–∏ –≤—ã–¥–∞–Ω—ã", 
                              f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.mention}\n"
                              f"**–í—ã–¥–∞–Ω–æ:** {–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:,} –º–æ–Ω–µ—Ç\n"
                              f"**–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:** {new_balance:,} –º–æ–Ω–µ—Ç", "success")
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å", description="–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞")
@is_admin()
async def –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å(interaction: discord.Interaction):
    await interaction.response.defer(ephemeral=True)
    
    try:
        await bot.tree.sync(guild=discord.Object(id=GUILD_ID))
        embed = Design.create_embed("‚úÖ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω!", "success")
    except Exception as e:
        embed = Design.create_embed("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", "danger")
    
    await interaction.followup.send(embed=embed, ephemeral=True)

@bot.event
async def on_ready():
    print(f'‚úÖ –ë–æ—Ç {bot.user} –∑–∞–ø—É—â–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {GUILD_ID}!')
    print(f'üåê –°–µ—Ä–≤–µ—Ä–æ–≤: {len(bot.guilds)}')
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω-–∫–∞–Ω–∞–ª
    try:
        channel = bot.get_channel(ADMIN_LOG_CHANNEL)
        if channel:
            embed = Design.create_embed("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω", f"**–í—Ä–µ–º—è:** {datetime.now().strftime('%d.%m.%Y %H:%M')}\n**–°—Ç–∞—Ç—É—Å:** ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω", "success")
            await channel.send(embed=embed)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∞–¥–º–∏–Ω-–∫–∞–Ω–∞–ª: {e}")

@bot.event
async def on_message(message):
    if message.author.bot:
        return
    
    if message.guild and message.guild.id == GUILD_ID:
        async with aiosqlite.connect(bot.db.db_path) as db:
            await db.execute('INSERT OR IGNORE INTO users (user_id) VALUES (?)', (message.author.id,))
            await db.commit()
    
    await bot.process_commands(message)

if __name__ == "__main__":
    load_dotenv()
    TOKEN = os.getenv('DISCORD_TOKEN')
    
    if not TOKEN:
        print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å DISCORD_TOKEN –≤ .env")
        exit(1)
    
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫ –º–µ–≥–∞-–±–æ—Ç–∞...")
        bot.run(TOKEN)
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
