import discord
from discord.ext import commands, tasks
import aiosqlite
import asyncio
from datetime import datetime, timedelta
import os
import random
from typing import Optional
from dotenv import load_dotenv
import yt_dlp
import aiohttp
import json

# üîß –ö–û–ù–°–¢–ê–ù–¢–´
ADMIN_IDS = [1195144951546265675, 766767256742526996, 1078693283695448064, 1138140772097597472, 691904643181314078]
MODERATION_ROLES = [1167093102868172911, 1360243534946373672, 993043931342319636, 1338611327022923910, 1338609155203661915, 1365798715930968244, 1188261847850299514]
THREADS_CHANNEL_ID = 1422557295811887175
EVENTS_CHANNEL_ID = 1418738569081786459
ECONOMY_CHANNEL_ID = 1422641391682588734
ADMIN_LOG_CHANNEL = 1419779743083003944

# üõ°Ô∏è –î–ê–ù–ù–´–ï –î–õ–Ø –°–ò–°–¢–ï–ú
user_warns = {}
mute_data = {}
user_credits = {}
user_investments = {}
user_insurance = {}
user_lottery_tickets = {}
server_tax_pool = 0
user_mining_farms = {}
crypto_prices = {"BITCOIN": 50000, "ETHEREUM": 3000, "DOGECOIN": 0.15}
active_events = {}
user_reports = {}
user_crypto = {}
rob_cooldowns = {}
economic_bans = {}
user_stats = {}
clans = {}
active_duels = {}
quests = {}

load_dotenv()
TOKEN = os.getenv('DISCORD_TOKEN')

class MegaBot(commands.Bot):
    def __init__(self):
        intents = discord.Intents.all()
        super().__init__(command_prefix='!', intents=intents, help_command=None)
        
    async def setup_hook(self):
        await self.load_extension('commands.user_commands')
        await self.load_extension('commands.mod_commands')
        await self.load_extension('commands.admin_commands')
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        self.update_crypto_prices.start()
        self.check_duels.start()
        
        print("‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")

bot = MegaBot()

# üé® –î–ò–ó–ê–ô–ù
class Design:
    COLORS = {
        "primary": 0x5865F2, "success": 0x57F287, "warning": 0xFEE75C, 
        "danger": 0xED4245, "economy": 0xF1C40F, "music": 0x9B59B6,
        "moderation": 0xE74C3C, "crypto": 0x16C60C, "event": 0x9B59B6
    }

    @staticmethod
    def create_embed(title: str, description: str = "", color: str = "primary"):
        embed = discord.Embed(title=title, description=description, color=Design.COLORS.get(color, Design.COLORS["primary"]))
        embed.set_footer(text="üíé Mega Economy Bot")
        return embed

# üîß –°–ò–°–¢–ï–ú–ê –ü–†–ê–í
def is_admin():
    async def predicate(interaction: discord.Interaction):
        return interaction.user.id in ADMIN_IDS
    return commands.check(predicate)

def is_moderator():
    async def predicate(interaction: discord.Interaction):
        user_roles = [role.id for role in interaction.user.roles]
        return any(role_id in MODERATION_ROLES for role_id in user_roles)
    return commands.check(predicate)

# üéµ –ú–£–ó–´–ö–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê
class MusicSystem:
    def __init__(self):
        self.queues = {}
    
    async def play(self, interaction: discord.Interaction, query: str):
        if not interaction.user.voice:
            await interaction.response.send_message("‚ùå –ó–∞–π–¥–∏ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª!", ephemeral=True)
            return
        
        embed = Design.create_embed("üéµ –ú—É–∑—ã–∫–∞", f"**–î–æ–±–∞–≤–ª–µ–Ω–æ:** {query}\n–ò—Å–ø–æ–ª—å–∑—É–π `/stop` –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏", "music")
        await interaction.response.send_message(embed=embed)

music_system = MusicSystem()

# ‚Çø –ö–†–ò–ü–¢–û-–°–ò–°–¢–ï–ú–ê
class CryptoSystem:
    def __init__(self):
        self.real_prices = {}
    
    async def get_real_prices(self):
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get('https://api.binance.com/api/v3/ticker/price') as resp:
                    data = await resp.json()
                    for item in data:
                        if item['symbol'] == 'BTCUSDT':
                            crypto_prices["BITCOIN"] = float(item['price'])
                        elif item['symbol'] == 'ETHUSDT':
                            crypto_prices["ETHEREUM"] = float(item['price'])
        except:
            pass

crypto_system = CryptoSystem()

# üë• –°–ò–°–¢–ï–ú–ê –ö–õ–ê–ù–û–í
class ClanSystem:
    async def create_clan(self, user_id: int, name: str):
        clan_id = len(clans) + 1
        clans[clan_id] = {
            'name': name,
            'leader': user_id,
            'members': [user_id],
            'treasury': 0,
            'level': 1
        }
        return True, f"‚úÖ –ö–ª–∞–Ω '{name}' —Å–æ–∑–¥–∞–Ω!"

clan_system = ClanSystem()

# ‚öîÔ∏è PvP –°–ò–°–¢–ï–ú–ê
class PvPSystem:
    async def start_duel(self, challenger: int, target: int, bet: int):
        duel_id = f"{challenger}_{target}_{datetime.now().timestamp()}"
        active_duels[duel_id] = {
            'challenger': challenger,
            'target': target,
            'bet': bet,
            'time': datetime.now()
        }
        return True, duel_id

pvp_system = PvPSystem()

# üîÑ –§–û–ù–û–í–´–ï –ó–ê–î–ê–ß–ò
@tasks.loop(minutes=5)
async def update_crypto_prices():
    await crypto_system.get_real_prices()

@tasks.loop(seconds=30)
async def check_duels():
    current_time = datetime.now()
    for duel_id, duel in list(active_duels.items()):
        if (current_time - duel['time']).seconds > 60:
            del active_duels[duel_id]

# üéØ –ë–ê–ó–û–í–´–ï –ö–û–ú–ê–ù–î–´
@bot.tree.command(name="play", description="–í–∫–ª—é—á–∏—Ç—å –º—É–∑—ã–∫—É")
async def play(interaction: discord.Interaction, –∑–∞–ø—Ä–æ—Å: str):
    await music_system.play(interaction, –∑–∞–ø—Ä–æ—Å)

@bot.tree.command(name="—Å–æ–∑–¥–∞—Ç—å_–∫–ª–∞–Ω", description="–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–Ω")
async def —Å–æ–∑–¥–∞—Ç—å_–∫–ª–∞–Ω(interaction: discord.Interaction, –Ω–∞–∑–≤–∞–Ω–∏–µ: str):
    success, message = await clan_system.create_clan(interaction.user.id, –Ω–∞–∑–≤–∞–Ω–∏–µ)
    embed = Design.create_embed("üë• –ö–ª–∞–Ω", message, "success" if success else "danger")
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="–¥—É—ç–ª—å", description="–í—ã–∑–≤–∞—Ç—å –Ω–∞ –¥—É—ç–ª—å")
async def –¥—É—ç–ª—å(interaction: discord.Interaction, —Å–æ–ø–µ—Ä–Ω–∏–∫: discord.Member, —Å—Ç–∞–≤–∫–∞: int):
    success, duel_id = await pvp_system.start_duel(interaction.user.id, —Å–æ–ø–µ—Ä–Ω–∏–∫.id, —Å—Ç–∞–≤–∫–∞)
    if success:
        embed = Design.create_embed("‚öîÔ∏è –î—É—ç–ª—å", 
                                  f"**–í—ã–∑–æ–≤ –æ—Ç:** {interaction.user.mention}\n"
                                  f"**–°–æ–ø–µ—Ä–Ω–∏–∫:** {—Å–æ–ø–µ—Ä–Ω–∏–∫.mention}\n"
                                  f"**–°—Ç–∞–≤–∫–∞:** {—Å—Ç–∞–≤–∫–∞} –º–æ–Ω–µ—Ç\n"
                                  f"–ü—Ä–∏–º–∏ –≤—ã–∑–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥!", "warning")
    else:
        embed = Design.create_embed("‚ùå –û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥—É—ç–ª—å", "danger")
    await interaction.response.send_message(embed=embed)

@bot.event
async def on_ready():
    print(f'‚úÖ –ë–æ—Ç {bot.user} –∑–∞–ø—É—â–µ–Ω!')
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    try:
        synced = await bot.tree.sync()
        print(f'‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(synced)} –∫–æ–º–∞–Ω–¥')
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}')

if __name__ == "__main__":
    bot.run(TOKEN)
