import os
import discord
from discord import app_commands
from discord.ext import commands, tasks
from discord.ui import Button, View, Select
import json
import random
import datetime
import traceback
import asyncio

# –ò–º–ø–æ—Ä—Ç PostgreSQL
try:
    import psycopg2
    from psycopg2.extras import RealDictCursor
    print("‚úÖ psycopg2 –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
except ImportError:
    print("‚ùå psycopg2 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...")
    import subprocess
    subprocess.check_call(["pip", "install", "psycopg2-binary"])
    import psycopg2
    from psycopg2.extras import RealDictCursor

# ========== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ==========
def get_database_url():
    """–ü–æ–ª—É—á–∞–µ–º DATABASE_URL —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏"""
    database_url = os.environ.get('DATABASE_URL')
    if database_url:
        print("‚úÖ DATABASE_URL –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return database_url
    
    alternative_names = ['POSTGRES_URL', 'POSTGRESQL_URL', 'RAILWAY_DATABASE_URL']
    for name in alternative_names:
        database_url = os.environ.get(name)
        if database_url:
            print(f"‚úÖ DATABASE_URL –Ω–∞–π–¥–µ–Ω –∫–∞–∫ {name}")
            return database_url
    
    db_user = os.environ.get('PGUSER')
    db_password = os.environ.get('PGPASSWORD')
    db_host = os.environ.get('PGHOST')
    db_port = os.environ.get('PGPORT')
    db_name = os.environ.get('PGDATABASE')
    
    if all([db_user, db_password, db_host, db_port, db_name]):
        database_url = f"postgresql://{db_user}:{db_password}@{db_host}:{db_port}/{db_name}"
        print("‚úÖ DATABASE_URL —Å–æ–±—Ä–∞–Ω –∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö")
        return database_url
    
    print("‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    return None

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
DATABASE_URL = get_database_url()
BOT_TOKEN = os.environ.get('DISCORD_BOT_TOKEN')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
if not BOT_TOKEN or BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
    print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
    exit(1)

if not DATABASE_URL:
    print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
LOG_CHANNEL_ID = 1423377881047896207
ADMIN_IDS = [766767256742526996, 1195144951546265675, 691904643181314078, 1078693283695448064, 1138140772097597472]
ADMIN_USER_ID = 1188261847850299514

# –≠–º–æ–¥–∑–∏ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
EMOJIS = {
    'coin': 'ü™ô',
    'daily': 'üìÖ',
    'case': 'üéÅ',
    'win': 'üéâ',
    'lose': 'üíÄ',
    'steal': 'ü¶π',
    'market': 'üè™',
    'quest': 'üó∫Ô∏è',
    'dice': 'üé≤',
    'duel': '‚öîÔ∏è',
    'admin': '‚öôÔ∏è',
    'slot': 'üé∞',
    'coinflip': 'ü™ô',
    'blackjack': 'üÉè'
}

# –°–∏—Å—Ç–µ–º–∞ –±–∞—Ñ–æ–≤ –æ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤
ITEM_BUFFS = {
    '–ó–æ–ª–æ—Ç–æ–π –∞–º—É–ª–µ—Ç': {'type': 'daily_bonus', 'value': 1.2, 'description': '+20% –∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥–µ'},
    '–°–µ—Ä–µ–±—Ä—è–Ω—ã–π –∞–º—É–ª–µ—Ç': {'type': 'daily_bonus', 'value': 1.1, 'description': '+10% –∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥–µ'},
    '–ö–æ–ª—å—Ü–æ —É–¥–∞—á–∏': {'type': 'case_bonus', 'value': 1.15, 'description': '+15% –∫ –Ω–∞–≥—Ä–∞–¥–∞–º –∏–∑ –∫–µ–π—Å–æ–≤'},
    '–ë—Ä–∞—Å–ª–µ—Ç –≤–µ–∑–µ–Ω–∏—è': {'type': 'game_bonus', 'value': 1.1, 'description': '+10% –∫ –≤—ã–∏–≥—Ä—ã—à–∞–º –≤ –∏–≥—Ä–∞—Ö'},
    '–ó–∞—â–∏—Ç–Ω—ã–π —Ç–∞–ª–∏—Å–º–∞–Ω': {'type': 'steal_protection', 'value': 0.5, 'description': '-50% –∫ —à–∞–Ω—Å—É –∫—Ä–∞–∂–∏ —É –≤–∞—Å'},
    '–ü–µ—Ä—á–∞—Ç–∫–∞ –≤–æ—Ä–∞': {'type': 'steal_bonus', 'value': 1.2, 'description': '+20% –∫ —à–∞–Ω—Å—É —É—Å–ø–µ—à–Ω–æ–π –∫—Ä–∞–∂–∏'},
    '–ú–∞–≥–∏—á–µ—Å–∫–∏–π —Å–≤–∏—Ç–æ–∫': {'type': 'roulette_bonus', 'value': 1.25, 'description': '+25% –∫ –≤—ã–∏–≥—Ä—ã—à—É –≤ —Ä—É–ª–µ—Ç–∫–µ'},
    '–ö—Ä–∏—Å—Ç–∞–ª–ª –º–∞–Ω—ã': {'type': 'multiplier', 'value': 1.3, 'description': 'x1.3 –∫ –ª—é–±—ã–º –Ω–∞–≥—Ä–∞–¥–∞–º'},
    '–î—Ä–µ–≤–Ω–∏–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç': {'type': 'multiplier', 'value': 1.5, 'description': 'x1.5 –∫ –ª—é–±—ã–º –Ω–∞–≥—Ä–∞–¥–∞–º'},
    '–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π –ø—Ä–µ–¥–º–µ—Ç': {'type': 'multiplier', 'value': 2.0, 'description': 'x2.0 –∫ –ª—é–±—ã–º –Ω–∞–≥—Ä–∞–¥–∞–º'},
    '–°—á–∞—Å—Ç–ª–∏–≤–∞—è –º–æ–Ω–µ—Ç–∞': {'type': 'coinflip_bonus', 'value': 1.2, 'description': '+20% –∫ –≤—ã–∏–≥—Ä—ã—à—É –≤ coinflip'},
    '–ö–∞—Ä—Ç–æ—á–Ω—ã–π —à—É–ª–µ—Ä': {'type': 'blackjack_bonus', 'value': 1.15, 'description': '+15% –∫ –≤—ã–∏–≥—Ä—ã—à—É –≤ –±–ª—ç–∫–¥–∂–µ–∫–µ'},
    '–°–ª–æ—Ç-–º–∞—Å—Ç–µ—Ä': {'type': 'slot_bonus', 'value': 1.25, 'description': '+25% –∫ –≤—ã–∏–≥—Ä—ã—à—É –≤ —Å–ª–æ—Ç–∞—Ö'},
    '–©–∏—Ç –±–æ–≥–∞—Ç—Å—Ç–≤–∞': {'type': 'loss_protection', 'value': 0.8, 'description': '-20% –∫ –ø—Ä–æ–∏–≥—Ä—ã—à–∞–º'},
    '–§–ª–∞–∫–æ–Ω –∑–µ–ª—å—è': {'type': 'quest_bonus', 'value': 1.2, 'description': '+20% –∫ –Ω–∞–≥—Ä–∞–¥–∞–º –∑–∞ –∫–≤–µ—Å—Ç—ã'},
    '–ó–µ–ª—å–µ —É–¥–∞—á–∏': {'type': 'all_bonus', 'value': 1.1, 'description': '+10% –∫–æ –≤—Å–µ–º –Ω–∞–≥—Ä–∞–¥–∞–º'},
    '–†—É–Ω–∞ –±–æ–≥–∞—Ç—Å—Ç–≤–∞': {'type': 'transfer_bonus', 'value': 0.9, 'description': '-10% –∫ –∫–æ–º–∏—Å—Å–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤'},
    '–¢–æ—Ç–µ–º –∑–∞—â–∏—Ç—ã': {'type': 'duel_bonus', 'value': 1.2, 'description': '+20% –∫ —à–∞–Ω—Å—É –ø–æ–±–µ–¥—ã –≤ –¥—É—ç–ª—è—Ö'},
    '–û–∂–µ—Ä–µ–ª—å–µ –º—É–¥—Ä–æ—Å—Ç–∏': {'type': 'xp_bonus', 'value': 1.15, 'description': '+15% –∫ –æ–ø—ã—Ç—É'},
    '–ü–ª–∞—â —Ç–µ–Ω–∏': {'type': 'steal_chance', 'value': 1.15, 'description': '+15% –∫ —à–∞–Ω—Å—É –∫—Ä–∞–∂–∏'}
}

# –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
ACHIEVEMENTS = {
    'first_daily': {'name': '–ü–µ—Ä–≤—ã–π —à–∞–≥', 'description': '–ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä–≤—É—é –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É', 'reward': 100},
    'rich': {'name': '–ë–æ–≥–∞—á', 'description': '–ù–∞–∫–æ–ø–∏—Ç–µ 10,000 –º–æ–Ω–µ—Ç', 'reward': 500},
    'millionaire': {'name': '–ú–∏–ª–ª–∏–æ–Ω–µ—Ä', 'description': '–ù–∞–∫–æ–ø–∏—Ç–µ 100,000 –º–æ–Ω–µ—Ç', 'reward': 5000},
    'gambler': {'name': '–ê–∑–∞—Ä—Ç–Ω—ã–π –∏–≥—Ä–æ–∫', 'description': '–í—ã–∏–≥—Ä–∞–π—Ç–µ –≤ —Ä—É–ª–µ—Ç–∫—É 25 —Ä–∞–∑', 'reward': 1000},
    'thief': {'name': '–í–æ—Ä', 'description': '–£—Å–ø–µ—à–Ω–æ —É–∫—Ä–∞–¥–∏—Ç–µ –º–æ–Ω–µ—Ç—ã 20 —Ä–∞–∑', 'reward': 800},
    'case_opener': {'name': '–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä', 'description': '–û—Ç–∫—Ä–æ–π—Ç–µ 50 –∫–µ–π—Å–æ–≤', 'reward': 1500},
    'case_master': {'name': '–ú–∞—Å—Ç–µ—Ä –∫–µ–π—Å–æ–≤', 'description': '–û—Ç–∫—Ä–æ–π—Ç–µ 200 –∫–µ–π—Å–æ–≤', 'reward': 5000},
    'duel_master': {'name': '–ú–∞—Å—Ç–µ—Ä –¥—É—ç–ª–µ–π', 'description': '–í—ã–∏–≥—Ä–∞–π—Ç–µ 25 –¥—É—ç–ª–µ–π', 'reward': 1200},
    'slot_king': {'name': '–ö–æ—Ä–æ–ª—å —Å–ª–æ—Ç–æ–≤', 'description': '–í—ã–∏–≥—Ä–∞–π—Ç–µ –¥–∂–µ–∫–ø–æ—Ç –≤ —Å–ª–æ—Ç–∞—Ö', 'reward': 3000},
    'blackjack_pro': {'name': '–ü—Ä–æ—Ñ–∏ –≤ –±–ª—ç–∫–¥–∂–µ–∫–µ', 'description': '–í—ã–∏–≥—Ä–∞–π—Ç–µ 10 —Ä–∞–∑ –≤ –±–ª—ç–∫–¥–∂–µ–∫', 'reward': 2000},
    'coinflip_champ': {'name': '–ß–µ–º–ø–∏–æ–Ω –º–æ–Ω–µ—Ç–∫–∏', 'description': '–í—ã–∏–≥—Ä–∞–π—Ç–µ 30 —Ä–∞–∑ –≤ –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã', 'reward': 1500},
    'trader': {'name': '–¢–æ—Ä–≥–æ–≤–µ—Ü', 'description': '–ü—Ä–æ–¥–∞–π—Ç–µ 15 –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ', 'reward': 800},
    'gifter': {'name': '–©–µ–¥—Ä—ã–π', 'description': '–ü–æ–¥–∞—Ä–∏—Ç–µ 10 –∫–µ–π—Å–æ–≤', 'reward': 1000},
    'veteran': {'name': '–í–µ—Ç–µ—Ä–∞–Ω', 'description': '–ü–æ–ª—É—á–∏—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É 30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥', 'reward': 3000},
    'lucky': {'name': '–í–µ–∑—É–Ω—á–∏–∫', 'description': '–í—ã–∏–≥—Ä–∞–π—Ç–µ 3 —Ä–∞–∑–∞ –ø–æ–¥—Ä—è–¥ –≤ –ª—é–±—É—é –∏–≥—Ä—É', 'reward': 2000},
    'item_collector': {'name': '–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä –ø—Ä–µ–¥–º–µ—Ç–æ–≤', 'description': '–°–æ–±–µ—Ä–∏—Ç–µ 10 —Ä–∞–∑–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤', 'reward': 1500},
    'buff_master': {'name': '–ú–∞—Å—Ç–µ—Ä –±–∞—Ñ–æ–≤', 'description': '–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ 5 —Ä–∞–∑–Ω—ã—Ö –±–∞—Ñ–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ', 'reward': 2000}
}

# –°–∏—Å—Ç–µ–º–∞ –∫–≤–µ—Å—Ç–æ–≤
QUESTS = {
    'daily_rich': {'name': '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–≥–∞—á', 'description': '–ü–æ–ª—É—á–∏—Ç–µ 7 –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ –ø–æ–¥—Ä—è–¥', 'reward': 1000},
    'gambling_king': {'name': '–ö–æ—Ä–æ–ª—å –∞–∑–∞—Ä—Ç–∞', 'description': '–í—ã–∏–≥—Ä–∞–π—Ç–µ 10,000 –º–æ–Ω–µ—Ç –≤ –∞–∑–∞—Ä—Ç–Ω—ã—Ö –∏–≥—Ä–∞—Ö', 'reward': 2500},
    'case_hunter': {'name': '–û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ –∫–µ–π—Å–∞–º–∏', 'description': '–û—Ç–∫—Ä–æ–π—Ç–µ 15 –∫–µ–π—Å–æ–≤ –ª—é–±–æ–≥–æ —Ç–∏–ø–∞', 'reward': 1200},
    'market_expert': {'name': '–≠–∫—Å–ø–µ—Ä—Ç —Ä—ã–Ω–∫–∞', 'description': '–ö—É–ø–∏—Ç–µ –∏ –ø—Ä–æ–¥–∞–π—Ç–µ 5 –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ', 'reward': 800},
    'duel_champion': {'name': '–ß–µ–º–ø–∏–æ–Ω –¥—É—ç–ª–µ–π', 'description': '–í—ã–∏–≥—Ä–∞–π—Ç–µ 5 –¥—É—ç–ª–µ–π –ø–æ–¥—Ä—è–¥', 'reward': 1500},
    'item_collector_quest': {'name': '–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä', 'description': '–°–æ–±–µ—Ä–∏—Ç–µ 5 —Ä–∞–∑–Ω—ã—Ö –º–∞–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤', 'reward': 2000}
}

# ========== –ö–õ–ê–°–° –ë–û–¢–ê ==========
class CustomBot(commands.Bot):
    async def setup_hook(self):
        # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã
        await asyncio.sleep(5)
        
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
        try:
            print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥...")
            synced = await self.tree.sync()
            print(f"‚úÖ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(synced)} –∫–æ–º–∞–Ω–¥")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        
    async def on_ready(self):
        print(f'‚úÖ –ë–æ—Ç {self.user.name} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!')
        print(f'üîó ID –±–æ—Ç–∞: {self.user.id}')
        print(f'üë• –ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ {len(self.guilds)} —Å–µ—Ä–≤–µ—Ä–∞—Ö')

        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
        try:
            await asyncio.sleep(2)
            synced = await self.tree.sync()
            print(f"‚úÖ –§–∏–Ω–∞–ª—å–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(synced)} –∫–æ–º–∞–Ω–¥")
            
            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if synced:
                print("üìã –°–ø–∏—Å–æ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:")
                for cmd in synced:
                    print(f"   - {cmd.name}: {cmd.description}")
            else:
                print("‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ 0 –∫–æ–º–∞–Ω–¥")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            traceback.print_exc()

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
intents = discord.Intents.default()
intents.message_content = True
intents.members = True
intents.guilds = True

bot = CustomBot(command_prefix='!', intents=intents, help_command=None)

# ========== –ë–ê–ó–ê –î–ê–ù–ù–´–• ==========
class Database:
    def __init__(self):
        self.conn = None
        self.connect()
        self.create_tables()
    
    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        max_retries = 3
        for attempt in range(max_retries):
            try:
                self.conn = psycopg2.connect(DATABASE_URL, sslmode='require')
                print("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL!")
                return
            except Exception as e:
                print(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                if attempt < max_retries - 1:
                    print("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
                    import time
                    time.sleep(5)
                else:
                    print("üí• –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫")
                    raise

    def create_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            cursor = self.conn.cursor()
            
            print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
            
            # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id BIGINT PRIMARY KEY,
                    balance INTEGER DEFAULT 100,
                    daily_streak INTEGER DEFAULT 0,
                    last_daily TEXT,
                    inventory TEXT DEFAULT '{}',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS transactions (
                    id SERIAL PRIMARY KEY,
                    user_id BIGINT,
                    type TEXT,
                    amount INTEGER,
                    target_user_id BIGINT,
                    description TEXT,
                    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –∫–µ–π—Å–æ–≤
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS cases (
                    id SERIAL PRIMARY KEY,
                    name TEXT,
                    price INTEGER,
                    rewards TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –º–∞—Ä–∫–µ—Ç–∞
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS market (
                    id SERIAL PRIMARY KEY,
                    seller_id BIGINT,
                    item_name TEXT,
                    price INTEGER,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS achievements (
                    user_id BIGINT,
                    achievement_id TEXT,
                    unlocked_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    PRIMARY KEY (user_id, achievement_id)
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –∫–≤–µ—Å—Ç–æ–≤
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS quests (
                    user_id BIGINT,
                    quest_id TEXT,
                    progress INTEGER DEFAULT 0,
                    completed BOOLEAN DEFAULT FALSE,
                    last_quest TEXT,
                    PRIMARY KEY (user_id, quest_id)
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –¥—É—ç–ª–µ–π
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS duels (
                    id SERIAL PRIMARY KEY,
                    challenger_id BIGINT,
                    target_id BIGINT,
                    bet INTEGER,
                    status TEXT DEFAULT 'pending',
                    winner_id BIGINT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS items (
                    id SERIAL PRIMARY KEY,
                    name TEXT,
                    description TEXT,
                    value INTEGER,
                    rarity TEXT,
                    buff_type TEXT,
                    buff_value REAL,
                    buff_description TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS user_stats (
                    user_id BIGINT PRIMARY KEY,
                    cases_opened INTEGER DEFAULT 0,
                    duels_won INTEGER DEFAULT 0,
                    steals_successful INTEGER DEFAULT 0,
                    steals_failed INTEGER DEFAULT 0,
                    roulette_wins INTEGER DEFAULT 0,
                    slot_wins INTEGER DEFAULT 0,
                    blackjack_wins INTEGER DEFAULT 0,
                    coinflip_wins INTEGER DEFAULT 0,
                    daily_claimed INTEGER DEFAULT 0,
                    total_earned INTEGER DEFAULT 0,
                    market_sales INTEGER DEFAULT 0,
                    gifts_sent INTEGER DEFAULT 0,
                    consecutive_wins INTEGER DEFAULT 0,
                    items_collected INTEGER DEFAULT 0,
                    last_win_time TIMESTAMP
                )
            ''')
            
            self.conn.commit()
            print("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            self.initialize_default_data()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
            self.conn.rollback()
            raise

    def initialize_default_data(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –∫–µ–π—Å–∞–º–∏"""
        try:
            cursor = self.conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–µ–π—Å–æ–≤
            cursor.execute('SELECT COUNT(*) FROM cases')
            current_count = cursor.fetchone()[0]
            print(f"üîç –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–µ–π—Å–æ–≤ –≤ –±–∞–∑–µ: {current_count}")
            
            # –ï—Å–ª–∏ –∫–µ–π—Å–æ–≤ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
            if current_count == 0:
                print("üîÑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –∫–µ–π—Å–æ–≤...")
                
                improved_cases = [
                    ('üì¶ –ù–∞—á–∏–Ω–∞—é—â–∏–π –∫–µ–π—Å', 25, json.dumps([
                        {'type': 'coins', 'amount': [10, 30], 'chance': 0.6, 'description': '–ù–µ–±–æ–ª—å—à–∞—è —Å—É–º–º–∞ –º–æ–Ω–µ—Ç'},
                        {'type': 'coins', 'amount': [31, 80], 'chance': 0.3, 'description': '–°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ –º–æ–Ω–µ—Ç'},
                        {'type': 'coins', 'amount': [81, 150], 'chance': 0.1, 'description': '–•–æ—Ä–æ—à–∞—è —Å—É–º–º–∞ –º–æ–Ω–µ—Ç'}
                    ])),
                    ('üì¶ –ú–∞–ª—ã–π –∫–µ–π—Å', 50, json.dumps([
                        {'type': 'coins', 'amount': [20, 50], 'chance': 0.5, 'description': '–ù–µ–±–æ–ª—å—à–∞—è —Å—É–º–º–∞ –º–æ–Ω–µ—Ç'},
                        {'type': 'coins', 'amount': [51, 120], 'chance': 0.3, 'description': '–°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ –º–æ–Ω–µ—Ç'},
                        {'type': 'coins', 'amount': [121, 250], 'chance': 0.15, 'description': '–•–æ—Ä–æ—à–∞—è —Å—É–º–º–∞ –º–æ–Ω–µ—Ç'},
                        {'type': 'special_item', 'name': '–°–µ—Ä–µ–±—Ä—è–Ω—ã–π –∞–º—É–ª–µ—Ç', 'chance': 0.05, 'description': '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É –Ω–∞ 10%'}
                    ])),
                    ('üíé –ë–æ–ª—å—à–æ–π –∫–µ–π—Å', 500, json.dumps([
                        {'type': 'coins', 'amount': [200, 400], 'chance': 0.6, 'description': '–°–æ–ª–∏–¥–Ω–∞—è —Å—É–º–º–∞'},
                        {'type': 'coins', 'amount': [401, 1000], 'chance': 0.25, 'description': '–û—á–µ–Ω—å —Ö–æ—Ä–æ—à–∞—è —Å—É–º–º–∞'},
                        {'type': 'special_item', 'name': '–ó–æ–ª–æ—Ç–æ–π –∞–º—É–ª–µ—Ç', 'chance': 0.08, 'description': '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É –Ω–∞ 20%'},
                        {'type': 'bonus', 'multiplier': 1.5, 'duration': 24, 'chance': 0.07, 'description': '–í—Ä–µ–º–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å x1.5 –Ω–∞ 24 —á–∞—Å–∞'}
                    ])),
                    ('üëë –≠–ª–∏—Ç–Ω—ã–π –∫–µ–π—Å', 1000, json.dumps([
                        {'type': 'coins', 'amount': [500, 1000], 'chance': 0.3, 'description': '–≠–ª–∏—Ç–Ω—ã–µ –º–æ–Ω–µ—Ç—ã'},
                        {'type': 'coins', 'amount': [-300, -100], 'chance': 0.2, 'description': '–ù–µ—É–¥–∞—á–∞ (–ø–æ—Ç–µ—Ä—è –º–æ–Ω–µ—Ç)'},
                        {'type': 'special_item', 'name': '–î—Ä–µ–≤–Ω–∏–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç', 'chance': 0.15, 'description': '–ú–æ—â–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞–≥—Ä–∞–¥'},
                        {'type': 'bonus', 'multiplier': 2.0, 'duration': 48, 'chance': 0.1, 'description': '–í—Ä–µ–º–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å x2.0 –Ω–∞ 48 —á–∞—Å–æ–≤'},
                        {'type': 'coins', 'amount': [1001, 3000], 'chance': 0.15, 'description': '–≠–ª–∏—Ç–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à'},
                        {'type': 'coins', 'amount': [3001, 6000], 'chance': 0.1, 'description': '–≠–ª–∏—Ç–Ω—ã–π –¥–∂–µ–∫–ø–æ—Ç'}
                    ]))
                ]
                
                for case in improved_cases:
                    cursor.execute('INSERT INTO cases (name, price, rewards) VALUES (%s, %s, %s)', case)
                
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(improved_cases)} —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –∫–µ–π—Å–æ–≤!")
            else:
                print(f"‚úÖ –í –±–∞–∑–µ —É–∂–µ –µ—Å—Ç—å {current_count} –∫–µ–π—Å–æ–≤, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            cursor.execute('SELECT COUNT(*) FROM items')
            items_count = cursor.fetchone()[0]
            
            if items_count == 0:
                print("üîÑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤...")
                
                default_items = [
                    ('–ó–æ–ª–æ—Ç–æ–π –∞–º—É–ª–µ—Ç', '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É', 500, 'rare', 'daily_bonus', 1.2, '+20% –∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥–µ'),
                    ('–°–µ—Ä–µ–±—Ä—è–Ω—ã–π –∞–º—É–ª–µ—Ç', '–ù–µ–±–æ–ª—å—à–æ–π –±–æ–Ω—É—Å –∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥–µ', 250, 'common', 'daily_bonus', 1.1, '+10% –∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥–µ'),
                    ('–ö–æ–ª—å—Ü–æ —É–¥–∞—á–∏', '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã –∏–∑ –∫–µ–π—Å–æ–≤', 600, 'rare', 'case_bonus', 1.15, '+15% –∫ –Ω–∞–≥—Ä–∞–¥–∞–º –∏–∑ –∫–µ–π—Å–æ–≤'),
                    ('–ë—Ä–∞—Å–ª–µ—Ç –≤–µ–∑–µ–Ω–∏—è', '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –≤—ã–∏–≥—Ä—ã—à–∏ –≤ –∏–≥—Ä–∞—Ö', 450, 'uncommon', 'game_bonus', 1.1, '+10% –∫ –≤—ã–∏–≥—Ä—ã—à–∞–º –≤ –∏–≥—Ä–∞—Ö'),
                    ('–ó–∞—â–∏—Ç–Ω—ã–π —Ç–∞–ª–∏—Å–º–∞–Ω', '–ó–∞—â–∏—â–∞–µ—Ç –æ—Ç –∫—Ä–∞–∂', 800, 'epic', 'steal_protection', 0.5, '-50% –∫ —à–∞–Ω—Å—É –∫—Ä–∞–∂–∏ —É –≤–∞—Å'),
                    ('–ü–µ—Ä—á–∞—Ç–∫–∞ –≤–æ—Ä–∞', '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —à–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ–π –∫—Ä–∞–∂–∏', 700, 'rare', 'steal_bonus', 1.2, '+20% –∫ —à–∞–Ω—Å—É —É—Å–ø–µ—à–Ω–æ–π –∫—Ä–∞–∂–∏'),
                ]
                
                for item in default_items:
                    cursor.execute('INSERT INTO items (name, description, value, rarity, buff_type, buff_value, buff_description) VALUES (%s, %s, %s, %s, %s, %s, %s)', item)
                
                print("‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
            
            self.conn.commit()
            print("‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            self.conn.rollback()

    def get_user(self, user_id):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            cursor = self.conn.cursor()
            cursor.execute('SELECT * FROM users WHERE user_id = %s', (user_id,))
            user = cursor.fetchone()
            
            if not user:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cursor.execute('''
                    INSERT INTO users (user_id, balance, inventory) 
                    VALUES (%s, %s, %s)
                ''', (user_id, 100, json.dumps({"cases": {}, "items": {}})))
                self.conn.commit()
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cursor.execute('SELECT * FROM users WHERE user_id = %s', (user_id,))
                user = cursor.fetchone()
            
            return user
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_user –¥–ª—è {user_id}: {e}")
            return (user_id, 100, 0, None, json.dumps({"cases": {}, "items": {}}), datetime.datetime.now())

    def update_balance(self, user_id, amount):
        cursor = self.conn.cursor()
        cursor.execute('UPDATE users SET balance = balance + %s WHERE user_id = %s', (amount, user_id))
        self.conn.commit()
    
    def log_transaction(self, user_id, transaction_type, amount, target_user_id=None, description=""):
        cursor = self.conn.cursor()
        cursor.execute('''
            INSERT INTO transactions (user_id, type, amount, target_user_id, description)
            VALUES (%s, %s, %s, %s, %s)
        ''', (user_id, transaction_type, amount, target_user_id, description))
        self.conn.commit()
    
    def get_cases(self):
        cursor = self.conn.cursor()
        cursor.execute('SELECT * FROM cases ORDER BY price ASC')
        return cursor.fetchall()
    
    def get_case(self, case_id):
        cursor = self.conn.cursor()
        cursor.execute('SELECT * FROM cases WHERE id = %s', (case_id,))
        return cursor.fetchone()
    
    def get_items(self):
        cursor = self.conn.cursor()
        cursor.execute('SELECT * FROM items')
        return cursor.fetchall()
    
    def get_item(self, item_id):
        cursor = self.conn.cursor()
        cursor.execute('SELECT * FROM items WHERE id = %s', (item_id,))
        return cursor.fetchone()
    
    def get_item_by_name(self, item_name):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ –∏–º–µ–Ω–∏"""
        try:
            cursor = self.conn.cursor()
            cursor.execute('SELECT * FROM items WHERE name = %s', (item_name,))
            item = cursor.fetchone()
            return item
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_item_by_name –¥–ª—è {item_name}: {e}")
            return None
    
    def add_item_to_inventory(self, user_id, item_name):
        cursor = self.conn.cursor()
        
        cursor.execute('SELECT id FROM items WHERE name = %s', (item_name,))
        item_result = cursor.fetchone()
        
        if not item_result:
            return False
            
        item_id = item_result[0]
        
        cursor.execute('SELECT inventory FROM users WHERE user_id = %s', (user_id,))
        result = cursor.fetchone()
        
        if result and result[0]:
            inventory_data = json.loads(result[0])
        else:
            inventory_data = {"cases": {}, "items": {}}
            
        if "items" not in inventory_data:
            inventory_data["items"] = {}
            
        item_key = str(item_id)
        if item_key in inventory_data["items"]:
            inventory_data["items"][item_key] += 1
        else:
            inventory_data["items"][item_key] = 1
        
        cursor.execute('UPDATE users SET inventory = %s WHERE user_id = %s', 
                      (json.dumps(inventory_data), user_id))
        self.conn.commit()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        self.update_user_stat(user_id, 'items_collected')
        return True
    
    def remove_item_from_inventory(self, user_id, item_name):
        cursor = self.conn.cursor()
        
        cursor.execute('SELECT id FROM items WHERE name = %s', (item_name,))
        item_result = cursor.fetchone()
        
        if not item_result:
            return False
            
        item_id = str(item_result[0])
        
        cursor.execute('SELECT inventory FROM users WHERE user_id = %s', (user_id,))
        result = cursor.fetchone()
        
        if not result or not result[0]:
            return False
            
        inventory_data = json.loads(result[0])
        
        if item_id in inventory_data.get("items", {}):
            if inventory_data["items"][item_id] > 1:
                inventory_data["items"][item_id] -= 1
            else:
                del inventory_data["items"][item_id]
            
            cursor.execute('UPDATE users SET inventory = %s WHERE user_id = %s', 
                          (json.dumps(inventory_data), user_id))
            self.conn.commit()
            return True
        return False

    def add_case_to_inventory(self, user_id, case_id, case_name, source="gifted"):
        cursor = self.conn.cursor()
        cursor.execute('SELECT inventory FROM users WHERE user_id = %s', (user_id,))
        result = cursor.fetchone()
        
        if result and result[0]:
            inventory = json.loads(result[0])
        else:
            inventory = {"cases": {}, "items": {}}
        
        if "cases" not in inventory:
            inventory["cases"] = {}
        
        case_key = f"case_{case_id}"
        if case_key in inventory["cases"]:
            inventory["cases"][case_key]["count"] += 1
        else:
            inventory["cases"][case_key] = {
                "name": case_name,
                "count": 1,
                "source": source
            }
        
        cursor.execute('UPDATE users SET inventory = %s WHERE user_id = %s', (json.dumps(inventory), user_id))
        self.conn.commit()
    
    def get_user_inventory(self, user_id):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            cursor = self.conn.cursor()
            cursor.execute('SELECT inventory FROM users WHERE user_id = %s', (user_id,))
            result = cursor.fetchone()
            
            if result and result[0]:
                try:
                    return json.loads(result[0])
                except json.JSONDecodeError:
                    return {"cases": {}, "items": {}}
            return {"cases": {}, "items": {}}
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_user_inventory –¥–ª—è {user_id}: {e}")
            return {"cases": {}, "items": {}}

    def remove_case_from_inventory(self, user_id, case_id):
        cursor = self.conn.cursor()
        cursor.execute('SELECT inventory FROM users WHERE user_id = %s', (user_id,))
        result = cursor.fetchone()
        
        if not result or not result[0]:
            return False
            
        inventory = json.loads(result[0])
        
        case_key = f"case_{case_id}"
        if case_key in inventory.get("cases", {}):
            if inventory["cases"][case_key]["count"] > 1:
                inventory["cases"][case_key]["count"] -= 1
            else:
                del inventory["cases"][case_key]
            
            cursor.execute('UPDATE users SET inventory = %s WHERE user_id = %s', (json.dumps(inventory), user_id))
            self.conn.commit()
            return True
        return False

    def update_user_stat(self, user_id, stat_name, increment=1):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            cursor = self.conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            cursor.execute('SELECT 1 FROM user_stats WHERE user_id = %s', (user_id,))
            if not cursor.fetchone():
                cursor.execute('INSERT INTO user_stats (user_id) VALUES (%s)', (user_id,))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            cursor.execute(f'''
                UPDATE user_stats SET {stat_name} = {stat_name} + %s 
                WHERE user_id = %s
            ''', (increment, user_id))
            
            self.conn.commit()
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ update_user_stat: {e}")
            return False
    
    def get_user_buffs(self, user_id):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –±–∞—Ñ–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            inventory = self.get_user_inventory(user_id)
            buffs = {}
            
            for item_id, count in inventory.get("items", {}).items():
                try:
                    if not item_id.isdigit():
                        continue
                        
                    item_data = self.get_item(int(item_id))
                    if item_data and len(item_data) > 6 and item_data[5]:  # buff_type
                        buff_type = item_data[5]
                        buff_value = item_data[6] if len(item_data) > 6 else 1.0
                        
                        # –ë–µ—Ä–µ–º —Å–∞–º—ã–π —Å–∏–ª—å–Ω—ã–π –±–∞—Ñ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
                        if buff_type not in buffs or buff_value > buffs[buff_type]['value']:
                            buffs[buff_type] = {
                                'value': buff_value,
                                'description': item_data[7] if len(item_data) > 7 else "–ë–æ–Ω—É—Å",
                                'item_name': item_data[1] if len(item_data) > 1 else "–ü—Ä–µ–¥–º–µ—Ç"
                            }
                except (ValueError, IndexError) as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ {item_id}: {e}")
                    continue
            
            return buffs
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_user_buffs –¥–ª—è {user_id}: {e}")
            return {}
    
    def apply_buff_to_amount(self, user_id, base_amount, buff_type):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –±–∞—Ñ –∫ —Å—É–º–º–µ, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        buffs = self.get_user_buffs(user_id)
        if buff_type in buffs:
            return int(base_amount * buffs[buff_type]['value'])
        return base_amount
    
    def apply_buff_to_chance(self, user_id, base_chance, buff_type):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –±–∞—Ñ –∫ —à–∞–Ω—Å—É, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        buffs = self.get_user_buffs(user_id)
        if buff_type in buffs:
            return base_chance * buffs[buff_type]['value']
        return base_chance

    def get_item_name_by_id(self, item_id):
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ ID"""
        try:
            if not item_id or not str(item_id).isdigit():
                return f"–ü—Ä–µ–¥–º–µ—Ç ID:{item_id}"
                
            item_data = self.get_item(int(item_id))
            if item_data and len(item_data) > 1 and item_data[1]:
                return item_data[1]
            return f"–ü—Ä–µ–¥–º–µ—Ç ID:{item_id}"
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ {item_id}: {e}")
            return f"–ü—Ä–µ–¥–º–µ—Ç ID:{item_id}"

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
try:
    db = Database()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
except Exception as e:
    print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    traceback.print_exc()
    exit(1)

# ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========
def get_user_data_safe(user_data):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞"""
    if not user_data:
        return {
            'user_id': 0,
            'balance': 100,
            'daily_streak': 0,
            'last_daily': None,
            'inventory': '{"cases": {}, "items": {}}',
            'created_at': datetime.datetime.now()
        }
    
    try:
        return {
            'user_id': user_data[0] if len(user_data) > 0 else 0,
            'balance': user_data[1] if len(user_data) > 1 else 100,
            'daily_streak': user_data[2] if len(user_data) > 2 else 0,
            'last_daily': user_data[3] if len(user_data) > 3 else None,
            'inventory': user_data[4] if len(user_data) > 4 else '{"cases": {}, "items": {}}',
            'created_at': user_data[5] if len(user_data) > 5 else datetime.datetime.now()
        }
    except (IndexError, TypeError) as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ get_user_data_safe: {e}")
        return {
            'user_id': 0,
            'balance': 100,
            'daily_streak': 0,
            'last_daily': None,
            'inventory': '{"cases": {}, "items": {}}',
            'created_at': datetime.datetime.now()
        }

def get_reward(case):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É –∏–∑ –∫–µ–π—Å–∞"""
    rewards = case['rewards']
    rand = random.random()
    cumulative_chance = 0
    
    for reward in rewards:
        cumulative_chance += reward['chance']
        if rand <= cumulative_chance:
            return reward
    return rewards[-1]

async def process_reward(user, reward, case):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—É –∏ –≤—ã–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        if reward['type'] == 'coins':
            amount = random.randint(reward['amount'][0], reward['amount'][1])
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–∞—Ñ—ã –∫ –Ω–∞–≥—Ä–∞–¥–µ
            amount = db.apply_buff_to_amount(user.id, amount, 'case_bonus')
            amount = db.apply_buff_to_amount(user.id, amount, 'multiplier')
            amount = db.apply_buff_to_amount(user.id, amount, 'all_bonus')
            
            db.update_balance(user.id, amount)
            db.log_transaction(user.id, 'case_reward', amount, description=f"–ö–µ–π—Å: {case['name']}")
            
            return f"üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {amount} {EMOJIS['coin']}!\n{reward['description']}"
            
        elif reward['type'] == 'special_item':
            item_name = reward['name']
            success = db.add_item_to_inventory(user.id, item_name)
            
            if success:
                return f"üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–µ–¥–º–µ—Ç: **{item_name}**!\n{reward['description']}"
            else:
                return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç {item_name}"
                
        elif reward['type'] == 'bonus':
            # –í—Ä–µ–º–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ)
            return f"üåü –í—ã –ø–æ–ª—É—á–∏–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å: {reward['description']}"
            
        else:
            return f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –Ω–∞–≥—Ä–∞–¥—ã: {reward}"
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–≥—Ä–∞–¥—ã: {e}")
        return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–≥—Ä–∞–¥—ã"

# ========== –ö–õ–ê–°–°–´ VIEW ==========
class ImprovedCasesView(View):
    def __init__(self, pages, author_id):
        super().__init__(timeout=120)
        self.pages = pages
        self.current_page = 0
        self.total_pages = len(pages)
        self.author_id = author_id
        self.update_buttons()

    def update_buttons(self):
        self.previous_button.disabled = (self.current_page == 0)
        self.next_button.disabled = (self.current_page >= self.total_pages - 1)

    @discord.ui.button(label='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', style=discord.ButtonStyle.secondary)
    async def previous_button(self, interaction: discord.Interaction, button: Button):
        if interaction.user.id != self.author_id:
            await interaction.response.send_message("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏—è!", ephemeral=True)
            return
        
        if self.current_page > 0:
            self.current_page -= 1
            self.update_buttons()
            embed = self.create_embed()
            await interaction.response.edit_message(embed=embed, view=self)

    @discord.ui.button(label='‚û°Ô∏è –í–ø–µ—Ä–µ–¥', style=discord.ButtonStyle.secondary)
    async def next_button(self, interaction: discord.Interaction, button: Button):
        if interaction.user.id != self.author_id:
            await interaction.response.send_message("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏—è!", ephemeral=True)
            return
        
        if self.current_page < self.total_pages - 1:
            self.current_page += 1
            self.update_buttons()
            embed = self.create_embed()
            await interaction.response.edit_message(embed=embed, view=self)

    def create_embed(self):
        page_cases = self.pages[self.current_page]
        embed = discord.Embed(
            title=f"üéÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–µ–π—Å—ã (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {self.current_page + 1}/{self.total_pages})",
            description="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–û—Ç–∫—Ä—ã—Ç—å' —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –∏ –æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å",
            color=0xff69b4
        )
        
        for case in page_cases:
            case_id = case[0]
            case_name = case[1]
            case_price = case[2]
            
            embed.add_field(
                name=f"{case_name} (ID: {case_id})",
                value=f"–¶–µ–Ω–∞: {case_price} {EMOJIS['coin']}",
                inline=False
            )
        
        return embed

class CaseView(View):
    def __init__(self, case_id, author_id):
        super().__init__(timeout=60)
        self.case_id = case_id
        self.author_id = author_id

    @discord.ui.button(label='üéÅ –û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å', style=discord.ButtonStyle.primary)
    async def open_case(self, interaction: discord.Interaction, button: Button):
        if interaction.user.id != self.author_id:
            await interaction.response.send_message("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à –∫–µ–π—Å!", ephemeral=True)
            return
        
        try:
            case_data = db.get_case(self.case_id)
            if not case_data:
                await interaction.response.send_message("‚ùå –ö–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!", ephemeral=True)
                return
            
            user_data = db.get_user(interaction.user.id)
            user_safe = get_user_data_safe(user_data)
            
            case_price = case_data[2]
            if user_safe['balance'] < case_price:
                await interaction.response.send_message("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞!", ephemeral=True)
                return
            
            # –°–ø–∏–Ω –∞–Ω–∏–º–∞—Ü–∏—è
            embed = discord.Embed(title="üé∞ –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–∞...", color=0xffd700)
            await interaction.response.edit_message(embed=embed, view=None)
            
            for i in range(3):
                await asyncio.sleep(1)
                embed.description = "üéÅ" * (i + 1)
                await interaction.edit_original_response(embed=embed)
            
            # –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
            db.update_balance(interaction.user.id, -case_price)
            db.log_transaction(interaction.user.id, 'case_purchase', -case_price, description=f"–ü–æ–∫—É–ø–∫–∞ –∫–µ–π—Å–∞: {case_data[1]}")
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã
            case = {
                'name': case_data[1],
                'price': case_data[2],
                'rewards': json.loads(case_data[3])
            }
            
            reward = get_reward(case)
            reward_text = await process_reward(interaction.user, reward, case)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            db.update_user_stat(interaction.user.id, 'cases_opened')
            
            embed = discord.Embed(
                title=f"üéâ {case['name']} –æ—Ç–∫—Ä—ã—Ç!",
                description=reward_text,
                color=0x00ff00
            )
            embed.add_field(name="üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å", value=f"{case_price} {EMOJIS['coin']}", inline=True)
            
            await interaction.edit_original_response(embed=embed)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–µ–π—Å–∞: {e}")
            error_embed = discord.Embed(
                title="‚ùå –û—à–∏–±–∫–∞",
                description="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–µ–π—Å–∞",
                color=0xff0000
            )
            await interaction.edit_original_response(embed=error_embed)

class CoinFlipView(View):
    def __init__(self, author_id, bet):
        super().__init__(timeout=30)
        self.author_id = author_id
        self.bet = bet

    @discord.ui.button(label='ü™ô –û—Ä–µ–ª', style=discord.ButtonStyle.primary)
    async def heads(self, interaction: discord.Interaction, button: Button):
        await self.flip_coin(interaction, 'heads')

    @discord.ui.button(label='ü™ô –†–µ—à–∫–∞', style=discord.ButtonStyle.primary)
    async def tails(self, interaction: discord.Interaction, button: Button):
        await self.flip_coin(interaction, 'tails')

    async def flip_coin(self, interaction: discord.Interaction, choice):
        if interaction.user.id != self.author_id:
            await interaction.response.send_message("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∏–≥—Ä–∞!", ephemeral=True)
            return
        
        # –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–Ω–∏—è
        embed = discord.Embed(title="ü™ô –ú–æ–Ω–µ—Ç–∞ –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è...", color=0xffd700)
        await interaction.response.edit_message(embed=embed, view=None)
        
        for i in range(3):
            await asyncio.sleep(0.5)
            embed.description = "üåÄ" * (i + 1)
            await interaction.edit_original_response(embed=embed)
        
        await asyncio.sleep(1)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç
        result = random.choice(['heads', 'tails'])
        result_emoji = 'ü™ô –û—Ä–µ–ª' if result == 'heads' else 'ü™ô –†–µ—à–∫–∞'
        
        if choice == result:
            base_winnings = self.bet
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–∞—Ñ—ã –∫ –≤—ã–∏–≥—Ä—ã—à—É
            winnings = db.apply_buff_to_amount(interaction.user.id, base_winnings, 'coinflip_bonus')
            winnings = db.apply_buff_to_amount(interaction.user.id, winnings, 'game_bonus')
            winnings = db.apply_buff_to_amount(interaction.user.id, winnings, 'multiplier')
            winnings = db.apply_buff_to_amount(interaction.user.id, winnings, 'all_bonus')
            
            db.update_balance(interaction.user.id, winnings)
            db.log_transaction(interaction.user.id, 'coinflip_win', winnings, description="–ü–æ–±–µ–¥–∞ –≤ coinflip")
            db.update_user_stat(interaction.user.id, 'coinflip_wins')
            
            result_text = f"üéâ –ü–æ–±–µ–¥–∞! –í—ã–∏–≥—Ä—ã—à: {winnings} {EMOJIS['coin']}"
            color = 0x00ff00
        else:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–∞—Ñ –∑–∞—â–∏—Ç—ã –æ—Ç –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π
            loss = db.apply_buff_to_amount(interaction.user.id, self.bet, 'loss_protection')
            db.update_balance(interaction.user.id, -loss)
            db.log_transaction(interaction.user.id, 'coinflip_loss', -loss, description="–ü—Ä–æ–∏–≥—Ä—ã—à –≤ coinflip")
            
            result_text = f"‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à! –ü–æ—Ç–µ—Ä—è–Ω–æ: {loss} {EMOJIS['coin']}"
            color = 0xff0000
        
        embed = discord.Embed(
            title=f"ü™ô CoinFlip - –°—Ç–∞–≤–∫–∞: {self.bet} {EMOJIS['coin']}",
            description=f"**–†–µ–∑—É–ª—å—Ç–∞—Ç:** {result_emoji}\n**–í–∞—à –≤—ã–±–æ—Ä:** {'–û—Ä–µ–ª' if choice == 'heads' else '–†–µ—à–∫–∞'}\n\n{result_text}",
            color=color
        )
        
        await interaction.edit_original_response(embed=embed)

# ========== –ö–û–ú–ê–ù–î–´ ==========
def is_admin():
    async def predicate(interaction: discord.Interaction) -> bool:
        is_admin = interaction.user.id in ADMIN_IDS
        if not is_admin:
            await interaction.response.send_message(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!",
                ephemeral=True
            )
        return is_admin
    return app_commands.check(predicate)

# –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
@bot.tree.command(name="test", description="–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã")
async def test_command(interaction: discord.Interaction):
    embed = discord.Embed(
        title="‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!",
        description="–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç –∫–æ–º–∞–Ω–¥—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ!",
        color=0x00ff00
    )
    await interaction.response.send_message(embed=embed, ephemeral=True)

@bot.tree.command(name="ping", description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∏–Ω–≥ –±–æ—Ç–∞")
async def ping(interaction: discord.Interaction):
    embed = discord.Embed(
        title="üèì –ü–æ–Ω–≥!",
        description=f"–ó–∞–¥–µ—Ä–∂–∫–∞ –±–æ—Ç–∞: {round(bot.latency * 1000)}–º—Å",
        color=0x00ff00
    )
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="sync", description="–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã (–∞–¥–º–∏–Ω)")
@is_admin()
async def sync_commands(interaction: discord.Interaction):
    try:
        await interaction.response.defer(ephemeral=True)
        
        synced = await bot.tree.sync()
        
        embed = discord.Embed(
            title="‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
            description=f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(synced)} –∫–æ–º–∞–Ω–¥",
            color=0x00ff00
        )
        
        if synced:
            commands_list = "\n".join([f"‚Ä¢ `/{cmd.name}`" for cmd in synced])
            embed.add_field(name="–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:", value=commands_list, inline=False)
        
        await interaction.followup.send(embed=embed, ephemeral=True)
        
    except Exception as e:
        error_embed = discord.Embed(
            title="‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏",
            description=f"```{e}```",
            color=0xff0000
        )
        await interaction.followup.send(embed=error_embed, ephemeral=True)

# –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
@bot.tree.command(name="balance", description="–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à –±–∞–ª–∞–Ω—Å")
@app_commands.describe(user="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —á–µ–π –±–∞–ª–∞–Ω—Å –ø–æ–∫–∞–∑–∞—Ç—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
async def balance(interaction: discord.Interaction, user: discord.Member = None):
    try:
        user = user or interaction.user
        user_data = db.get_user(user.id)
        user_safe = get_user_data_safe(user_data)
        
        embed = discord.Embed(
            title=f"{EMOJIS['coin']} –ë–∞–ª–∞–Ω—Å {user.display_name}",
            color=0xffd700
        )
        embed.add_field(name="–ë–∞–ª–∞–Ω—Å", value=f"{user_safe['balance']} {EMOJIS['coin']}", inline=True)
        embed.add_field(name="–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–µ—Ä–∏—è", value=f"{user_safe['daily_streak']} –¥–Ω–µ–π", inline=True)
        
        if user.avatar:
            embed.set_thumbnail(url=user.avatar.url)
        
        await interaction.response.send_message(embed=embed)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ balance: {e}")
        error_embed = discord.Embed(
            title="‚ùå –û—à–∏–±–∫–∞",
            description="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.",
            color=0xff0000
        )
        await interaction.response.send_message(embed=error_embed, ephemeral=True)

@bot.tree.command(name="daily", description="–ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É")
async def daily(interaction: discord.Interaction):
    try:
        user_data = db.get_user(interaction.user.id)
        user_safe = get_user_data_safe(user_data)
        
        last_daily_str = user_safe['last_daily']
        daily_streak = user_safe['daily_streak']
        
        last_daily = None
        if last_daily_str:
            try:
                last_daily = datetime.datetime.fromisoformat(last_daily_str)
            except (ValueError, TypeError):
                last_daily = None
        
        now = datetime.datetime.now()
        
        if last_daily and (now - last_daily).days < 1:
            await interaction.response.send_message("‚ùå –í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É —Å–µ–≥–æ–¥–Ω—è!", ephemeral=True)
            return
        
        streak = daily_streak + 1 if last_daily and (now - last_daily).days == 1 else 1
        base_reward = 100
        streak_bonus = streak * 10
        reward = base_reward + streak_bonus
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–∞—Ñ—ã –∫ –Ω–∞–≥—Ä–∞–¥–µ
        reward = db.apply_buff_to_amount(interaction.user.id, reward, 'daily_bonus')
        reward = db.apply_buff_to_amount(interaction.user.id, reward, 'multiplier')
        reward = db.apply_buff_to_amount(interaction.user.id, reward, 'all_bonus')
        
        db.update_balance(interaction.user.id, reward)
        cursor = db.conn.cursor()
        cursor.execute('UPDATE users SET daily_streak = %s, last_daily = %s WHERE user_id = %s', 
                       (streak, now.isoformat(), interaction.user.id))
        db.conn.commit()
        db.log_transaction(interaction.user.id, 'daily', reward)
        db.update_user_stat(interaction.user.id, 'daily_claimed')
        
        embed = discord.Embed(
            title=f"{EMOJIS['daily']} –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞",
            description=f"–ù–∞–≥—Ä–∞–¥–∞: {reward} {EMOJIS['coin']}\n–°–µ—Ä–∏—è: {streak} –¥–Ω–µ–π\n–ë–æ–Ω—É—Å –∑–∞ —Å–µ—Ä–∏—é: +{streak_bonus} {EMOJIS['coin']}",
            color=0x00ff00
        )
        
        await interaction.response.send_message(embed=embed)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ daily: {e}")
        error_embed = discord.Embed(
            title="‚ùå –û—à–∏–±–∫–∞",
            description="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É.",
            color=0xff0000
        )
        await interaction.response.send_message(embed=error_embed, ephemeral=True)

# –ö–æ–º–∞–Ω–¥—ã –∫–µ–π—Å–æ–≤
@bot.tree.command(name="cases", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–µ–π—Å–æ–≤")
async def cases_list(interaction: discord.Interaction):
    try:
        cases = db.get_cases()
        
        if not cases:
            await interaction.response.send_message("‚ùå –ö–µ–π—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!", ephemeral=True)
            return
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ 3 –∫–µ–π—Å–∞
        pages = []
        current_page = []
        
        for i, case in enumerate(cases):
            if i > 0 and i % 3 == 0:
                pages.append(current_page)
                current_page = []
            current_page.append(case)
        
        if current_page:
            pages.append(current_page)
        
        view = ImprovedCasesView(pages, interaction.user.id)
        embed = view.create_embed()
        await interaction.response.send_message(embed=embed, view=view)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ cases: {e}")
        await interaction.response.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–µ–π—Å–æ–≤!", ephemeral=True)

@bot.tree.command(name="open_case", description="–û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å")
@app_commands.describe(case_id="ID –∫–µ–π—Å–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è")
async def open_case(interaction: discord.Interaction, case_id: int):
    try:
        case_data = db.get_case(case_id)
        if not case_data:
            await interaction.response.send_message("‚ùå –ö–µ–π—Å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω!", ephemeral=True)
            return
        
        user_data = db.get_user(interaction.user.id)
        user_safe = get_user_data_safe(user_data)
        
        case_price = case_data[2]
        if user_safe['balance'] < case_price:
            await interaction.response.send_message("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —ç—Ç–æ–≥–æ –∫–µ–π—Å–∞!", ephemeral=True)
            return
        
        view = CaseView(case_id, interaction.user.id)
        embed = discord.Embed(
            title=f"üéÅ {case_data[1]}",
            description=f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {case_price} {EMOJIS['coin']}\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å!",
            color=0xff69b4
        )
        
        await interaction.response.send_message(embed=embed, view=view)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ open_case: {e}")
        await interaction.response.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–µ–π—Å–∞!", ephemeral=True)

# –ú–∏–Ω–∏-–∏–≥—Ä—ã
@bot.tree.command(name="coinflip", description="–ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç—É –Ω–∞ —Å—Ç–∞–≤–∫—É (50/50 —à–∞–Ω—Å)")
@app_commands.describe(bet="–°—Ç–∞–≤–∫–∞ –≤ –º–æ–Ω–µ—Ç–∞—Ö")
async def coinflip(interaction: discord.Interaction, bet: int):
    user_data = db.get_user(interaction.user.id)
    user_safe = get_user_data_safe(user_data)
    
    if user_safe['balance'] < bet:
        await interaction.response.send_message("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!", ephemeral=True)
        return
    
    if bet <= 0:
        await interaction.response.send_message("‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!", ephemeral=True)
        return
    
    embed = discord.Embed(
        title=f"ü™ô –ü–æ–¥–±—Ä–∞—Å—ã–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã",
        description=f"–°—Ç–∞–≤–∫–∞: {bet} {EMOJIS['coin']}\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ—Ä–æ–Ω—É –º–æ–Ω–µ—Ç—ã:",
        color=0xffd700
    )
    
    view = CoinFlipView(interaction.user.id, bet)
    await interaction.response.send_message(embed=embed, view=view)

@bot.tree.command(name="slots", description="–ò–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä–æ–≤—ã–µ –∞–≤—Ç–æ–º–∞—Ç—ã")
@app_commands.describe(bet="–°—Ç–∞–≤–∫–∞ –≤ –º–æ–Ω–µ—Ç–∞—Ö")
async def slots(interaction: discord.Interaction, bet: int):
    try:
        user_data = db.get_user(interaction.user.id)
        user_safe = get_user_data_safe(user_data)
        
        if user_safe['balance'] < bet:
            await interaction.response.send_message("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!", ephemeral=True)
            return
    
        symbols = ['üçí', 'üçã', 'üçä', 'üçá', 'üîî', 'üíé', '7Ô∏è‚É£']
        
        # –ê–Ω–∏–º–∞—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è
        embed = discord.Embed(title="üé∞ –ò–≥—Ä–æ–≤—ã–µ –∞–≤—Ç–æ–º–∞—Ç—ã", description="–í—Ä–∞—â–µ–Ω–∏–µ...", color=0xff69b4)
        await interaction.response.send_message(embed=embed)
        
        for i in range(3):
            await asyncio.sleep(0.5)
            slot_result = [random.choice(symbols) for _ in range(3)]
            embed.description = f"üé∞ | {' | '.join(slot_result)} | üé∞"
            await interaction.edit_original_response(embed=embed)
        
        await asyncio.sleep(1)
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        final_result = [random.choice(symbols) for _ in range(3)]
        embed.description = f"üé∞ | {' | '.join(final_result)} | üé∞"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∏–≥—Ä—ã—à–∞
        if final_result[0] == final_result[1] == final_result[2]:
            if final_result[0] == 'üíé':
                multiplier = 50
            elif final_result[0] == '7Ô∏è‚É£':
                multiplier = 25
            elif final_result[0] == 'üîî':
                multiplier = 15
            else:
                multiplier = 8
            
            base_winnings = bet * multiplier
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–∞—Ñ—ã –∫ –≤—ã–∏–≥—Ä—ã—à—É
            winnings = db.apply_buff_to_amount(interaction.user.id, base_winnings, 'slot_bonus')
            winnings = db.apply_buff_to_amount(interaction.user.id, winnings, 'game_bonus')
            winnings = db.apply_buff_to_amount(interaction.user.id, winnings, 'multiplier')
            winnings = db.apply_buff_to_amount(interaction.user.id, winnings, 'all_bonus')
            
            db.update_balance(interaction.user.id, winnings)
            db.log_transaction(interaction.user.id, 'slots_win', winnings, description=f"–î–ñ–ï–ö–ü–û–¢ –≤ —Å–ª–æ—Ç–∞—Ö x{multiplier}")
            db.update_user_stat(interaction.user.id, 'slot_wins')
            
            result_text = f"üéâ –î–ñ–ï–ö–ü–û–¢! x{multiplier}\n–í—ã–∏–≥—Ä—ã—à: {winnings} {EMOJIS['coin']}"
            color = 0x00ff00
        elif final_result[0] == final_result[1] or final_result[1] == final_result[2]:
            multiplier = 3
            base_winnings = bet * multiplier
            winnings = db.apply_buff_to_amount(interaction.user.id, base_winnings, 'slot_bonus')
            winnings = db.apply_buff_to_amount(interaction.user.id, winnings, 'game_bonus')
            winnings = db.apply_buff_to_amount(interaction.user.id, winnings, 'multiplier')
            winnings = db.apply_buff_to_amount(interaction.user.id, winnings, 'all_bonus')
            
            db.update_balance(interaction.user.id, winnings)
            db.log_transaction(interaction.user.id, 'slots_win', winnings, description=f"–ü–æ–±–µ–¥–∞ –≤ —Å–ª–æ—Ç–∞—Ö x{multiplier}")
            
            result_text = f"‚úÖ –î–≤–∞ –≤ —Ä—è–¥! x{multiplier}\n–í—ã–∏–≥—Ä—ã—à: {winnings} {EMOJIS['coin']}"
            color = 0x00ff00
        else:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–∞—Ñ –∑–∞—â–∏—Ç—ã –æ—Ç –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π
            loss = db.apply_buff_to_amount(interaction.user.id, bet, 'loss_protection')
            db.update_balance(interaction.user.id, -loss)
            db.log_transaction(interaction.user.id, 'slots_loss', -loss, description="–ü—Ä–æ–∏–≥—Ä—ã—à –≤ —Å–ª–æ—Ç–∞—Ö")
            
            result_text = f"‚ùå –ü–æ–≤–µ–∑–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!\n–ü–æ—Ç–µ—Ä—è–Ω–æ: {loss} {EMOJIS['coin']}"
            color = 0xff0000
        
        embed.add_field(name="–†–µ–∑—É–ª—å—Ç–∞—Ç", value=result_text, inline=False)
        embed.add_field(name="–°—Ç–∞–≤–∫–∞", value=f"{bet} {EMOJIS['coin']}", inline=True)
        embed.color = color
        
        await interaction.edit_original_response(embed=embed)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ slots: {e}")
        await interaction.response.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Å–ª–æ—Ç–∞—Ö!", ephemeral=True)

# –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏ –ø—Ä–µ–¥–º–µ—Ç—ã
@bot.tree.command(name="inventory", description="–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å")
async def inventory(interaction: discord.Interaction):
    try:
        inventory_data = db.get_user_inventory(interaction.user.id)
        
        embed = discord.Embed(
            title=f"üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å {interaction.user.display_name}",
            color=0x3498db
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–µ–π—Å—ã
        cases = inventory_data.get("cases", {})
        if cases:
            cases_text = ""
            for case_key, case_info in cases.items():
                try:
                    case_id = case_key.replace("case_", "")
                    cases_text += f"‚Ä¢ {case_info.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–µ–π—Å')} (ID: {case_id}) √ó{case_info.get('count', 1)}\n"
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–µ–π—Å–∞ {case_key}: {e}")
                    continue
            embed.add_field(name="üéÅ –ö–µ–π—Å—ã", value=cases_text, inline=False)
        else:
            embed.add_field(name="üéÅ –ö–µ–π—Å—ã", value="–ü—É—Å—Ç–æ", inline=False)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã
        items = inventory_data.get("items", {})
        if items:
            items_text = ""
            for item_id, count in items.items():
                try:
                    item_name = db.get_item_name_by_id(item_id)
                    items_text += f"‚Ä¢ {item_name} √ó{count}\n"
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ {item_id}: {e}")
                    items_text += f"‚Ä¢ –ü—Ä–µ–¥–º–µ—Ç ID:{item_id} √ó{count}\n"
            
            if items_text:
                embed.add_field(name="üì¶ –ü—Ä–µ–¥–º–µ—Ç—ã", value=items_text, inline=False)
            else:
                embed.add_field(name="üì¶ –ü—Ä–µ–¥–º–µ—Ç—ã", value="–ü—É—Å—Ç–æ", inline=False)
        else:
            embed.add_field(name="üì¶ –ü—Ä–µ–¥–º–µ—Ç—ã", value="–ü—É—Å—Ç–æ", inline=False)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –±–∞—Ñ—ã
        buffs = db.get_user_buffs(interaction.user.id)
        if buffs:
            buffs_text = "\n".join([f"‚Ä¢ **{buff['item_name']}**: {buff['description']}" for buff in buffs.values()])
            embed.add_field(name="üéØ –ê–∫—Ç–∏–≤–Ω—ã–µ –±–∞—Ñ—ã", value=buffs_text, inline=False)
        
        await interaction.response.send_message(embed=embed)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ inventory: {e}")
        await interaction.response.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è!", ephemeral=True)

@bot.tree.command(name="buffs", description="–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–∞—Ñ—ã")
async def buffs(interaction: discord.Interaction):
    buffs = db.get_user_buffs(interaction.user.id)
    
    embed = discord.Embed(title="üéØ –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–∞—Ñ—ã", color=0x00ff00)
    
    if not buffs:
        embed.description = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞—Ñ–æ–≤. –ü—Ä–∏–æ–±—Ä–µ—Ç–∞–π—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ –∫–µ–π—Å–∞—Ö!"
        await interaction.response.send_message(embed=embed)
        return
    
    for buff_type, buff_info in buffs.items():
        embed.add_field(
            name=f"‚ú® {buff_info['item_name']}",
            value=f"**–≠—Ñ—Ñ–µ–∫—Ç:** {buff_info['description']}\n**–ú–Ω–æ–∂–∏—Ç–µ–ª—å:** x{buff_info['value']}",
            inline=False
        )
    
    embed.set_footer(text=f"–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞—Ñ–æ–≤: {len(buffs)}")
    await interaction.response.send_message(embed=embed)

# –ü–æ–º–æ—â—å
@bot.tree.command(name="help", description="–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥")
async def help_command(interaction: discord.Interaction):
    embed = discord.Embed(
        title="üéÆ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –ë–æ—Ç - –ü–æ–º–æ—â—å",
        description="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫—É—é –∏–≥—Ä—É!",
        color=0x3498db
    )
    
    embed.add_field(
        name="üí∞ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã",
        value="""**/balance** - –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å
**/daily** - –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞
**/inventory** - –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å
**/buffs** - –ê–∫—Ç–∏–≤–Ω—ã–µ –±–∞—Ñ—ã""",
        inline=False
    )
    
    embed.add_field(
        name="üéÅ –ö–µ–π—Å—ã",
        value="""**/cases** - –°–ø–∏—Å–æ–∫ –∫–µ–π—Å–æ–≤
**/open_case** ID - –û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å""",
        inline=False
    )
    
    embed.add_field(
        name="üéÆ –ò–≥—Ä—ã",
        value="""**/coinflip** —Å—Ç–∞–≤–∫–∞ - –ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç—É
**/slots** —Å—Ç–∞–≤–∫–∞ - –ò–≥—Ä–æ–≤—ã–µ –∞–≤—Ç–æ–º–∞—Ç—ã""",
        inline=False
    )
    
    embed.set_footer(text="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ / –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥")
    
    await interaction.response.send_message(embed=embed)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@bot.tree.error
async def on_app_command_error(interaction: discord.Interaction, error: app_commands.AppCommandError):
    if isinstance(error, app_commands.CheckFailure):
        return
    elif isinstance(error, app_commands.CommandNotFound):
        await interaction.response.send_message("‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", ephemeral=True)
    elif isinstance(error, app_commands.MissingPermissions):
        await interaction.response.send_message("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!", ephemeral=True)
    else:
        print(f"üî¥ –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {error}")
        try:
            await interaction.response.send_message(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã!",
                ephemeral=True
            )
        except:
            pass

# ========== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========
if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ –±–æ—Ç–∞...")
    print(f"üîë –¢–æ–∫–µ–Ω: {'‚úÖ –ù–∞–π–¥–µ–Ω' if BOT_TOKEN else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
    print(f"üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞' if DATABASE_URL else '‚ùå –û—à–∏–±–∫–∞'}")
    print(f"üëë –ê–¥–º–∏–Ω—ã: {len(ADMIN_IDS)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("=" * 50)
    
    try:
        bot.run(BOT_TOKEN)
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        traceback.print_exc()
